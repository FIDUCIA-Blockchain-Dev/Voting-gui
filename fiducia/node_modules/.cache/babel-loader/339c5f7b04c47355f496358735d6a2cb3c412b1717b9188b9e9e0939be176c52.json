{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nexport class BaseWeb3Error extends Error {\n  constructor(msg, innerError) {\n    super(msg);\n    this.innerError = innerError;\n    this.name = this.constructor.name;\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(new.target.constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n  static convertToString(value) {\n    let unquotValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    // Using \"null\" value intentionally for validation\n    // eslint-disable-next-line no-null/no-null\n    if (value === null || value === undefined) return 'undefined';\n    const result = JSON.stringify(value, (_, v) => typeof v === 'bigint' ? v.toString() : v);\n    return unquotValue && ['bigint', 'string'].includes(typeof value) ? result.replace(/['\\\\\"]+/g, '') : result;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      innerError: this.innerError\n    };\n  }\n}\nexport class InvalidValueError extends BaseWeb3Error {\n  constructor(value, msg) {\n    super(`Invalid value given \"${BaseWeb3Error.convertToString(value, true)}\". Error: ${msg}.`);\n    this.name = this.constructor.name;\n  }\n}","map":{"version":3,"names":["BaseWeb3Error","Error","constructor","msg","innerError","name","captureStackTrace","new","target","stack","convertToString","value","unquotValue","arguments","length","undefined","result","JSON","stringify","_","v","toString","includes","replace","toJSON","code","message","InvalidValueError"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-errors\\src\\web3_error_base.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { Web3Error } from 'web3-types';\r\n\r\nexport abstract class BaseWeb3Error extends Error implements Web3Error {\r\n\tpublic readonly name: string;\r\n\tpublic abstract readonly code: number;\r\n\tpublic stack: string | undefined;\r\n\tpublic innerError: Error | Error[] | undefined;\r\n\r\n\tpublic constructor(msg?: string, innerError?: Error | Error[]) {\r\n\t\tsuper(msg);\r\n\t\tthis.innerError = innerError;\r\n\t\tthis.name = this.constructor.name;\r\n\r\n\t\tif (typeof Error.captureStackTrace === 'function') {\r\n\t\t\tError.captureStackTrace(new.target.constructor);\r\n\t\t} else {\r\n\t\t\tthis.stack = new Error().stack;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static convertToString(value: unknown, unquotValue = false) {\r\n\t\t// Using \"null\" value intentionally for validation\r\n\t\t// eslint-disable-next-line no-null/no-null\r\n\t\tif (value === null || value === undefined) return 'undefined';\r\n\r\n\t\tconst result = JSON.stringify(\r\n\t\t\tvalue,\r\n\t\t\t(_, v) => (typeof v === 'bigint' ? v.toString() : v) as unknown,\r\n\t\t);\r\n\r\n\t\treturn unquotValue && ['bigint', 'string'].includes(typeof value)\r\n\t\t\t? result.replace(/['\\\\\"]+/g, '')\r\n\t\t\t: result;\r\n\t}\r\n\r\n\tpublic toJSON() {\r\n\t\treturn {\r\n\t\t\tname: this.name,\r\n\t\t\tcode: this.code,\r\n\t\t\tmessage: this.message,\r\n\t\t\tinnerError: this.innerError,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport abstract class InvalidValueError extends BaseWeb3Error {\r\n\tpublic readonly name: string;\r\n\r\n\tpublic constructor(value: unknown, msg: string) {\r\n\t\tsuper(\r\n\t\t\t`Invalid value given \"${BaseWeb3Error.convertToString(value, true)}\". Error: ${msg}.`,\r\n\t\t);\r\n\t\tthis.name = this.constructor.name;\r\n\t}\r\n}\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAqBA,OAAM,MAAgBA,aAAc,SAAQC,KAAK;EAMhDC,YAAmBC,GAAY,EAAEC,UAA4B;IAC5D,KAAK,CAACD,GAAG,CAAC;IACV,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,IAAI,GAAG,IAAI,CAACH,WAAW,CAACG,IAAI;IAEjC,IAAI,OAAOJ,KAAK,CAACK,iBAAiB,KAAK,UAAU,EAAE;MAClDL,KAAK,CAACK,iBAAiB,CAACC,GAAG,CAACC,MAAM,CAACN,WAAW,CAAC;KAC/C,MAAM;MACN,IAAI,CAACO,KAAK,GAAG,IAAIR,KAAK,EAAE,CAACQ,KAAK;;EAEhC;EAEO,OAAOC,eAAeA,CAACC,KAAc,EAAqB;IAAA,IAAnBC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAChE;IACA;IACA,IAAIF,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKI,SAAS,EAAE,OAAO,WAAW;IAE7D,MAAMC,MAAM,GAAGC,IAAI,CAACC,SAAS,CAC5BP,KAAK,EACL,CAACQ,CAAC,EAAEC,CAAC,KAAM,OAAOA,CAAC,KAAK,QAAQ,GAAGA,CAAC,CAACC,QAAQ,EAAE,GAAGD,CAAa,CAC/D;IAED,OAAOR,WAAW,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAACU,QAAQ,CAAC,OAAOX,KAAK,CAAC,GAC9DK,MAAM,CAACO,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,GAC9BP,MAAM;EACV;EAEOQ,MAAMA,CAAA;IACZ,OAAO;MACNnB,IAAI,EAAE,IAAI,CAACA,IAAI;MACfoB,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBtB,UAAU,EAAE,IAAI,CAACA;KACjB;EACF;;AAGD,OAAM,MAAgBuB,iBAAkB,SAAQ3B,aAAa;EAG5DE,YAAmBS,KAAc,EAAER,GAAW;IAC7C,KAAK,CACJ,wBAAwBH,aAAa,CAACU,eAAe,CAACC,KAAK,EAAE,IAAI,CAAC,aAAaR,GAAG,GAAG,CACrF;IACD,IAAI,CAACE,IAAI,GAAG,IAAI,CAACH,WAAW,CAACG,IAAI;EAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}