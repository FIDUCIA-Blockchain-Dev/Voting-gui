{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { format } from 'web3-utils';\nimport { netRpcMethods } from 'web3-rpc-methods';\nexport function getId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield netRpcMethods.getId(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexport function getPeerCount(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield netRpcMethods.getPeerCount(web3Context.requestManager);\n    // Data returned is number in hex format\n    return format({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexport const isListening = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return netRpcMethods.isListening(web3Context.requestManager);\n});","map":{"version":3,"names":["format","netRpcMethods","getId","web3Context","returnFormat","response","requestManager","getPeerCount","isListening","__awaiter"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-net\\src\\rpc_method_wrappers.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { format } from 'web3-utils';\r\nimport { Web3Context } from 'web3-core';\r\nimport { DataFormat, Web3NetAPI } from 'web3-types';\r\nimport { netRpcMethods } from 'web3-rpc-methods';\r\n\r\nexport async function getId<ReturnFormat extends DataFormat>(\r\n\tweb3Context: Web3Context<Web3NetAPI>,\r\n\treturnFormat: ReturnFormat,\r\n) {\r\n\tconst response = await netRpcMethods.getId(web3Context.requestManager);\r\n\r\n\treturn format({ format: 'uint' }, response as unknown as number, returnFormat);\r\n}\r\n\r\nexport async function getPeerCount<ReturnFormat extends DataFormat>(\r\n\tweb3Context: Web3Context<Web3NetAPI>,\r\n\treturnFormat: ReturnFormat,\r\n) {\r\n\tconst response = await netRpcMethods.getPeerCount(web3Context.requestManager);\r\n\r\n\t// Data returned is number in hex format\r\n\treturn format({ format: 'uint' }, response as unknown as number, returnFormat);\r\n}\r\n\r\nexport const isListening = async (web3Context: Web3Context<Web3NetAPI>) =>\r\n\tnetRpcMethods.isListening(web3Context.requestManager);\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,MAAM,QAAQ,YAAY;AAGnC,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,OAAM,SAAgBC,KAAKA,CAC1BC,WAAoC,EACpCC,YAA0B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAACC,KAAK,CAACC,WAAW,CAACG,cAAc,CAAC;IAEtE,OAAON,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAM,CAAE,EAAEK,QAA6B,EAAED,YAAY,CAAC;EAC/E,CAAC;;AAED,OAAM,SAAgBG,YAAYA,CACjCJ,WAAoC,EACpCC,YAA0B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAACM,YAAY,CAACJ,WAAW,CAACG,cAAc,CAAC;IAE7E;IACA,OAAON,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAM,CAAE,EAAEK,QAA6B,EAAED,YAAY,CAAC;EAC/E,CAAC;;AAED,OAAO,MAAMI,WAAW,GAAUL,WAAoC,IAAIM,SAAA;EACzE,OAAAR,aAAa,CAACO,WAAW,CAACL,WAAW,CAACG,cAAc,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}