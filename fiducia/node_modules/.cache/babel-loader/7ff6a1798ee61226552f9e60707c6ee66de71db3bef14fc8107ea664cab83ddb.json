{"ast":null,"code":"import { isNullish } from 'web3-utils';\nimport { ExistingPluginNamespaceError } from 'web3-errors';\nimport { isSupportedProvider } from './utils.js';\n// eslint-disable-next-line import/no-cycle\nimport { Web3Config, Web3ConfigEvent } from './web3_config.js';\nimport { Web3RequestManager } from './web3_request_manager.js';\nimport { Web3SubscriptionManager } from './web3_subscription_manager.js';\nimport { Web3BatchRequest } from './web3_batch_request.js';\nexport class Web3Context extends Web3Config {\n  constructor(providerOrContext) {\n    var _a;\n    super();\n    this.providers = Web3RequestManager.providers;\n    // If \"providerOrContext\" is provided as \"string\" or an objects matching \"SupportedProviders\" interface\n    if (isNullish(providerOrContext) || typeof providerOrContext === 'string' && providerOrContext.trim() !== '' || isSupportedProvider(providerOrContext)) {\n      this._requestManager = new Web3RequestManager(providerOrContext);\n      this._subscriptionManager = new Web3SubscriptionManager(this._requestManager, {});\n      return;\n    }\n    const {\n      config,\n      provider,\n      requestManager,\n      subscriptionManager,\n      registeredSubscriptions,\n      accountProvider,\n      wallet\n    } = providerOrContext;\n    this.setConfig(config !== null && config !== void 0 ? config : {});\n    this._requestManager = requestManager !== null && requestManager !== void 0 ? requestManager : new Web3RequestManager(provider, (_a = config === null || config === void 0 ? void 0 : config.enableExperimentalFeatures) === null || _a === void 0 ? void 0 : _a.useSubscriptionWhenCheckingBlockTimeout);\n    if (subscriptionManager) {\n      this._subscriptionManager = subscriptionManager;\n    } else {\n      this._subscriptionManager = new Web3SubscriptionManager(this.requestManager, registeredSubscriptions !== null && registeredSubscriptions !== void 0 ? registeredSubscriptions : {});\n    }\n    if (accountProvider) {\n      this._accountProvider = accountProvider;\n    }\n    if (wallet) {\n      this._wallet = wallet;\n    }\n  }\n  get requestManager() {\n    return this._requestManager;\n  }\n  /**\r\n   * Will return the current subscriptionManager ({@link Web3SubscriptionManager})\r\n   */\n  get subscriptionManager() {\n    return this._subscriptionManager;\n  }\n  get wallet() {\n    return this._wallet;\n  }\n  get accountProvider() {\n    return this._accountProvider;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromContextObject() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new this(...args.reverse());\n  }\n  getContextObject() {\n    var _a;\n    return {\n      config: this.config,\n      provider: this.provider,\n      requestManager: this.requestManager,\n      subscriptionManager: this.subscriptionManager,\n      registeredSubscriptions: (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.registeredSubscriptions,\n      providers: this.providers,\n      wallet: this.wallet,\n      accountProvider: this.accountProvider\n    };\n  }\n  /**\r\n   * Use to create new object of any type extended by `Web3Context`\r\n   * and link it to current context. This can be used to initiate a global context object\r\n   * and then use it to create new objects of any type extended by `Web3Context`.\r\n   */\n  use(ContextRef) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    const newContextChild = new ContextRef(...[...args, this.getContextObject()]);\n    this.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      newContextChild.setConfig({\n        [event.name]: event.newValue\n      });\n    });\n    return newContextChild;\n  }\n  /**\r\n   * Link current context to another context.\r\n   */\n  link(parentContext) {\n    this.setConfig(parentContext.config);\n    this._requestManager = parentContext.requestManager;\n    this.provider = parentContext.provider;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this._subscriptionManager = parentContext.subscriptionManager;\n    this._wallet = parentContext.wallet;\n    this._accountProvider = parentContext._accountProvider;\n    parentContext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      this.setConfig({\n        [event.name]: event.newValue\n      });\n    });\n  }\n  // eslint-disable-next-line no-use-before-define\n  registerPlugin(plugin) {\n    // @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\n    if (this[plugin.pluginNamespace] !== undefined) throw new ExistingPluginNamespaceError(plugin.pluginNamespace);\n    const _pluginObject = {\n      [plugin.pluginNamespace]: plugin\n    };\n    _pluginObject[plugin.pluginNamespace].link(this);\n    Object.assign(this, _pluginObject);\n  }\n  /**\r\n   * Will return the current provider.\r\n   *\r\n   * @returns Returns the current provider\r\n   * @example\r\n   * ```ts\r\n   * const web3 = new Web3Context(\"http://localhost:8545\");\r\n   * console.log(web3.provider);\r\n   * > HttpProvider {\r\n   * \tclientUrl: 'http://localhost:8545',\r\n   * \thttpProviderOptions: undefined\r\n   *  }\r\n   * ```\r\n   */\n  get provider() {\n    return this.currentProvider;\n  }\n  /**\r\n   * Will set the current provider.\r\n   *\r\n   * @param provider - The provider to set\r\n   *\r\n   * Accepted providers are of type {@link SupportedProviders}\r\n   * @example\r\n   * ```ts\r\n   *  const web3Context = new web3ContextContext(\"http://localhost:8545\");\r\n   * web3Context.provider = \"ws://localhost:8545\";\r\n   * console.log(web3Context.provider);\r\n   * > WebSocketProvider {\r\n   * _eventEmitter: EventEmitter {\r\n   * _events: [Object: null prototype] {},\r\n   * _eventsCount: 0,\r\n   * ...\r\n   * }\r\n   * ```\r\n   */\n  set provider(provider) {\n    this.requestManager.setProvider(provider);\n  }\n  /**\r\n   * Will return the current provider. (The same as `provider`)\r\n   *\r\n   * @returns Returns the current provider\r\n   * @example\r\n   * ```ts\r\n   * const web3Context = new Web3Context(\"http://localhost:8545\");\r\n   * console.log(web3Context.provider);\r\n   * > HttpProvider {\r\n   * \tclientUrl: 'http://localhost:8545',\r\n   * \thttpProviderOptions: undefined\r\n   *  }\r\n   * ```\r\n   */\n  get currentProvider() {\n    return this.requestManager.provider;\n  }\n  /**\r\n   * Will set the current provider. (The same as `provider`)\r\n   *\r\n   * @param provider - {@link SupportedProviders} The provider to set\r\n   *\r\n   * @example\r\n   * ```ts\r\n   *  const web3Context = new Web3Context(\"http://localhost:8545\");\r\n   * web3Context.currentProvider = \"ws://localhost:8545\";\r\n   * console.log(web3Context.provider);\r\n   * > WebSocketProvider {\r\n   * _eventEmitter: EventEmitter {\r\n   * _events: [Object: null prototype] {},\r\n   * _eventsCount: 0,\r\n   * ...\r\n   * }\r\n   * ```\r\n   */\n  set currentProvider(provider) {\n    this.requestManager.setProvider(provider);\n  }\n  /**\r\n   * Will return the givenProvider if available.\r\n   *\r\n   * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser. Will return the given provider by the (browser) environment, otherwise `undefined`.\r\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get givenProvider() {\n    return Web3Context.givenProvider;\n  }\n  /**\r\n   * Will set the provider.\r\n   *\r\n   * @param provider - {@link SupportedProviders} The provider to set\r\n   * @returns Returns true if the provider was set\r\n   */\n  setProvider(provider) {\n    this.provider = provider;\n    return true;\n  }\n  /**\r\n   * Will return the {@link Web3BatchRequest} constructor.\r\n   */\n  get BatchRequest() {\n    return Web3BatchRequest.bind(undefined, this._requestManager);\n  }\n}\nWeb3Context.providers = Web3RequestManager.providers;\n/**\r\n * Extend this class when creating a plugin that either doesn't require {@link EthExecutionAPI},\r\n * or interacts with a RPC node that doesn't fully implement {@link EthExecutionAPI}.\r\n *\r\n * To add type support for RPC methods to the {@link Web3RequestManager},\r\n * define a {@link Web3APISpec} and pass it as a generic to Web3PluginBase like so:\r\n *\r\n * @example\r\n * ```ts\r\n * type CustomRpcApi = {\r\n *\tcustom_rpc_method: () => string;\r\n *\tcustom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;\r\n * };\r\n *\r\n * class CustomPlugin extends Web3PluginBase<CustomRpcApi> {...}\r\n * ```\r\n */\nexport class Web3PluginBase extends Web3Context {}\n/**\r\n * Extend this class when creating a plugin that makes use of {@link EthExecutionAPI},\r\n * or depends on other Web3 packages (such as `web3-eth-contract`) that depend on {@link EthExecutionAPI}.\r\n *\r\n * To add type support for RPC methods to the {@link Web3RequestManager} (in addition to {@link EthExecutionAPI}),\r\n * define a {@link Web3APISpec} and pass it as a generic to Web3PluginBase like so:\r\n *\r\n * @example\r\n * ```ts\r\n * type CustomRpcApi = {\r\n *\tcustom_rpc_method: () => string;\r\n *\tcustom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;\r\n * };\r\n *\r\n * class CustomPlugin extends Web3PluginBase<CustomRpcApi> {...}\r\n * ```\r\n */\nexport class Web3EthPluginBase extends Web3PluginBase {}","map":{"version":3,"names":["isNullish","ExistingPluginNamespaceError","isSupportedProvider","Web3Config","Web3ConfigEvent","Web3RequestManager","Web3SubscriptionManager","Web3BatchRequest","Web3Context","constructor","providerOrContext","providers","trim","_requestManager","_subscriptionManager","config","provider","requestManager","subscriptionManager","registeredSubscriptions","accountProvider","wallet","setConfig","_a","enableExperimentalFeatures","useSubscriptionWhenCheckingBlockTimeout","_accountProvider","_wallet","fromContextObject","_len","arguments","length","args","Array","_key","reverse","getContextObject","use","ContextRef","_len2","_key2","newContextChild","on","CONFIG_CHANGE","event","name","newValue","link","parentContext","registerPlugin","plugin","pluginNamespace","undefined","_pluginObject","Object","assign","currentProvider","setProvider","givenProvider","BatchRequest","bind","Web3PluginBase","Web3EthPluginBase"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-core\\src\\web3_context.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n\tWeb3APISpec,\r\n\tWeb3BaseWallet,\r\n\tWeb3BaseWalletAccount,\r\n\tWeb3AccountProvider,\r\n\tSupportedProviders,\r\n\tHexString,\r\n\tEthExecutionAPI,\r\n\tWeb3BaseProvider,\r\n\tTransaction,\r\n} from 'web3-types';\r\nimport { isNullish } from 'web3-utils';\r\nimport { ExistingPluginNamespaceError } from 'web3-errors';\r\n\r\nimport { isSupportedProvider } from './utils.js';\r\n// eslint-disable-next-line import/no-cycle\r\nimport { Web3Config, Web3ConfigEvent, Web3ConfigOptions } from './web3_config.js';\r\nimport { Web3RequestManager } from './web3_request_manager.js';\r\nimport { Web3SubscriptionConstructor } from './web3_subscriptions.js';\r\nimport { Web3SubscriptionManager } from './web3_subscription_manager.js';\r\nimport { Web3BatchRequest } from './web3_batch_request.js';\r\n\r\n// To avoid circular dependencies, we need to export type from here.\r\nexport type Web3ContextObject<\r\n\tAPI extends Web3APISpec = unknown,\r\n\tRegisteredSubs extends {\r\n\t\t[key: string]: Web3SubscriptionConstructor<API>;\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n\t} = any,\r\n> = {\r\n\tconfig: Web3ConfigOptions;\r\n\tprovider?: SupportedProviders<API> | string;\r\n\trequestManager: Web3RequestManager<API>;\r\n\tsubscriptionManager?: Web3SubscriptionManager<API, RegisteredSubs> | undefined;\r\n\tregisteredSubscriptions?: RegisteredSubs;\r\n\tproviders: typeof Web3RequestManager.providers;\r\n\taccountProvider?: Web3AccountProvider<Web3BaseWalletAccount>;\r\n\twallet?: Web3BaseWallet<Web3BaseWalletAccount>;\r\n};\r\n\r\nexport type Web3ContextInitOptions<\r\n\tAPI extends Web3APISpec = unknown,\r\n\tRegisteredSubs extends {\r\n\t\t[key: string]: Web3SubscriptionConstructor<API>;\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n\t} = any,\r\n> = {\r\n\tconfig?: Partial<Web3ConfigOptions>;\r\n\tprovider?: SupportedProviders<API> | string;\r\n\trequestManager?: Web3RequestManager<API>;\r\n\tsubscriptionManager?: Web3SubscriptionManager<API, RegisteredSubs> | undefined;\r\n\tregisteredSubscriptions?: RegisteredSubs;\r\n\taccountProvider?: Web3AccountProvider<Web3BaseWalletAccount>;\r\n\twallet?: Web3BaseWallet<Web3BaseWalletAccount>;\r\n};\r\n\r\n// eslint-disable-next-line no-use-before-define\r\nexport type Web3ContextConstructor<T extends Web3Context, T2 extends unknown[]> = new (\r\n\t...args: [...extras: T2, context: Web3ContextObject]\r\n) => T;\r\n\r\n// To avoid circular dependencies, we need to export type from here.\r\nexport type Web3ContextFactory<\r\n\t// eslint-disable-next-line no-use-before-define\r\n\tT extends Web3Context,\r\n\tT2 extends unknown[],\r\n> = Web3ContextConstructor<T, T2> & {\r\n\tfromContextObject(this: Web3ContextConstructor<T, T2>, contextObject: Web3ContextObject): T;\r\n};\r\n\r\nexport class Web3Context<\r\n\tAPI extends Web3APISpec = unknown,\r\n\tRegisteredSubs extends {\r\n\t\t[key: string]: Web3SubscriptionConstructor<API>;\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n\t} = any,\r\n> extends Web3Config {\r\n\tpublic static readonly providers = Web3RequestManager.providers;\r\n\tpublic static givenProvider?: SupportedProviders<never>;\r\n\tpublic readonly providers = Web3RequestManager.providers;\r\n\tprotected _requestManager: Web3RequestManager<API>;\r\n\tprotected _subscriptionManager: Web3SubscriptionManager<API, RegisteredSubs>;\r\n\tprotected _accountProvider?: Web3AccountProvider<Web3BaseWalletAccount>;\r\n\tprotected _wallet?: Web3BaseWallet<Web3BaseWalletAccount>;\r\n\r\n\tpublic constructor(\r\n\t\tproviderOrContext?:\r\n\t\t\t| string\r\n\t\t\t| SupportedProviders<API>\r\n\t\t\t| Web3ContextInitOptions<API, RegisteredSubs>,\r\n\t) {\r\n\t\tsuper();\r\n\r\n\t\t// If \"providerOrContext\" is provided as \"string\" or an objects matching \"SupportedProviders\" interface\r\n\t\tif (\r\n\t\t\tisNullish(providerOrContext) ||\r\n\t\t\t(typeof providerOrContext === 'string' && providerOrContext.trim() !== '') ||\r\n\t\t\tisSupportedProvider(providerOrContext as SupportedProviders<API>)\r\n\t\t) {\r\n\t\t\tthis._requestManager = new Web3RequestManager<API>(\r\n\t\t\t\tproviderOrContext as undefined | string | SupportedProviders<API>,\r\n\t\t\t);\r\n\t\t\tthis._subscriptionManager = new Web3SubscriptionManager(\r\n\t\t\t\tthis._requestManager,\r\n\t\t\t\t{} as RegisteredSubs,\r\n\t\t\t);\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst {\r\n\t\t\tconfig,\r\n\t\t\tprovider,\r\n\t\t\trequestManager,\r\n\t\t\tsubscriptionManager,\r\n\t\t\tregisteredSubscriptions,\r\n\t\t\taccountProvider,\r\n\t\t\twallet,\r\n\t\t} = providerOrContext as Web3ContextInitOptions<API, RegisteredSubs>;\r\n\r\n\t\tthis.setConfig(config ?? {});\r\n\r\n\t\tthis._requestManager =\r\n\t\t\trequestManager ??\r\n\t\t\tnew Web3RequestManager<API>(\r\n\t\t\t\tprovider,\r\n\t\t\t\tconfig?.enableExperimentalFeatures?.useSubscriptionWhenCheckingBlockTimeout,\r\n\t\t\t);\r\n\r\n\t\tif (subscriptionManager) {\r\n\t\t\tthis._subscriptionManager = subscriptionManager;\r\n\t\t} else {\r\n\t\t\tthis._subscriptionManager = new Web3SubscriptionManager(\r\n\t\t\t\tthis.requestManager,\r\n\t\t\t\tregisteredSubscriptions ?? ({} as RegisteredSubs),\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (accountProvider) {\r\n\t\t\tthis._accountProvider = accountProvider;\r\n\t\t}\r\n\r\n\t\tif (wallet) {\r\n\t\t\tthis._wallet = wallet;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get requestManager() {\r\n\t\treturn this._requestManager;\r\n\t}\r\n\r\n\t/**\r\n\t * Will return the current subscriptionManager ({@link Web3SubscriptionManager})\r\n\t */\r\n\tpublic get subscriptionManager() {\r\n\t\treturn this._subscriptionManager;\r\n\t}\r\n\r\n\tpublic get wallet() {\r\n\t\treturn this._wallet;\r\n\t}\r\n\r\n\tpublic get accountProvider() {\r\n\t\treturn this._accountProvider;\r\n\t}\r\n\r\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n\tpublic static fromContextObject<T extends Web3Context, T3 extends unknown[]>(\r\n\t\tthis: Web3ContextConstructor<T, T3>,\r\n\t\t...args: [Web3ContextObject, ...T3]\r\n\t) {\r\n\t\treturn new this(...(args.reverse() as [...T3, Web3ContextObject]));\r\n\t}\r\n\r\n\tpublic getContextObject(): Web3ContextObject<API, RegisteredSubs> {\r\n\t\treturn {\r\n\t\t\tconfig: this.config,\r\n\t\t\tprovider: this.provider,\r\n\t\t\trequestManager: this.requestManager,\r\n\t\t\tsubscriptionManager: this.subscriptionManager,\r\n\t\t\tregisteredSubscriptions: this.subscriptionManager?.registeredSubscriptions,\r\n\t\t\tproviders: this.providers,\r\n\t\t\twallet: this.wallet,\r\n\t\t\taccountProvider: this.accountProvider,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Use to create new object of any type extended by `Web3Context`\r\n\t * and link it to current context. This can be used to initiate a global context object\r\n\t * and then use it to create new objects of any type extended by `Web3Context`.\r\n\t */\r\n\tpublic use<T extends Web3Context, T2 extends unknown[]>(\r\n\t\tContextRef: Web3ContextConstructor<T, T2>,\r\n\t\t...args: [...T2]\r\n\t) {\r\n\t\tconst newContextChild: T = new ContextRef(\r\n\t\t\t...([...args, this.getContextObject()] as unknown as [...T2, Web3ContextObject]),\r\n\t\t);\r\n\r\n\t\tthis.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n\t\t\tnewContextChild.setConfig({ [event.name]: event.newValue });\r\n\t\t});\r\n\r\n\t\treturn newContextChild;\r\n\t}\r\n\r\n\t/**\r\n\t * Link current context to another context.\r\n\t */\r\n\tpublic link<T extends Web3Context>(parentContext: T) {\r\n\t\tthis.setConfig(parentContext.config);\r\n\t\tthis._requestManager = parentContext.requestManager;\r\n\t\tthis.provider = parentContext.provider;\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n\t\tthis._subscriptionManager = parentContext.subscriptionManager;\r\n\t\tthis._wallet = parentContext.wallet;\r\n\t\tthis._accountProvider = parentContext._accountProvider;\r\n\r\n\t\tparentContext.on(Web3ConfigEvent.CONFIG_CHANGE, event => {\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n\t\t\tthis.setConfig({ [event.name]: event.newValue });\r\n\t\t});\r\n\t}\r\n\r\n\t// eslint-disable-next-line no-use-before-define\r\n\tpublic registerPlugin(plugin: Web3PluginBase) {\r\n\t\t// @ts-expect-error No index signature with a parameter of type 'string' was found on type 'Web3Context<API, RegisteredSubs>'\r\n\t\tif (this[plugin.pluginNamespace] !== undefined)\r\n\t\t\tthrow new ExistingPluginNamespaceError(plugin.pluginNamespace);\r\n\r\n\t\tconst _pluginObject = {\r\n\t\t\t[plugin.pluginNamespace]: plugin,\r\n\t\t};\r\n\t\t_pluginObject[plugin.pluginNamespace].link(this);\r\n\t\tObject.assign(this, _pluginObject);\r\n\t}\r\n\r\n\t/**\r\n\t * Will return the current provider.\r\n\t *\r\n\t * @returns Returns the current provider\r\n\t * @example\r\n\t * ```ts\r\n\t * const web3 = new Web3Context(\"http://localhost:8545\");\r\n\t * console.log(web3.provider);\r\n\t * > HttpProvider {\r\n\t * \tclientUrl: 'http://localhost:8545',\r\n\t * \thttpProviderOptions: undefined\r\n\t *  }\r\n\t * ```\r\n\t */\r\n\r\n\tpublic get provider(): Web3BaseProvider<API> | undefined {\r\n\t\treturn this.currentProvider;\r\n\t}\r\n\r\n\t/**\r\n\t * Will set the current provider.\r\n\t *\r\n\t * @param provider - The provider to set\r\n\t *\r\n\t * Accepted providers are of type {@link SupportedProviders}\r\n\t * @example\r\n\t * ```ts\r\n\t *  const web3Context = new web3ContextContext(\"http://localhost:8545\");\r\n\t * web3Context.provider = \"ws://localhost:8545\";\r\n\t * console.log(web3Context.provider);\r\n\t * > WebSocketProvider {\r\n\t * _eventEmitter: EventEmitter {\r\n\t * _events: [Object: null prototype] {},\r\n\t * _eventsCount: 0,\r\n\t * ...\r\n\t * }\r\n\t * ```\r\n\t */\r\n\r\n\tpublic set provider(provider: SupportedProviders<API> | string | undefined) {\r\n\t\tthis.requestManager.setProvider(provider);\r\n\t}\r\n\r\n\t/**\r\n\t * Will return the current provider. (The same as `provider`)\r\n\t *\r\n\t * @returns Returns the current provider\r\n\t * @example\r\n\t * ```ts\r\n\t * const web3Context = new Web3Context(\"http://localhost:8545\");\r\n\t * console.log(web3Context.provider);\r\n\t * > HttpProvider {\r\n\t * \tclientUrl: 'http://localhost:8545',\r\n\t * \thttpProviderOptions: undefined\r\n\t *  }\r\n\t * ```\r\n\t */\r\n\tpublic get currentProvider(): Web3BaseProvider<API> | undefined {\r\n\t\treturn this.requestManager.provider as Web3BaseProvider<API>;\r\n\t}\r\n\r\n\t/**\r\n\t * Will set the current provider. (The same as `provider`)\r\n\t *\r\n\t * @param provider - {@link SupportedProviders} The provider to set\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t *  const web3Context = new Web3Context(\"http://localhost:8545\");\r\n\t * web3Context.currentProvider = \"ws://localhost:8545\";\r\n\t * console.log(web3Context.provider);\r\n\t * > WebSocketProvider {\r\n\t * _eventEmitter: EventEmitter {\r\n\t * _events: [Object: null prototype] {},\r\n\t * _eventsCount: 0,\r\n\t * ...\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tpublic set currentProvider(provider: SupportedProviders<API> | string | undefined) {\r\n\t\tthis.requestManager.setProvider(provider);\r\n\t}\r\n\r\n\t/**\r\n\t * Will return the givenProvider if available.\r\n\t *\r\n\t * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser. Will return the given provider by the (browser) environment, otherwise `undefined`.\r\n\t */\r\n\t// eslint-disable-next-line class-methods-use-this\r\n\tpublic get givenProvider() {\r\n\t\treturn Web3Context.givenProvider;\r\n\t}\r\n\t/**\r\n\t * Will set the provider.\r\n\t *\r\n\t * @param provider - {@link SupportedProviders} The provider to set\r\n\t * @returns Returns true if the provider was set\r\n\t */\r\n\tpublic setProvider(provider?: SupportedProviders<API> | string): boolean {\r\n\t\tthis.provider = provider;\r\n\t\treturn true;\r\n\t}\r\n\t/**\r\n\t * Will return the {@link Web3BatchRequest} constructor.\r\n\t */\r\n\tpublic get BatchRequest(): new () => Web3BatchRequest {\r\n\t\treturn Web3BatchRequest.bind(\r\n\t\t\tundefined,\r\n\t\t\tthis._requestManager as unknown as Web3RequestManager,\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// To avoid cycle dependency declare this type in this file\r\nexport type TransactionBuilder<API extends Web3APISpec = unknown> = <\r\n\tReturnType = Transaction,\r\n>(options: {\r\n\ttransaction: Transaction;\r\n\tweb3Context: Web3Context<API>;\r\n\tprivateKey?: HexString | Uint8Array;\r\n\tfillGasPrice?: boolean;\r\n}) => Promise<ReturnType>;\r\n\r\n/**\r\n * Extend this class when creating a plugin that either doesn't require {@link EthExecutionAPI},\r\n * or interacts with a RPC node that doesn't fully implement {@link EthExecutionAPI}.\r\n *\r\n * To add type support for RPC methods to the {@link Web3RequestManager},\r\n * define a {@link Web3APISpec} and pass it as a generic to Web3PluginBase like so:\r\n *\r\n * @example\r\n * ```ts\r\n * type CustomRpcApi = {\r\n *\tcustom_rpc_method: () => string;\r\n *\tcustom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;\r\n * };\r\n *\r\n * class CustomPlugin extends Web3PluginBase<CustomRpcApi> {...}\r\n * ```\r\n */\r\nexport abstract class Web3PluginBase<\r\n\tAPI extends Web3APISpec = Web3APISpec,\r\n> extends Web3Context<API> {\r\n\tpublic abstract pluginNamespace: string;\r\n}\r\n\r\n/**\r\n * Extend this class when creating a plugin that makes use of {@link EthExecutionAPI},\r\n * or depends on other Web3 packages (such as `web3-eth-contract`) that depend on {@link EthExecutionAPI}.\r\n *\r\n * To add type support for RPC methods to the {@link Web3RequestManager} (in addition to {@link EthExecutionAPI}),\r\n * define a {@link Web3APISpec} and pass it as a generic to Web3PluginBase like so:\r\n *\r\n * @example\r\n * ```ts\r\n * type CustomRpcApi = {\r\n *\tcustom_rpc_method: () => string;\r\n *\tcustom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;\r\n * };\r\n *\r\n * class CustomPlugin extends Web3PluginBase<CustomRpcApi> {...}\r\n * ```\r\n */\r\nexport abstract class Web3EthPluginBase<API extends Web3APISpec = unknown> extends Web3PluginBase<\r\n\tAPI & EthExecutionAPI\r\n> {}\r\n"],"mappings":"AA4BA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,4BAA4B,QAAQ,aAAa;AAE1D,SAASC,mBAAmB,QAAQ,YAAY;AAChD;AACA,SAASC,UAAU,EAAEC,eAAe,QAA2B,kBAAkB;AACjF,SAASC,kBAAkB,QAAQ,2BAA2B;AAE9D,SAASC,uBAAuB,QAAQ,gCAAgC;AACxE,SAASC,gBAAgB,QAAQ,yBAAyB;AAkD1D,OAAM,MAAOC,WAMX,SAAQL,UAAU;EASnBM,YACCC,iBAG8C;;IAE9C,KAAK,EAAE;IAZQ,KAAAC,SAAS,GAAGN,kBAAkB,CAACM,SAAS;IAcvD;IACA,IACCX,SAAS,CAACU,iBAAiB,CAAC,IAC3B,OAAOA,iBAAiB,KAAK,QAAQ,IAAIA,iBAAiB,CAACE,IAAI,EAAE,KAAK,EAAG,IAC1EV,mBAAmB,CAACQ,iBAA4C,CAAC,EAChE;MACD,IAAI,CAACG,eAAe,GAAG,IAAIR,kBAAkB,CAC5CK,iBAAiE,CACjE;MACD,IAAI,CAACI,oBAAoB,GAAG,IAAIR,uBAAuB,CACtD,IAAI,CAACO,eAAe,EACpB,EAAoB,CACpB;MAED;;IAGD,MAAM;MACLE,MAAM;MACNC,QAAQ;MACRC,cAAc;MACdC,mBAAmB;MACnBC,uBAAuB;MACvBC,eAAe;MACfC;IAAM,CACN,GAAGX,iBAAgE;IAEpE,IAAI,CAACY,SAAS,CAACP,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,EAAE,CAAC;IAE5B,IAAI,CAACF,eAAe,GACnBI,cAAc,aAAdA,cAAc,cAAdA,cAAc,GACd,IAAIZ,kBAAkB,CACrBW,QAAQ,EACR,CAAAO,EAAA,GAAAR,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAES,0BAA0B,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,uCAAuC,CAC3E;IAEF,IAAIP,mBAAmB,EAAE;MACxB,IAAI,CAACJ,oBAAoB,GAAGI,mBAAmB;KAC/C,MAAM;MACN,IAAI,CAACJ,oBAAoB,GAAG,IAAIR,uBAAuB,CACtD,IAAI,CAACW,cAAc,EACnBE,uBAAuB,aAAvBA,uBAAuB,cAAvBA,uBAAuB,GAAK,EAAqB,CACjD;;IAGF,IAAIC,eAAe,EAAE;MACpB,IAAI,CAACM,gBAAgB,GAAGN,eAAe;;IAGxC,IAAIC,MAAM,EAAE;MACX,IAAI,CAACM,OAAO,GAAGN,MAAM;;EAEvB;EAEA,IAAWJ,cAAcA,CAAA;IACxB,OAAO,IAAI,CAACJ,eAAe;EAC5B;EAEA;;;EAGA,IAAWK,mBAAmBA,CAAA;IAC7B,OAAO,IAAI,CAACJ,oBAAoB;EACjC;EAEA,IAAWO,MAAMA,CAAA;IAChB,OAAO,IAAI,CAACM,OAAO;EACpB;EAEA,IAAWP,eAAeA,CAAA;IACzB,OAAO,IAAI,CAACM,gBAAgB;EAC7B;EAEA;EACO,OAAOE,iBAAiBA,CAAA,EAEK;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAhCC,IAAgC,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAhCF,IAAgC,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAEnC,OAAO,IAAI,IAAI,CAAC,GAAIF,IAAI,CAACG,OAAO,EAAiC,CAAC;EACnE;EAEOC,gBAAgBA,CAAA;;IACtB,OAAO;MACNrB,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCC,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;MAC7CC,uBAAuB,EAAE,CAAAI,EAAA,OAAI,CAACL,mBAAmB,cAAAK,EAAA,uBAAAA,EAAA,CAAEJ,uBAAuB;MAC1ER,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBU,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBD,eAAe,EAAE,IAAI,CAACA;KACtB;EACF;EAEA;;;;;EAKOiB,GAAGA,CACTC,UAAyC,EACzB;IAAA,SAAAC,KAAA,GAAAT,SAAA,CAAAC,MAAA,EAAbC,IAAa,OAAAC,KAAA,CAAAM,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAbR,IAAa,CAAAQ,KAAA,QAAAV,SAAA,CAAAU,KAAA;IAAA;IAEhB,MAAMC,eAAe,GAAM,IAAIH,UAAU,CACxC,GAAI,CAAC,GAAGN,IAAI,EAAE,IAAI,CAACI,gBAAgB,EAAE,CAA2C,CAChF;IAED,IAAI,CAACM,EAAE,CAACtC,eAAe,CAACuC,aAAa,EAAEC,KAAK,IAAG;MAC9C;MACAH,eAAe,CAACnB,SAAS,CAAC;QAAE,CAACsB,KAAK,CAACC,IAAI,GAAGD,KAAK,CAACE;MAAQ,CAAE,CAAC;IAC5D,CAAC,CAAC;IAEF,OAAOL,eAAe;EACvB;EAEA;;;EAGOM,IAAIA,CAAwBC,aAAgB;IAClD,IAAI,CAAC1B,SAAS,CAAC0B,aAAa,CAACjC,MAAM,CAAC;IACpC,IAAI,CAACF,eAAe,GAAGmC,aAAa,CAAC/B,cAAc;IACnD,IAAI,CAACD,QAAQ,GAAGgC,aAAa,CAAChC,QAAQ;IACtC;IACA,IAAI,CAACF,oBAAoB,GAAGkC,aAAa,CAAC9B,mBAAmB;IAC7D,IAAI,CAACS,OAAO,GAAGqB,aAAa,CAAC3B,MAAM;IACnC,IAAI,CAACK,gBAAgB,GAAGsB,aAAa,CAACtB,gBAAgB;IAEtDsB,aAAa,CAACN,EAAE,CAACtC,eAAe,CAACuC,aAAa,EAAEC,KAAK,IAAG;MACvD;MACA,IAAI,CAACtB,SAAS,CAAC;QAAE,CAACsB,KAAK,CAACC,IAAI,GAAGD,KAAK,CAACE;MAAQ,CAAE,CAAC;IACjD,CAAC,CAAC;EACH;EAEA;EACOG,cAAcA,CAACC,MAAsB;IAC3C;IACA,IAAI,IAAI,CAACA,MAAM,CAACC,eAAe,CAAC,KAAKC,SAAS,EAC7C,MAAM,IAAInD,4BAA4B,CAACiD,MAAM,CAACC,eAAe,CAAC;IAE/D,MAAME,aAAa,GAAG;MACrB,CAACH,MAAM,CAACC,eAAe,GAAGD;KAC1B;IACDG,aAAa,CAACH,MAAM,CAACC,eAAe,CAAC,CAACJ,IAAI,CAAC,IAAI,CAAC;IAChDO,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEF,aAAa,CAAC;EACnC;EAEA;;;;;;;;;;;;;;EAeA,IAAWrC,QAAQA,CAAA;IAClB,OAAO,IAAI,CAACwC,eAAe;EAC5B;EAEA;;;;;;;;;;;;;;;;;;;EAoBA,IAAWxC,QAAQA,CAACA,QAAsD;IACzE,IAAI,CAACC,cAAc,CAACwC,WAAW,CAACzC,QAAQ,CAAC;EAC1C;EAEA;;;;;;;;;;;;;;EAcA,IAAWwC,eAAeA,CAAA;IACzB,OAAO,IAAI,CAACvC,cAAc,CAACD,QAAiC;EAC7D;EAEA;;;;;;;;;;;;;;;;;;EAkBA,IAAWwC,eAAeA,CAACxC,QAAsD;IAChF,IAAI,CAACC,cAAc,CAACwC,WAAW,CAACzC,QAAQ,CAAC;EAC1C;EAEA;;;;;EAKA;EACA,IAAW0C,aAAaA,CAAA;IACvB,OAAOlD,WAAW,CAACkD,aAAa;EACjC;EACA;;;;;;EAMOD,WAAWA,CAACzC,QAA2C;IAC7D,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,OAAO,IAAI;EACZ;EACA;;;EAGA,IAAW2C,YAAYA,CAAA;IACtB,OAAOpD,gBAAgB,CAACqD,IAAI,CAC3BR,SAAS,EACT,IAAI,CAACvC,eAAgD,CACrD;EACF;;AAhRuBL,WAAA,CAAAG,SAAS,GAAGN,kBAAkB,CAACM,SAAS;AA6RhE;;;;;;;;;;;;;;;;;AAiBA,OAAM,MAAgBkD,cAEpB,SAAQrD,WAAgB;AAI1B;;;;;;;;;;;;;;;;;AAiBA,OAAM,MAAgBsD,iBAAqD,SAAQD,cAElF"},"metadata":{},"sourceType":"module","externalDependencies":[]}