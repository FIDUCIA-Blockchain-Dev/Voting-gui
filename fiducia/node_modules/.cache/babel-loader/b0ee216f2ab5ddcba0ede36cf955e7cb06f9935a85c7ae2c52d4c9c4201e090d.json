{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex, uint8ArrayEquals } from 'web3-utils';\nimport { secp256k1 } from './constants.js';\nimport { assertIsUint8Array, zeros } from '../common/utils.js';\nexport class Address {\n  constructor(buf) {\n    if (buf.length !== 20) {\n      throw new Error('Invalid address length');\n    }\n    this.buf = buf;\n  }\n  /**\r\n   * Returns the zero address.\r\n   */\n  static zero() {\n    return new Address(zeros(20));\n  }\n  /**\r\n   * Is address equal to another.\r\n   */\n  equals(address) {\n    return uint8ArrayEquals(this.buf, address.buf);\n  }\n  /**\r\n   * Is address zero.\r\n   */\n  isZero() {\n    return this.equals(Address.zero());\n  }\n  /**\r\n   * Returns hex encoding of address.\r\n   */\n  toString() {\n    return bytesToHex(this.buf);\n  }\n  /**\r\n   * Returns Uint8Array representation of address.\r\n   */\n  toArray() {\n    return this.buf;\n  }\n  /**\r\n   * Returns the ethereum address of a given public key.\r\n   * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\r\n   * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\r\n   * @param sanitize Accept public keys in other formats\r\n   */\n  static publicToAddress(_pubKey) {\n    let sanitize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let pubKey = _pubKey;\n    assertIsUint8Array(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n      pubKey = secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n    }\n    if (pubKey.length !== 64) {\n      throw new Error('Expected pubKey to be of length 64');\n    }\n    // Only take the lower 160bits of the hash\n    return keccak256(pubKey).slice(-20);\n  }\n}","map":{"version":3,"names":["keccak256","bytesToHex","uint8ArrayEquals","secp256k1","assertIsUint8Array","zeros","Address","constructor","buf","length","Error","zero","equals","address","isZero","toString","toArray","publicToAddress","_pubKey","sanitize","arguments","undefined","pubKey","ProjectivePoint","fromHex","toRawBytes","slice"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-accounts\\src\\tx\\address.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\r\nimport { bytesToHex, uint8ArrayEquals } from 'web3-utils';\r\nimport { secp256k1 } from './constants.js';\r\nimport { assertIsUint8Array, zeros } from '../common/utils.js';\r\n\r\nexport class Address {\r\n\tpublic readonly buf: Uint8Array;\r\n\r\n\tpublic constructor(buf: Uint8Array) {\r\n\t\tif (buf.length !== 20) {\r\n\t\t\tthrow new Error('Invalid address length');\r\n\t\t}\r\n\t\tthis.buf = buf;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the zero address.\r\n\t */\r\n\tpublic static zero(): Address {\r\n\t\treturn new Address(zeros(20));\r\n\t}\r\n\r\n\t/**\r\n\t * Is address equal to another.\r\n\t */\r\n\tpublic equals(address: Address): boolean {\r\n\t\treturn uint8ArrayEquals(this.buf, address.buf);\r\n\t}\r\n\r\n\t/**\r\n\t * Is address zero.\r\n\t */\r\n\tpublic isZero(): boolean {\r\n\t\treturn this.equals(Address.zero());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns hex encoding of address.\r\n\t */\r\n\tpublic toString(): string {\r\n\t\treturn bytesToHex(this.buf);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns Uint8Array representation of address.\r\n\t */\r\n\tpublic toArray(): Uint8Array {\r\n\t\treturn this.buf;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the ethereum address of a given public key.\r\n\t * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\r\n\t * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\r\n\t * @param sanitize Accept public keys in other formats\r\n\t */\r\n\tpublic static publicToAddress(_pubKey: Uint8Array, sanitize = false): Uint8Array {\r\n\t\tlet pubKey = _pubKey;\r\n\t\tassertIsUint8Array(pubKey);\r\n\t\tif (sanitize && pubKey.length !== 64) {\r\n\t\t\tpubKey = secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\r\n\t\t}\r\n\t\tif (pubKey.length !== 64) {\r\n\t\t\tthrow new Error('Expected pubKey to be of length 64');\r\n\t\t}\r\n\t\t// Only take the lower 160bits of the hash\r\n\t\treturn keccak256(pubKey).slice(-20);\r\n\t}\r\n}\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,SAAS,QAAQ,iCAAiC;AAC3D,SAASC,UAAU,EAAEC,gBAAgB,QAAQ,YAAY;AACzD,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,kBAAkB,EAAEC,KAAK,QAAQ,oBAAoB;AAE9D,OAAM,MAAOC,OAAO;EAGnBC,YAAmBC,GAAe;IACjC,IAAIA,GAAG,CAACC,MAAM,KAAK,EAAE,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;;IAE1C,IAAI,CAACF,GAAG,GAAGA,GAAG;EACf;EAEA;;;EAGO,OAAOG,IAAIA,CAAA;IACjB,OAAO,IAAIL,OAAO,CAACD,KAAK,CAAC,EAAE,CAAC,CAAC;EAC9B;EAEA;;;EAGOO,MAAMA,CAACC,OAAgB;IAC7B,OAAOX,gBAAgB,CAAC,IAAI,CAACM,GAAG,EAAEK,OAAO,CAACL,GAAG,CAAC;EAC/C;EAEA;;;EAGOM,MAAMA,CAAA;IACZ,OAAO,IAAI,CAACF,MAAM,CAACN,OAAO,CAACK,IAAI,EAAE,CAAC;EACnC;EAEA;;;EAGOI,QAAQA,CAAA;IACd,OAAOd,UAAU,CAAC,IAAI,CAACO,GAAG,CAAC;EAC5B;EAEA;;;EAGOQ,OAAOA,CAAA;IACb,OAAO,IAAI,CAACR,GAAG;EAChB;EAEA;;;;;;EAMO,OAAOS,eAAeA,CAACC,OAAmB,EAAkB;IAAA,IAAhBC,QAAQ,GAAAC,SAAA,CAAAX,MAAA,QAAAW,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;IAClE,IAAIE,MAAM,GAAGJ,OAAO;IACpBd,kBAAkB,CAACkB,MAAM,CAAC;IAC1B,IAAIH,QAAQ,IAAIG,MAAM,CAACb,MAAM,KAAK,EAAE,EAAE;MACrCa,MAAM,GAAGnB,SAAS,CAACoB,eAAe,CAACC,OAAO,CAACF,MAAM,CAAC,CAACG,UAAU,CAAC,KAAK,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;;IAE9E,IAAIJ,MAAM,CAACb,MAAM,KAAK,EAAE,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;;IAEtD;IACA,OAAOV,SAAS,CAACsB,MAAM,CAAC,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC;EACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}