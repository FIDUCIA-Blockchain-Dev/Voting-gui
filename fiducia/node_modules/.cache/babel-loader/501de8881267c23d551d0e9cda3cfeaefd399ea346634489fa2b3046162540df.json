{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { AbiError } from 'web3-errors';\nimport { ParamType } from '@ethersproject/abi';\nimport ethersAbiCoder from '../ethers_abi_coder.js';\nimport { formatParam, isAbiFragment, mapTypes, modifyParams } from '../utils.js';\n/**\r\n * Encodes a parameter based on its type to its ABI representation.\r\n * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.\r\n * @param params - The actual parameters to encode.\r\n * @returns - The ABI encoded parameters\r\n * @example\r\n * ```ts\r\n * const res = web3.eth.abi.encodeParameters(\r\n *    [\"uint256\", \"string\"],\r\n *    [\"2345675643\", \"Hello!%\"]\r\n *  );\r\n *\r\n *  console.log(res);\r\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\r\n * ```\r\n */\nexport const encodeParameters = (abi, params) => {\n  try {\n    const modifiedTypes = mapTypes(Array.isArray(abi) ? abi : [abi]);\n    const modifiedParams = [];\n    for (const [index, param] of params.entries()) {\n      const item = modifiedTypes[index];\n      let type;\n      if (isAbiFragment(item) && item.type) {\n        // We may get a named type of shape {name, type}\n        type = item.type;\n      } else {\n        type = item;\n      }\n      const newParam = formatParam(type, param);\n      if (typeof type === 'string' && type.includes('tuple')) {\n        const coder = ethersAbiCoder._getCoder(ParamType.from(type));\n        modifyParams(coder, [newParam]);\n      }\n      modifiedParams.push(newParam);\n    }\n    return ethersAbiCoder.encode(modifiedTypes.map(p => ParamType.from(p)), modifiedParams);\n  } catch (err) {\n    throw new AbiError(`Parameter encoding error`, err);\n  }\n};\n/**\r\n * Encodes a parameter based on its type to its ABI representation.\r\n * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\r\n * @param param - The actual parameter to encode.\r\n * @returns -  The ABI encoded parameter\r\n * @example\r\n * ```ts\r\n *  const res = web3.eth.abi.encodeParameter(\"uint256\", \"2345675643\");\r\n *  console.log(res);\r\n *  0x000000000000000000000000000000000000000000000000000000008bd02b7b\r\n *\r\n *  const res = web3.eth.abi.encodeParameter(\"uint\", \"2345675643\");\r\n *\r\n *  console.log(res);\r\n *  >0x000000000000000000000000000000000000000000000000000000008bd02b7b\r\n *\r\n *    const res = web3.eth.abi.encodeParameter(\"bytes32\", \"0xdf3234\");\r\n *\r\n *  console.log(res);\r\n *  >0xdf32340000000000000000000000000000000000000000000000000000000000\r\n *\r\n *   const res = web3.eth.abi.encodeParameter(\"bytes\", \"0xdf3234\");\r\n *\r\n *  console.log(res);\r\n *  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003df32340000000000000000000000000000000000000000000000000000000000\r\n *\r\n *   const res = web3.eth.abi.encodeParameter(\"bytes32[]\", [\"0xdf3234\", \"0xfdfd\"]);\r\n *\r\n *  console.log(res);\r\n *  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002df32340000000000000000000000000000000000000000000000000000000000fdfd000000000000000000000000000000000000000000000000000000000000\r\n *\r\n *  const res = web3.eth.abi.encodeParameter(\r\n *    {\r\n *      ParentStruct: {\r\n *        propertyOne: \"uint256\",\r\n *        propertyTwo: \"uint256\",\r\n *        childStruct: {\r\n *          propertyOne: \"uint256\",\r\n *          propertyTwo: \"uint256\",\r\n *        },\r\n *      },\r\n *    },\r\n *    {\r\n *      propertyOne: 42,\r\n *      propertyTwo: 56,\r\n *      childStruct: {\r\n *        propertyOne: 45,\r\n *        propertyTwo: 78,\r\n *      },\r\n *    }\r\n *  );\r\n *\r\n *  console.log(res);\r\n *  > 0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e\r\n * ```\r\n */\nexport const encodeParameter = (abi, param) => encodeParameters([abi], [param]);\n// If encoded param is an array and there are mixed on integer and string keys\nconst isParamRequiredToConvert = data => Array.isArray(data) && Object.keys(data).filter(k => Number.isInteger(+k)).length !== Object.keys(data).length;\n// Ethers-Encoder return the decoded result as an array with additional string indexes for named params\n// We want these to be converted to an object with named keys\nconst formatArrayResToObject = data => {\n  const returnValue = {\n    __length__: 0\n  };\n  for (const key of Object.keys(data)) {\n    returnValue[key] = Array.isArray(data[key]) && isParamRequiredToConvert(data[key]) ? formatArrayResToObject(data[key]) : data[key];\n    returnValue.__length__ += Number.isInteger(+key) ? 1 : 0;\n  }\n  return returnValue;\n};\n/**\r\n * Should be used to decode list of params\r\n */\nexport const decodeParametersWith = (abis, bytes, loose) => {\n  try {\n    if (abis.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n      throw new AbiError(\"Returned values aren't valid, did it run Out of Gas? \" + 'You might also see this error if you are not using the ' + 'correct ABI for the contract you are retrieving data from, ' + 'requesting data from a block number that does not exist, ' + 'or querying a node which is not fully synced.');\n    }\n    const res = ethersAbiCoder.decode(mapTypes(abis).map(p => ParamType.from(p)), `0x${bytes.replace(/0x/i, '')}`, loose);\n    return formatArrayResToObject(res);\n  } catch (err) {\n    throw new AbiError(`Parameter decoding error: ${err.message}`);\n  }\n};\n/**\r\n * Should be used to decode list of params\r\n */\n/**\r\n * Decodes ABI encoded parameters to its JavaScript types.\r\n * @param abi -  An array of {@link AbiInput}. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\r\n * @param bytes - The ABI byte code to decode\r\n * @returns - The result object containing the decoded parameters.\r\n * @example\r\n * ```ts\r\n * let res = web3.eth.abi.decodeParameters(\r\n *    [\"string\", \"uint256\"],\r\n *    \"0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\r\n *  );\r\n *  console.log(res);\r\n *  > { '0': 'Hello!%!', '1': 234n, __length__: 2 }\r\n *\r\n * let res = web3.eth.abi.decodeParameters(\r\n *    [\r\n *      {\r\n *        type: \"string\",\r\n *        name: \"myString\",\r\n *      },\r\n *      {\r\n *        type: \"uint256\",\r\n *        name: \"myNumber\",\r\n *      },\r\n *    ],\r\n *    \"0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\r\n *  );\r\n * console.log(res);\r\n *  > {\r\n *  '0': 'Hello!%!',\r\n *  '1': 234n,\r\n *  __length__: 2,\r\n *  myString: 'Hello!%!',\r\n *  myNumber: 234n\r\n * }\r\n *\r\n * const res = web3.eth.abi.decodeParameters(\r\n *    [\r\n *      \"uint8[]\",\r\n *      {\r\n *        ParentStruct: {\r\n *          propertyOne: \"uint256\",\r\n *          propertyTwo: \"uint256\",\r\n *          childStruct: {\r\n *            propertyOne: \"uint256\",\r\n *            propertyTwo: \"uint256\",\r\n *          },\r\n *        },\r\n *      },\r\n *    ],\r\n *    \"0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000018\"\r\n *  );\r\n *  console.log(res);\r\n *  >\r\n *  '0': [ 42n, 24n ],\r\n *  '1': {\r\n *    '0': 42n,\r\n *    '1': 56n,\r\n *    '2': {\r\n *      '0': 45n,\r\n *      '1': 78n,\r\n *      __length__: 2,\r\n *      propertyOne: 45n,\r\n *      propertyTwo: 78n\r\n *    },\r\n *    __length__: 3,\r\n *    propertyOne: 42n,\r\n *    propertyTwo: 56n,\r\n *    childStruct: {\r\n *      '0': 45n,\r\n *      '1': 78n,\r\n *      __length__: 2,\r\n *      propertyOne: 45n,\r\n *      propertyTwo: 78n\r\n *    }\r\n *  },\r\n *  __length__: 2,\r\n *  ParentStruct: {\r\n *    '0': 42n,\r\n *    '1': 56n,\r\n *    '2': {\r\n *      '0': 45n,\r\n *      '1': 78n,\r\n *      __length__: 2,\r\n *      propertyOne: 45n,\r\n *      propertyTwo: 78n\r\n *    },\r\n *    __length__: 3,\r\n *    propertyOne: 42n,\r\n *    propertyTwo: 56n,\r\n *    childStruct: {\r\n *      '0': 45n,\r\n *      '1': 78n,\r\n *      __length__: 2,\r\n *      propertyOne: 45n,\r\n *      propertyTwo: 78n\r\n *    }\r\n *  }\r\n *}\r\n * ```\r\n */\nexport const decodeParameters = (abi, bytes) => decodeParametersWith(abi, bytes, false);\n/**\r\n * Should be used to decode bytes to plain param\r\n */\n/**\r\n * Decodes an ABI encoded parameter to its JavaScript type.\r\n * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\r\n * @param bytes - The ABI byte code to decode\r\n * @returns - The decoded parameter\r\n * @example\r\n * ```ts\r\n *   const res = web3.eth.abi.decodeParameter(\r\n *    \"uint256\",\r\n *    \"0x0000000000000000000000000000000000000000000000000000000000000010\"\r\n *  );\r\n *  console.log(res);\r\n * > 16n\r\n *\r\n *  const res = web3.eth.abi.decodeParameter(\r\n *    \"string\",\r\n *    \"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\r\n *  );\r\n *\r\n *  console.log(res);\r\n *  > Hello!%!\r\n *\r\n *  const res = web3.eth.abi.decodeParameter(\r\n *    {\r\n *      ParentStruct: {\r\n *        propertyOne: \"uint256\",\r\n *        propertyTwo: \"uint256\",\r\n *        childStruct: {\r\n *          propertyOne: \"uint256\",\r\n *          propertyTwo: \"uint256\",\r\n *        },\r\n *      },\r\n *    },\r\n *    \"0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e\"\r\n *  );\r\n *\r\n *  console.log(res);\r\n *   {\r\n *  '0': 42n,\r\n *  '1': 56n,\r\n *  '2': {\r\n *    '0': 45n,\r\n *    '1': 78n,\r\n *    __length__: 2,\r\n *    propertyOne: 45n,\r\n *    propertyTwo: 78n\r\n *  },\r\n *  __length__: 3,\r\n *  propertyOne: 42n,\r\n *  propertyTwo: 56n,\r\n *  childStruct: {\r\n *    '0': 45n,\r\n *    '1': 78n,\r\n *    __length__: 2,\r\n *    propertyOne: 45n,\r\n *    propertyTwo: 78n\r\n *  }\r\n *}\r\n * ```\r\n */\nexport const decodeParameter = (abi, bytes) => decodeParameters([abi], bytes)['0'];","map":{"version":3,"names":["AbiError","ParamType","ethersAbiCoder","formatParam","isAbiFragment","mapTypes","modifyParams","encodeParameters","abi","params","modifiedTypes","Array","isArray","modifiedParams","index","param","entries","item","type","newParam","includes","coder","_getCoder","from","push","encode","map","p","err","encodeParameter","isParamRequiredToConvert","data","Object","keys","filter","k","Number","isInteger","length","formatArrayResToObject","returnValue","__length__","key","decodeParametersWith","abis","bytes","loose","res","decode","replace","message","decodeParameters","decodeParameter"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-abi\\src\\api\\parameters_api.ts"],"sourcesContent":["﻿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { AbiError } from 'web3-errors';\r\nimport { ParamType, Result } from '@ethersproject/abi';\r\nimport { HexString, AbiInput, DecodedParams } from 'web3-types';\r\nimport ethersAbiCoder from '../ethers_abi_coder.js';\r\nimport { formatParam, isAbiFragment, mapTypes, modifyParams } from '../utils.js';\r\n\r\n/**\r\n * Encodes a parameter based on its type to its ABI representation.\r\n * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.\r\n * @param params - The actual parameters to encode.\r\n * @returns - The ABI encoded parameters\r\n * @example\r\n * ```ts\r\n * const res = web3.eth.abi.encodeParameters(\r\n *    [\"uint256\", \"string\"],\r\n *    [\"2345675643\", \"Hello!%\"]\r\n *  );\r\n *\r\n *  console.log(res);\r\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\r\n * ```\r\n */\r\nexport const encodeParameters = (abi: ReadonlyArray<AbiInput>, params: unknown[]): string => {\r\n\ttry {\r\n\t\tconst modifiedTypes = mapTypes(\r\n\t\t\tArray.isArray(abi) ? (abi as AbiInput[]) : ([abi] as unknown as AbiInput[]),\r\n\t\t);\r\n\t\tconst modifiedParams: Array<unknown> = [];\r\n\t\tfor (const [index, param] of params.entries()) {\r\n\t\t\tconst item = modifiedTypes[index];\r\n\t\t\tlet type: string;\r\n\r\n\t\t\tif (isAbiFragment(item) && item.type) {\r\n\t\t\t\t// We may get a named type of shape {name, type}\r\n\t\t\t\ttype = item.type;\r\n\t\t\t} else {\r\n\t\t\t\ttype = item as unknown as string;\r\n\t\t\t}\r\n\r\n\t\t\tconst newParam = formatParam(type, param);\r\n\r\n\t\t\tif (typeof type === 'string' && type.includes('tuple')) {\r\n\t\t\t\tconst coder = ethersAbiCoder._getCoder(ParamType.from(type));\r\n\t\t\t\tmodifyParams(coder, [newParam]);\r\n\t\t\t}\r\n\r\n\t\t\tmodifiedParams.push(newParam);\r\n\t\t}\r\n\t\treturn ethersAbiCoder.encode(\r\n\t\t\tmodifiedTypes.map(p => ParamType.from(p)),\r\n\t\t\tmodifiedParams,\r\n\t\t);\r\n\t} catch (err) {\r\n\t\tthrow new AbiError(`Parameter encoding error`, err as Error);\r\n\t}\r\n};\r\n\r\n/**\r\n * Encodes a parameter based on its type to its ABI representation.\r\n * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\r\n * @param param - The actual parameter to encode.\r\n * @returns -  The ABI encoded parameter\r\n * @example\r\n * ```ts\r\n *  const res = web3.eth.abi.encodeParameter(\"uint256\", \"2345675643\");\r\n *  console.log(res);\r\n *  0x000000000000000000000000000000000000000000000000000000008bd02b7b\r\n *\r\n *  const res = web3.eth.abi.encodeParameter(\"uint\", \"2345675643\");\r\n *\r\n *  console.log(res);\r\n *  >0x000000000000000000000000000000000000000000000000000000008bd02b7b\r\n *\r\n *    const res = web3.eth.abi.encodeParameter(\"bytes32\", \"0xdf3234\");\r\n *\r\n *  console.log(res);\r\n *  >0xdf32340000000000000000000000000000000000000000000000000000000000\r\n *\r\n *   const res = web3.eth.abi.encodeParameter(\"bytes\", \"0xdf3234\");\r\n *\r\n *  console.log(res);\r\n *  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003df32340000000000000000000000000000000000000000000000000000000000\r\n *\r\n *   const res = web3.eth.abi.encodeParameter(\"bytes32[]\", [\"0xdf3234\", \"0xfdfd\"]);\r\n *\r\n *  console.log(res);\r\n *  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002df32340000000000000000000000000000000000000000000000000000000000fdfd000000000000000000000000000000000000000000000000000000000000\r\n *\r\n *  const res = web3.eth.abi.encodeParameter(\r\n *    {\r\n *      ParentStruct: {\r\n *        propertyOne: \"uint256\",\r\n *        propertyTwo: \"uint256\",\r\n *        childStruct: {\r\n *          propertyOne: \"uint256\",\r\n *          propertyTwo: \"uint256\",\r\n *        },\r\n *      },\r\n *    },\r\n *    {\r\n *      propertyOne: 42,\r\n *      propertyTwo: 56,\r\n *      childStruct: {\r\n *        propertyOne: 45,\r\n *        propertyTwo: 78,\r\n *      },\r\n *    }\r\n *  );\r\n *\r\n *  console.log(res);\r\n *  > 0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e\r\n * ```\r\n */\r\nexport const encodeParameter = (abi: AbiInput, param: unknown): string =>\r\n\tencodeParameters([abi], [param]);\r\n\r\n// If encoded param is an array and there are mixed on integer and string keys\r\nconst isParamRequiredToConvert = (data: Result): boolean =>\r\n\tArray.isArray(data) &&\r\n\tObject.keys(data).filter(k => Number.isInteger(+k)).length !== Object.keys(data).length;\r\n\r\n// Ethers-Encoder return the decoded result as an array with additional string indexes for named params\r\n// We want these to be converted to an object with named keys\r\nconst formatArrayResToObject = (data: Result): DecodedParams => {\r\n\tconst returnValue: DecodedParams = {\r\n\t\t__length__: 0,\r\n\t};\r\n\r\n\tfor (const key of Object.keys(data)) {\r\n\t\treturnValue[key] =\r\n\t\t\tArray.isArray(data[key]) && isParamRequiredToConvert(data[key] as Result)\r\n\t\t\t\t? formatArrayResToObject(data[key] as Result)\r\n\t\t\t\t: data[key];\r\n\r\n\t\treturnValue.__length__ += Number.isInteger(+key) ? 1 : 0;\r\n\t}\r\n\treturn returnValue;\r\n};\r\n\r\n/**\r\n * Should be used to decode list of params\r\n */\r\nexport const decodeParametersWith = (\r\n\tabis: AbiInput[],\r\n\tbytes: HexString,\r\n\tloose: boolean,\r\n): { [key: string]: unknown; __length__: number } => {\r\n\ttry {\r\n\t\tif (abis.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\r\n\t\t\tthrow new AbiError(\r\n\t\t\t\t\"Returned values aren't valid, did it run Out of Gas? \" +\r\n\t\t\t\t\t'You might also see this error if you are not using the ' +\r\n\t\t\t\t\t'correct ABI for the contract you are retrieving data from, ' +\r\n\t\t\t\t\t'requesting data from a block number that does not exist, ' +\r\n\t\t\t\t\t'or querying a node which is not fully synced.',\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst res = ethersAbiCoder.decode(\r\n\t\t\tmapTypes(abis).map(p => ParamType.from(p)),\r\n\t\t\t`0x${bytes.replace(/0x/i, '')}`,\r\n\t\t\tloose,\r\n\t\t);\r\n\t\treturn formatArrayResToObject(res);\r\n\t} catch (err) {\r\n\t\tthrow new AbiError(`Parameter decoding error: ${(err as Error).message}`);\r\n\t}\r\n};\r\n\r\n/**\r\n * Should be used to decode list of params\r\n */\r\n/**\r\n * Decodes ABI encoded parameters to its JavaScript types.\r\n * @param abi -  An array of {@link AbiInput}. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\r\n * @param bytes - The ABI byte code to decode\r\n * @returns - The result object containing the decoded parameters.\r\n * @example\r\n * ```ts\r\n * let res = web3.eth.abi.decodeParameters(\r\n *    [\"string\", \"uint256\"],\r\n *    \"0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\r\n *  );\r\n *  console.log(res);\r\n *  > { '0': 'Hello!%!', '1': 234n, __length__: 2 }\r\n *\r\n * let res = web3.eth.abi.decodeParameters(\r\n *    [\r\n *      {\r\n *        type: \"string\",\r\n *        name: \"myString\",\r\n *      },\r\n *      {\r\n *        type: \"uint256\",\r\n *        name: \"myNumber\",\r\n *      },\r\n *    ],\r\n *    \"0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\r\n *  );\r\n * console.log(res);\r\n *  > {\r\n *  '0': 'Hello!%!',\r\n *  '1': 234n,\r\n *  __length__: 2,\r\n *  myString: 'Hello!%!',\r\n *  myNumber: 234n\r\n * }\r\n *\r\n * const res = web3.eth.abi.decodeParameters(\r\n *    [\r\n *      \"uint8[]\",\r\n *      {\r\n *        ParentStruct: {\r\n *          propertyOne: \"uint256\",\r\n *          propertyTwo: \"uint256\",\r\n *          childStruct: {\r\n *            propertyOne: \"uint256\",\r\n *            propertyTwo: \"uint256\",\r\n *          },\r\n *        },\r\n *      },\r\n *    ],\r\n *    \"0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000018\"\r\n *  );\r\n *  console.log(res);\r\n *  >\r\n *  '0': [ 42n, 24n ],\r\n *  '1': {\r\n *    '0': 42n,\r\n *    '1': 56n,\r\n *    '2': {\r\n *      '0': 45n,\r\n *      '1': 78n,\r\n *      __length__: 2,\r\n *      propertyOne: 45n,\r\n *      propertyTwo: 78n\r\n *    },\r\n *    __length__: 3,\r\n *    propertyOne: 42n,\r\n *    propertyTwo: 56n,\r\n *    childStruct: {\r\n *      '0': 45n,\r\n *      '1': 78n,\r\n *      __length__: 2,\r\n *      propertyOne: 45n,\r\n *      propertyTwo: 78n\r\n *    }\r\n *  },\r\n *  __length__: 2,\r\n *  ParentStruct: {\r\n *    '0': 42n,\r\n *    '1': 56n,\r\n *    '2': {\r\n *      '0': 45n,\r\n *      '1': 78n,\r\n *      __length__: 2,\r\n *      propertyOne: 45n,\r\n *      propertyTwo: 78n\r\n *    },\r\n *    __length__: 3,\r\n *    propertyOne: 42n,\r\n *    propertyTwo: 56n,\r\n *    childStruct: {\r\n *      '0': 45n,\r\n *      '1': 78n,\r\n *      __length__: 2,\r\n *      propertyOne: 45n,\r\n *      propertyTwo: 78n\r\n *    }\r\n *  }\r\n *}\r\n * ```\r\n */\r\nexport const decodeParameters = (\r\n\tabi: AbiInput[],\r\n\tbytes: HexString,\r\n): { [key: string]: unknown; __length__: number } => decodeParametersWith(abi, bytes, false);\r\n\r\n/**\r\n * Should be used to decode bytes to plain param\r\n */\r\n/**\r\n * Decodes an ABI encoded parameter to its JavaScript type.\r\n * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\r\n * @param bytes - The ABI byte code to decode\r\n * @returns - The decoded parameter\r\n * @example\r\n * ```ts\r\n *   const res = web3.eth.abi.decodeParameter(\r\n *    \"uint256\",\r\n *    \"0x0000000000000000000000000000000000000000000000000000000000000010\"\r\n *  );\r\n *  console.log(res);\r\n * > 16n\r\n *\r\n *  const res = web3.eth.abi.decodeParameter(\r\n *    \"string\",\r\n *    \"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\r\n *  );\r\n *\r\n *  console.log(res);\r\n *  > Hello!%!\r\n *\r\n *  const res = web3.eth.abi.decodeParameter(\r\n *    {\r\n *      ParentStruct: {\r\n *        propertyOne: \"uint256\",\r\n *        propertyTwo: \"uint256\",\r\n *        childStruct: {\r\n *          propertyOne: \"uint256\",\r\n *          propertyTwo: \"uint256\",\r\n *        },\r\n *      },\r\n *    },\r\n *    \"0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e\"\r\n *  );\r\n *\r\n *  console.log(res);\r\n *   {\r\n *  '0': 42n,\r\n *  '1': 56n,\r\n *  '2': {\r\n *    '0': 45n,\r\n *    '1': 78n,\r\n *    __length__: 2,\r\n *    propertyOne: 45n,\r\n *    propertyTwo: 78n\r\n *  },\r\n *  __length__: 3,\r\n *  propertyOne: 42n,\r\n *  propertyTwo: 56n,\r\n *  childStruct: {\r\n *    '0': 45n,\r\n *    '1': 78n,\r\n *    __length__: 2,\r\n *    propertyOne: 45n,\r\n *    propertyTwo: 78n\r\n *  }\r\n *}\r\n * ```\r\n */\r\nexport const decodeParameter = (abi: AbiInput, bytes: HexString): unknown =>\r\n\tdecodeParameters([abi], bytes)['0'];\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,SAAS,QAAgB,oBAAoB;AAEtD,OAAOC,cAAc,MAAM,wBAAwB;AACnD,SAASC,WAAW,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,YAAY,QAAQ,aAAa;AAEhF;;;;;;;;;;;;;;;;AAgBA,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,GAA4B,EAAEC,MAAiB,KAAY;EAC3F,IAAI;IACH,MAAMC,aAAa,GAAGL,QAAQ,CAC7BM,KAAK,CAACC,OAAO,CAACJ,GAAG,CAAC,GAAIA,GAAkB,GAAI,CAACA,GAAG,CAA2B,CAC3E;IACD,MAAMK,cAAc,GAAmB,EAAE;IACzC,KAAK,MAAM,CAACC,KAAK,EAAEC,KAAK,CAAC,IAAIN,MAAM,CAACO,OAAO,EAAE,EAAE;MAC9C,MAAMC,IAAI,GAAGP,aAAa,CAACI,KAAK,CAAC;MACjC,IAAII,IAAY;MAEhB,IAAId,aAAa,CAACa,IAAI,CAAC,IAAIA,IAAI,CAACC,IAAI,EAAE;QACrC;QACAA,IAAI,GAAGD,IAAI,CAACC,IAAI;OAChB,MAAM;QACNA,IAAI,GAAGD,IAAyB;;MAGjC,MAAME,QAAQ,GAAGhB,WAAW,CAACe,IAAI,EAAEH,KAAK,CAAC;MAEzC,IAAI,OAAOG,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;QACvD,MAAMC,KAAK,GAAGnB,cAAc,CAACoB,SAAS,CAACrB,SAAS,CAACsB,IAAI,CAACL,IAAI,CAAC,CAAC;QAC5DZ,YAAY,CAACe,KAAK,EAAE,CAACF,QAAQ,CAAC,CAAC;;MAGhCN,cAAc,CAACW,IAAI,CAACL,QAAQ,CAAC;;IAE9B,OAAOjB,cAAc,CAACuB,MAAM,CAC3Bf,aAAa,CAACgB,GAAG,CAACC,CAAC,IAAI1B,SAAS,CAACsB,IAAI,CAACI,CAAC,CAAC,CAAC,EACzCd,cAAc,CACd;GACD,CAAC,OAAOe,GAAG,EAAE;IACb,MAAM,IAAI5B,QAAQ,CAAC,0BAA0B,EAAE4B,GAAY,CAAC;;AAE9D,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,OAAO,MAAMC,eAAe,GAAGA,CAACrB,GAAa,EAAEO,KAAc,KAC5DR,gBAAgB,CAAC,CAACC,GAAG,CAAC,EAAE,CAACO,KAAK,CAAC,CAAC;AAEjC;AACA,MAAMe,wBAAwB,GAAIC,IAAY,IAC7CpB,KAAK,CAACC,OAAO,CAACmB,IAAI,CAAC,IACnBC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,MAAM,CAACC,CAAC,IAAIC,MAAM,CAACC,SAAS,CAAC,CAACF,CAAC,CAAC,CAAC,CAACG,MAAM,KAAKN,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACO,MAAM;AAExF;AACA;AACA,MAAMC,sBAAsB,GAAIR,IAAY,IAAmB;EAC9D,MAAMS,WAAW,GAAkB;IAClCC,UAAU,EAAE;GACZ;EAED,KAAK,MAAMC,GAAG,IAAIV,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,EAAE;IACpCS,WAAW,CAACE,GAAG,CAAC,GACf/B,KAAK,CAACC,OAAO,CAACmB,IAAI,CAACW,GAAG,CAAC,CAAC,IAAIZ,wBAAwB,CAACC,IAAI,CAACW,GAAG,CAAW,CAAC,GACtEH,sBAAsB,CAACR,IAAI,CAACW,GAAG,CAAW,CAAC,GAC3CX,IAAI,CAACW,GAAG,CAAC;IAEbF,WAAW,CAACC,UAAU,IAAIL,MAAM,CAACC,SAAS,CAAC,CAACK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;;EAEzD,OAAOF,WAAW;AACnB,CAAC;AAED;;;AAGA,OAAO,MAAMG,oBAAoB,GAAGA,CACnCC,IAAgB,EAChBC,KAAgB,EAChBC,KAAc,KACqC;EACnD,IAAI;IACH,IAAIF,IAAI,CAACN,MAAM,GAAG,CAAC,KAAK,CAACO,KAAK,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,IAAI,CAAC,EAAE;MACpE,MAAM,IAAI7C,QAAQ,CACjB,uDAAuD,GACtD,yDAAyD,GACzD,6DAA6D,GAC7D,2DAA2D,GAC3D,+CAA+C,CAChD;;IAEF,MAAM+C,GAAG,GAAG7C,cAAc,CAAC8C,MAAM,CAChC3C,QAAQ,CAACuC,IAAI,CAAC,CAAClB,GAAG,CAACC,CAAC,IAAI1B,SAAS,CAACsB,IAAI,CAACI,CAAC,CAAC,CAAC,EAC1C,KAAKkB,KAAK,CAACI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,EAC/BH,KAAK,CACL;IACD,OAAOP,sBAAsB,CAACQ,GAAG,CAAC;GAClC,CAAC,OAAOnB,GAAG,EAAE;IACb,MAAM,IAAI5B,QAAQ,CAAC,6BAA8B4B,GAAa,CAACsB,OAAO,EAAE,CAAC;;AAE3E,CAAC;AAED;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGA,OAAO,MAAMC,gBAAgB,GAAGA,CAC/B3C,GAAe,EACfqC,KAAgB,KACoCF,oBAAoB,CAACnC,GAAG,EAAEqC,KAAK,EAAE,KAAK,CAAC;AAE5F;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,OAAO,MAAMO,eAAe,GAAGA,CAAC5C,GAAa,EAAEqC,KAAgB,KAC9DM,gBAAgB,CAAC,CAAC3C,GAAG,CAAC,EAAEqC,KAAK,CAAC,CAAC,GAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}