{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { isSupportedProvider, Web3Context } from 'web3-core';\nimport { TransactionNotFound } from 'web3-errors';\nimport { toChecksumAddress, isNullish } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport * as rpcMethodsWrappers from './rpc_method_wrappers.js';\nimport { LogsSubscription, NewPendingTransactionsSubscription, NewHeadsSubscription, SyncingSubscription } from './web3_subscriptions.js';\nexport const registeredSubscriptions = {\n  logs: LogsSubscription,\n  newPendingTransactions: NewPendingTransactionsSubscription,\n  newHeads: NewHeadsSubscription,\n  syncing: SyncingSubscription,\n  pendingTransactions: NewPendingTransactionsSubscription,\n  newBlockHeaders: NewHeadsSubscription // the same as newHeads. just for support API like in version 1.x\n};\n\nexport class Web3Eth extends Web3Context {\n  constructor(providerOrContext) {\n    if (typeof providerOrContext === 'string' || isSupportedProvider(providerOrContext)) {\n      super({\n        provider: providerOrContext,\n        registeredSubscriptions\n      });\n      return;\n    }\n    if (providerOrContext.registeredSubscriptions) {\n      super(providerOrContext);\n      return;\n    }\n    super(Object.assign(Object.assign({}, providerOrContext), {\n      registeredSubscriptions\n    }));\n  }\n  /**\r\n   * @returns Returns the ethereum protocol version of the node.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getProtocolVersion().then(console.log);\r\n   * > \"63\"\r\n   * ```\r\n   */\n  getProtocolVersion() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getProtocolVersion(this.requestManager);\n    });\n  }\n  // TODO Add returnFormat parameter\n  /**\r\n   * Checks if the node is currently syncing.\r\n   *\r\n   * @returns Either a {@link SyncingStatusAPI}, or `false`.\r\n   *\r\n   * ```ts\r\n   * web3.eth.isSyncing().then(console.log);\r\n   * > {\r\n   *     startingBlock: 100,\r\n   *     currentBlock: 312,\r\n   *     highestBlock: 512,\r\n   *     knownStates: 234566,\r\n   *     pulledStates: 123455\r\n   * }\r\n   * ```\r\n   */\n  isSyncing() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getSyncing(this.requestManager);\n    });\n  }\n  // TODO consider adding returnFormat parameter (to format address as bytes)\n  /**\r\n   * @returns Returns the coinbase address to which mining rewards will go.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getCoinbase().then(console.log);\r\n   * > \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\"\r\n   * ```\r\n   */\n  getCoinbase() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getCoinbase(this.requestManager);\n    });\n  }\n  /**\r\n   * Checks whether the node is mining or not.\r\n   *\r\n   * @returns `true` if the node is mining, otherwise `false`.\r\n   *\r\n   * ```ts\r\n   * web3.eth.isMining().then(console.log);\r\n   * > true\r\n   * ```\r\n   */\n  isMining() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getMining(this.requestManager);\n    });\n  }\n  /**\r\n   * @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.\r\n   *\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The number of hashes per second that the node is mining with.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getHashrate().then(console.log);\r\n   * > 493736n\r\n   *\r\n   * web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\r\n   * > \"0x788a8\"\r\n   * ```\r\n   */\n  getHashrate() {\n    let returnFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.getHashRate(returnFormat);\n    });\n  }\n  /**\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The number of hashes per second that the node is mining with.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getHashRate().then(console.log);\r\n   * > 493736n\r\n   *\r\n   * web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\r\n   * > \"0x788a8\"\r\n   * ```\r\n   */\n  getHashRate() {\n    let returnFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getHashRate(this, returnFormat);\n    });\n  }\n  /**\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The gas price determined by the last few blocks median gas price.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getGasPrice().then(console.log);\r\n   * > 20000000000n\r\n   *\r\n   * web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\r\n   * > \"0x4a817c800\"\r\n   * ```\r\n   */\n  getGasPrice() {\n    let returnFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getGasPrice(this, returnFormat);\n    });\n  }\n  /**\r\n   * @returns A list of accounts the node controls (addresses are checksummed).\r\n   *\r\n   * ```ts\r\n   * web3.eth.getAccounts().then(console.log);\r\n   * > [\"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", \"0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf\"]\r\n   * ```\r\n   */\n  getAccounts() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const hexAddresses = (_a = yield ethRpcMethods.getAccounts(this.requestManager)) !== null && _a !== void 0 ? _a : [];\n      return hexAddresses.map(address => toChecksumAddress(address));\n    });\n  }\n  /**\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The current block number.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getBlockNumber().then(console.log);\r\n   * > 2744n\r\n   *\r\n   * web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\r\n   * > \"0xab8\"\r\n   * ```\r\n   */\n  getBlockNumber() {\n    let returnFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getBlockNumber(this, returnFormat);\n    });\n  }\n  /**\r\n   * Get the balance of an address at a given block.\r\n   *\r\n   * @param address The address to get the balance of.\r\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The current balance for the given address in `wei`.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\r\n   * > 1000000000000n\r\n   *\r\n   * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\r\n   * > \"0xe8d4a51000\"\r\n   * ```\r\n   */\n  getBalance(address) {\n    let blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultBlock;\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getBalance(this, address, blockNumber, returnFormat);\n    });\n  }\n  /**\r\n   * Get the storage at a specific position of an address.\r\n   *\r\n   * @param address The address to get the storage from.\r\n   * @param storageSlot The index position of the storage.\r\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The value in storage at the given position.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getStorageAt(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\", 0).then(console.log);\r\n   * > \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"\r\n   *\r\n   * web3.eth.getStorageAt(\r\n   *      \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\",\r\n   *      0,\r\n   *      undefined,\r\n   *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\r\n   * ).then(console.log);\r\n   * > Uint8Array(31) [\r\n   *       3, 52,  86, 115,  33,  35, 255, 255,\r\n   *       35, 66,  52,  45, 209,  35,  66,  67,\r\n   *       67, 36,  35,  66,  52, 253,  35,  79,\r\n   *       210, 63, 212, 242,  61,  66,  52\r\n   *    ]\r\n   * ```\r\n   */\n  getStorageAt(address, storageSlot) {\n    let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.defaultBlock;\n    let returnFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getStorageAt(this, address, storageSlot, blockNumber, returnFormat);\n    });\n  }\n  /**\r\n   * Get the code at a specific address.\r\n   *\r\n   * @param address The address to get the code from.\r\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getCode(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\").then(console.log);\r\n   * > \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"\r\n   *\r\n   * web3.eth.getCode(\r\n   *      \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\r\n   *      undefined,\r\n   *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\r\n   * ).then(console.log);\r\n   * > Uint8Array(50) [\r\n   *   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,\r\n   *   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,\r\n   *   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,\r\n   *   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,\r\n   *   144, 80, 145, 144,  80, 86\r\n   * ]\r\n   * ```\r\n   */\n  getCode(address) {\n    let blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultBlock;\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getCode(this, address, blockNumber, returnFormat);\n    });\n  }\n  /**\r\n   * Retrieves a {@link Block} matching the provided block number, block hash or block tag.\r\n   *\r\n   * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\r\n   * @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).\r\n   * @returns A {@link Block} object matching the provided block number or block hash.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getBlock(0).then(console.log);\r\n   * > {\r\n   *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\r\n   *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\n   *    miner: '0x0000000000000000000000000000000000000000',\r\n   *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\r\n   *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n   *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n   *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n   *    difficulty: 1n,\r\n   *    number: 0n,\r\n   *    gasLimit: 30000000n,\r\n   *    gasUsed: 0n,\r\n   *    timestamp: 1658281638n,\r\n   *    extraData: '0x',\r\n   *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *    nonce: 0n,\r\n   *    totalDifficulty: 1n,\r\n   *    baseFeePerGas: 1000000000n,\r\n   *    size: 514n,\r\n   *    transactions: [],\r\n   *    uncles: []\r\n   *  }\r\n   *\r\n   * web3.eth.getBlock(\r\n   *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\r\n   *      false,\r\n   *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n   * ).then(console.log);\r\n   * > {\r\n   *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\r\n   *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\n   *    miner: '0x0000000000000000000000000000000000000000',\r\n   *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\r\n   *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n   *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n   *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n   *    difficulty: 1,\r\n   *    number: 0,\r\n   *    gasLimit: 30000000,\r\n   *    gasUsed: 0,\r\n   *    timestamp: 1658281638,\r\n   *    extraData: '0x',\r\n   *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *    nonce: 0,\r\n   *    totalDifficulty: 1,\r\n   *    baseFeePerGas: 1000000000,\r\n   *    size: 514,\r\n   *    transactions: [],\r\n   *    uncles: []\r\n   *  }\r\n   * ```\r\n   */\n  getBlock() {\n    let block = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.defaultBlock;\n    let hydrated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getBlock(this, block, hydrated, returnFormat);\n    });\n  }\n  /**\r\n   * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The number of transactions in the provided block.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getBlockTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\r\n   * > 1n\r\n   *\r\n   * web3.eth.getBlockTransactionCount(\r\n   *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\r\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n   * ).then(console.log);\r\n   * > 1\r\n   * ```\r\n   */\n  getBlockTransactionCount() {\n    let block = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.defaultBlock;\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getBlockTransactionCount(this, block, returnFormat);\n    });\n  }\n  /**\r\n   * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getBlockUncleCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\r\n   * > 1n\r\n   *\r\n   * web3.eth.getBlockUncleCount(\r\n   *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\r\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n   * ).then(console.log);\r\n   * > 1\r\n   * ```\r\n   */\n  getBlockUncleCount() {\n    let block = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.defaultBlock;\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getBlockUncleCount(this, block, returnFormat);\n    });\n  }\n  /**\r\n   *\r\n   * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\r\n   * @param uncleIndex The index position of the uncle.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getUncle(0, 1).then(console.log);\r\n   * > {\r\n   *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\r\n   *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\n   *    miner: '0x0000000000000000000000000000000000000000',\r\n   *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\r\n   *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n   *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n   *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n   *    difficulty: 1n,\r\n   *    number: 0n,\r\n   *    gasLimit: 30000000n,\r\n   *    gasUsed: 0n,\r\n   *    timestamp: 1658281638n,\r\n   *    extraData: '0x',\r\n   *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *    nonce: 0n,\r\n   *    totalDifficulty: 1n,\r\n   *    baseFeePerGas: 1000000000n,\r\n   *    size: 514n,\r\n   *    transactions: [],\r\n   *    uncles: []\r\n   *  }\r\n   *\r\n   * web3.eth.getUncle(\r\n   *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\r\n   *      1,\r\n   *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n   * ).then(console.log);\r\n   * > {\r\n   *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\r\n   *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\n   *    miner: '0x0000000000000000000000000000000000000000',\r\n   *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\r\n   *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n   *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n   *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n   *    difficulty: 1,\r\n   *    number: 0,\r\n   *    gasLimit: 30000000,\r\n   *    gasUsed: 0,\r\n   *    timestamp: 1658281638,\r\n   *    extraData: '0x',\r\n   *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *    nonce: 0,\r\n   *    totalDifficulty: 1,\r\n   *    baseFeePerGas: 1000000000,\r\n   *    size: 514,\r\n   *    transactions: [],\r\n   *    uncles: []\r\n   *  }\r\n   * ```\r\n   */\n  getUncle() {\n    let block = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.defaultBlock;\n    let uncleIndex = arguments.length > 1 ? arguments[1] : undefined;\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getUncle(this, block, uncleIndex, returnFormat);\n    });\n  }\n  /**\r\n   * @param transactionHash The hash of the desired transaction.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The desired transaction object.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);\r\n   * {\r\n   *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n   *    type: 0n,\r\n   *    nonce: 0n,\r\n   *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\r\n   *    blockNumber: 1n,\r\n   *    transactionIndex: 0n,\r\n   *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *    value: 1n,\r\n   *    gas: 90000n,\r\n   *    gasPrice: 2000000000n,\r\n   *    input: '0x',\r\n   *    v: 2709n,\r\n   *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n   *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n   *  }\r\n   *\r\n   * web3.eth.getTransaction(\r\n   *     web3.utils.hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\r\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n   * ).then(console.log);\r\n   * {\r\n   *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n   *    type: 0,\r\n   *    nonce: 0,\r\n   *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\r\n   *    blockNumber: 1,\r\n   *    transactionIndex: 0,\r\n   *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *    value: 1,\r\n   *    gas: 90000,\r\n   *    gasPrice: 2000000000,\r\n   *    input: '0x',\r\n   *    v: 2709,\r\n   *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n   *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n   *  }\r\n   * ```\r\n   */\n  getTransaction(transactionHash) {\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield rpcMethodsWrappers.getTransaction(this, transactionHash, returnFormat);\n      if (!response) throw new TransactionNotFound();\n      return response;\n    });\n  }\n  /**\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns A list of pending transactions.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getPendingTransactions().then(console.log);\r\n   * > [\r\n   *      {\r\n   *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n   *          type: 0n,\r\n   *          nonce: 0n,\r\n   *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *          blockNumber: null,\r\n   *          transactionIndex: 0n,\r\n   *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *          value: 1n,\r\n   *          gas: 90000n,\r\n   *          gasPrice: 2000000000n,\r\n   *          input: '0x',\r\n   *          v: 2709n,\r\n   *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n   *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n   *      },\r\n   *      {\r\n   *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\r\n   *          type: 0n,\r\n   *          nonce: 1n,\r\n   *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *          blockNumber: null,\r\n   *          transactionIndex: 0n,\r\n   *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *          value: 1n,\r\n   *          gas: 90000n,\r\n   *          gasPrice: 2000000000n,\r\n   *          input: '0x',\r\n   *          v: 2710n,\r\n   *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\r\n   *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\r\n   *      }\r\n   *   ]\r\n   *\r\n   * * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\r\n   * > [\r\n   *      {\r\n   *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n   *          type: 0,\r\n   *          nonce: 0,\r\n   *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *          blockNumber: null,\r\n   *          transactionIndex: 0,\r\n   *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *          value: 1,\r\n   *          gas: 90000,\r\n   *          gasPrice: 2000000000,\r\n   *          input: '0x',\r\n   *          v: 2709,\r\n   *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n   *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n   *      },\r\n   *      {\r\n   *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\r\n   *          type: 0,\r\n   *          nonce: 1,\r\n   *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n   *          blockNumber: null,\r\n   *          transactionIndex: 0,\r\n   *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *          value: 1,\r\n   *          gas: 90000,\r\n   *          gasPrice: 2000000000,\r\n   *          input: '0x',\r\n   *          v: 2710,\r\n   *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\r\n   *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\r\n   *      }\r\n   *   ]\r\n   * ```\r\n   */\n  getPendingTransactions() {\n    let returnFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getPendingTransactions(this, returnFormat);\n    });\n  }\n  /**\r\n   * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\r\n   * @param transactionIndex The index position of the transaction.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The desired transaction object.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);\r\n   * {\r\n   *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n   *    type: 0n,\r\n   *    nonce: 0n,\r\n   *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\r\n   *    blockNumber: 1n,\r\n   *    transactionIndex: 0n,\r\n   *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *    value: 1n,\r\n   *    gas: 90000n,\r\n   *    gasPrice: 2000000000n,\r\n   *    input: '0x',\r\n   *    v: 2709n,\r\n   *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n   *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n   *  }\r\n   *\r\n   * web3.eth.getTransactionFromBlock(\r\n   *     hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\r\n   *     0,\r\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n   * ).then(console.log);\r\n   * {\r\n   *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n   *    type: 0,\r\n   *    nonce: 0,\r\n   *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\r\n   *    blockNumber: 1,\r\n   *    transactionIndex: 0,\r\n   *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *    value: 1,\r\n   *    gas: 90000,\r\n   *    gasPrice: 2000000000,\r\n   *    input: '0x',\r\n   *    v: 2709,\r\n   *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n   *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n   *  }\r\n   * ```\r\n   */\n  getTransactionFromBlock() {\n    let block = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.defaultBlock;\n    let transactionIndex = arguments.length > 1 ? arguments[1] : undefined;\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getTransactionFromBlock(this, block, transactionIndex, returnFormat);\n    });\n  }\n  /**\r\n   * @param transactionHash Hash of the transaction to retrieve the receipt for.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The desired {@link TransactionReceipt} object.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getTransactionReceipt(\"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\").then(console.log);\r\n   * > {\r\n   *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\r\n   *      transactionIndex: 0n,\r\n   *      blockNumber: 2n,\r\n   *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\r\n   *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *      cumulativeGasUsed: 21000n,\r\n   *      gasUsed: 21000n,\r\n   *      logs: [],\r\n   *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n   *      status: 1n,\r\n   *      effectiveGasPrice: 2000000000n,\r\n   *      type: 0n\r\n   *  }\r\n   *\r\n   * web3.eth.getTransactionReceipt(\r\n   *      \"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\",\r\n   *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n   * ).then(console.log);\r\n   * > {\r\n   *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\r\n   *      transactionIndex: 0,\r\n   *      blockNumber: 2,\r\n   *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\r\n   *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *      cumulativeGasUsed: 21000,\r\n   *      gasUsed: 21000,\r\n   *      logs: [],\r\n   *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n   *      status: 1,\r\n   *      effectiveGasPrice: 2000000000,\r\n   *      type: 0n\r\n   *  }\r\n   * ```\r\n   */\n  getTransactionReceipt(transactionHash) {\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield rpcMethodsWrappers.getTransactionReceipt(this, transactionHash, returnFormat);\n      if (!response) throw new TransactionNotFound();\n      return response;\n    });\n  }\n  /**\r\n   * @param address The address to get the number of transactions for.\r\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The number of transactions sent from the provided address.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\r\n   * > 1n\r\n   *\r\n   * web3.eth.getTransactionCount(\r\n   *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\r\n   *     undefined,\r\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n   * ).then(console.log);\r\n   * > 1\r\n   * ```\r\n   */\n  getTransactionCount(address) {\n    let blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultBlock;\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getTransactionCount(this, address, blockNumber, returnFormat);\n    });\n  }\n  /**\r\n   * @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @param options A configuration object used to change the behavior of the `sendTransaction` method.\r\n   * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\r\n   * ```ts\r\n   * const transaction = {\r\n   *   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\r\n   *   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\r\n   *   value: '0x1'\r\n   * }\r\n   *\r\n   * const transactionHash = await web3.eth.sendTransaction(transaction);\r\n   * console.log(transactionHash);\r\n   * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\r\n   *\r\n   * web3.eth.sendTransaction(transaction).then(console.log);\r\n   * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\r\n   *\r\n   * web3.eth.sendTransaction(transaction).catch(console.log);\r\n   * > <Some TransactionError>\r\n   *\r\n   * // Example using options.ignoreGasPricing = true\r\n   * web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);\r\n   * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\r\n   * ```\r\n   *\r\n   *\r\n   * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\r\n   * - `sending`\r\n   * ```ts\r\n   * web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\r\n   * > {\r\n   *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\r\n   *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\r\n   *    value: '0x1',\r\n   *    gasPrice: '0x77359400',\r\n   *    maxPriorityFeePerGas: undefined,\r\n   *    maxFeePerGas: undefined\r\n   * }\r\n   * ```\r\n   * - `sent`\r\n   * ```ts\r\n   * web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));\r\n   * > {\r\n   *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\r\n   *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\r\n   *    value: '0x1',\r\n   *    gasPrice: '0x77359400',\r\n   *    maxPriorityFeePerGas: undefined,\r\n   *    maxFeePerGas: undefined\r\n   * }\r\n   * ```\r\n   * - `transactionHash`\r\n   * ```ts\r\n   * web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));\r\n   * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\r\n   * ```\r\n   * - `receipt`\r\n   * ```ts\r\n   * web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));\r\n   * > {\r\n   *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\r\n   *      transactionIndex: 0n,\r\n   *      blockNumber: 2n,\r\n   *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\r\n   *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *      cumulativeGasUsed: 21000n,\r\n   *      gasUsed: 21000n,\r\n   *      logs: [],\r\n   *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n   *      status: 1n,\r\n   *      effectiveGasPrice: 2000000000n,\r\n   *      type: 0n\r\n   * }\r\n   * ```\r\n   * - `confirmation`\r\n   * ```ts\r\n   * web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));\r\n   * > {\r\n   *     confirmations: 1n,\r\n   *     receipt: {\r\n   *         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',\r\n   *         transactionIndex: 0n,\r\n   *         blockNumber: 5n,\r\n   *         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',\r\n   *         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n   *         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n   *         cumulativeGasUsed: 21000n,\r\n   *         gasUsed: 21000n,\r\n   *         logs: [],\r\n   *         logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n   *         status: 1n,\r\n   *         effectiveGasPrice: 2000000000n,\r\n   *         type: 0n\r\n   *     },\r\n   *     latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'\r\n   * }\r\n   * ```\r\n   * - `error`\r\n   * ```ts\r\n   * web3.eth.sendTransaction(transaction).on('error', error => console.log);\r\n   * > <Some TransactionError>\r\n   * ```\r\n   */\n  sendTransaction(transaction) {\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    return rpcMethodsWrappers.sendTransaction(this, transaction, returnFormat, options);\n  }\n  /**\r\n   * @param transaction Signed transaction in one of the valid {@link Bytes} format.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\r\n   * ```ts\r\n   * const signedTransaction = \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\r\n   *\r\n   * const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);\r\n   * console.log(transactionHash);\r\n   * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\r\n   *\r\n   * web3.eth.sendSignedTransaction(signedTransaction).then(console.log);\r\n   * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\r\n   *\r\n   * web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);\r\n   * > <Some TransactionError>\r\n   * ```\r\n   *\r\n   *\r\n   * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\r\n   * - `sending`\r\n   * ```ts\r\n   * web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\r\n   * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\r\n   * ```\r\n   * - `sent`\r\n   * ```ts\r\n   * web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));\r\n   * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\r\n   * ```\r\n   * - `transactionHash`\r\n   * ```ts\r\n   * web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));\r\n   * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\r\n   * ```\r\n   * - `receipt`\r\n   * ```ts\r\n   * web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));\r\n   * > {\r\n   *      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\r\n   *      blockNumber: 1n,\r\n   *      cumulativeGasUsed: 21000n,\r\n   *      effectiveGasPrice: 1000000001n,\r\n   *      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n   *      gasUsed: 21000n,\r\n   *      logs: [],\r\n   *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n   *      status: 1n,\r\n   *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n   *      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\r\n   *      transactionIndex: 0n,\r\n   *      type: 0n\r\n   * }\r\n   * ```\r\n   * - `confirmation`\r\n   * ```ts\r\n   * web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));\r\n   * > {\r\n   *     confirmations: 1n,\r\n   *     receipt: {\r\n   *          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\r\n   *          blockNumber: 1n,\r\n   *          cumulativeGasUsed: 21000n,\r\n   *          effectiveGasPrice: 1000000001n,\r\n   *          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n   *          gasUsed: 21000n,\r\n   *          logs: [],\r\n   *          logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n   *          status: 1n,\r\n   *          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n   *          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\r\n   *          transactionIndex: 0n,\r\n   *          type: 0n\r\n   *     },\r\n   *     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'\r\n   * }\r\n   * ```\r\n   * - `error`\r\n   * ```ts\r\n   * web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));\r\n   * > <Some TransactionError>\r\n   * ```\r\n   */\n  sendSignedTransaction(transaction) {\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    return rpcMethodsWrappers.sendSignedTransaction(this, transaction, returnFormat, options);\n  }\n  /**\r\n   * @param message Data to sign in one of the valid {@link Bytes} format.\r\n   * @param address Address to sign data with, can be an address or the index of a local wallet.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns The signed `message`.\r\n   *\r\n   * ```ts\r\n   * // Using an unlocked account managed by connected RPC client\r\n   * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\").then(console.log);\r\n   * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\r\n   *\r\n   * // Using an unlocked account managed by connected RPC client\r\n   * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);\r\n   * > Uint8Array(65) [\r\n   *    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,\r\n   *    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,\r\n   *   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,\r\n   *    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,\r\n   *    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,\r\n   *   206, 115, 116, 101, 197, 207, 208,  75, 228,   0\r\n   * ]\r\n   * ```\r\n   *\r\n   * // Using an indexed account managed by local Web3 wallet\r\n   * web3.eth.sign(\"0x48656c6c6f20776f726c64\", 0).then(console.log);\r\n   * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\r\n   */\n  sign(message, address) {\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.sign(this, message, address, returnFormat);\n    });\n  }\n  /**\r\n   * @param transaction The transaction object to sign.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n   * @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\r\n   *\r\n   * ```ts\r\n   * const transaction = {\r\n   *      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\r\n   *      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\r\n   *      value: '0x1',\r\n   *      gas: '21000',\r\n   *      gasPrice: await web3Eth.getGasPrice(),\r\n   *      nonce: '0x1',\r\n   *      type: '0x0'\r\n   * }\r\n   *\r\n   * web3.eth.signTransaction(transaction).then(console.log);\r\n   * > {\r\n   *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\r\n   *   tx: {\r\n   *      type: 0n,\r\n   *      nonce: 1n,\r\n   *      gasPrice: 1000000001n,\r\n   *      gas: 21000n,\r\n   *      value: 1n,\r\n   *      v: 2710n,\r\n   *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\r\n   *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\r\n   *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n   *      data: '0x'\r\n   *   }\r\n   * }\r\n   *\r\n   * web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\r\n   * > {\r\n   *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\r\n   *   tx: {\r\n   *      type: 0,\r\n   *      nonce: 1,\r\n   *      gasPrice: 1000000001,\r\n   *      gas: 21000,\r\n   *      value: 1,\r\n   *      v: 2710,\r\n   *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\r\n   *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\r\n   *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n   *      data: '0x'\r\n   *   }\r\n   * }\r\n   * ```\r\n   */\n  signTransaction(transaction) {\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.signTransaction(this, transaction, returnFormat);\n    });\n  }\n  // TODO Decide what to do with transaction.to\n  // https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n  /**\r\n   * Executes a message call within the EVM without creating a transaction.\r\n   * It does not publish anything to the blockchain and does not consume any gas.\r\n   *\r\n   * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.\r\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n   * @returns The returned data of the call, e.g. a smart contract function's return value.\r\n   */\n  call(transaction) {\n    let blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultBlock;\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.call(this, transaction, blockNumber, returnFormat);\n    });\n  }\n  /**\r\n   * Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.\r\n   * The transaction will not be added to the blockchain, and actual gas usage can vary when interacting\r\n   * with a contract as a result of updating the contract's state.\r\n   *\r\n   * @param transaction The {@link Transaction} object to estimate the gas for.\r\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n   * @returns The used gas for the simulated transaction execution.\r\n   *\r\n   * ```ts\r\n   * const transaction = {\r\n   *       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\r\n   *       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\r\n   *       value: '0x1',\r\n   *       nonce: '0x1',\r\n   *       type: '0x0'\r\n   * }\r\n   *\r\n   * web3.eth.estimateGas(transaction).then(console.log);\r\n   * > 21000n\r\n   *\r\n   * web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\r\n   * > 21000\r\n   * ```\r\n   */\n  estimateGas(transaction) {\n    let blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultBlock;\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.estimateGas(this, transaction, blockNumber, returnFormat);\n    });\n  }\n  /**\r\n   * Gets past logs, matching the provided `filter`.\r\n   *\r\n   * @param filter A {@link Filter} object containing the properties for the desired logs.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n   * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getPastLogs({\r\n   *      address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\r\n   *      topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\r\n   *  }).then(console.log);\r\n   * > [{\r\n   *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\r\n   *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\r\n   *       logIndex: 0n,\r\n   *       transactionIndex: 0n,\r\n   *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\r\n   *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\r\n   *       blockNumber: 1234n,\r\n   *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\r\n   *   },\r\n   *   {...}]\r\n   *\r\n   * web3.eth.getPastLogs(\r\n   *     {\r\n   *       address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\r\n   *       topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\r\n   *     },\r\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n   * ).then(console.log);\r\n   * > [{\r\n   *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\r\n   *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\r\n   *       logIndex: 0,\r\n   *       transactionIndex: 0,\r\n   *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\r\n   *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\r\n   *       blockNumber: 1234,\r\n   *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\r\n   *   },\r\n   *   {...}]\r\n   * ```\r\n   */\n  getPastLogs(filter) {\n    let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getLogs(this, filter, returnFormat);\n    });\n  }\n  /**\r\n   * Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').\r\n   *\r\n   * @returns The mining work as an array of strings with the following structure:\r\n   *\r\n   * String 32 Bytes - at index 0: current block header pow-hash\r\n   * String 32 Bytes - at index 1: the seed hash used for the DAG.\r\n   * String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getWork().then(console.log);\r\n   * > [\r\n   *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\r\n   *     \"0x5EED00000000000000000000000000005EED0000000000000000000000000000\",\r\n   *     \"0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000\"\r\n   * ]\r\n   * ```\r\n   */\n  getWork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getWork(this.requestManager);\n    });\n  }\n  /**\r\n   * Used for submitting a proof-of-work solution.\r\n   *\r\n   * @param nonce The nonce found (8 bytes).\r\n   * @param hash  The header’s pow-hash (32 bytes).\r\n   * @param digest The mix digest (32 bytes).\r\n   * @returns Returns `true` if the provided solution is valid, otherwise `false`.\r\n   *\r\n   * ```ts\r\n   * web3.eth.submitWork([\r\n   *     \"0x0000000000000001\",\r\n   *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\r\n   *     \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\"\r\n   * ]).then(console.log);\r\n   * > true\r\n   * ```\r\n   */\n  submitWork(nonce, hash, digest) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.submitWork(this.requestManager, nonce, hash, digest);\n    });\n  }\n  // TODO - Format addresses\n  /**\r\n   * This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)\r\n   * This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.\r\n   * It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).\r\n   * For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.\r\n   *\r\n   * @returns An array of enabled accounts.\r\n   *\r\n   * ```ts\r\n   * web3.eth.requestAccounts().then(console.log);\r\n   * > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']\r\n   * ```\r\n   */\n  requestAccounts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.requestAccounts(this.requestManager);\n    });\n  }\n  /**\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n   * @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).\r\n   *\r\n   * ```ts\r\n   * web3.eth.getChainId().then(console.log);\r\n   * > 61n\r\n   *\r\n   * web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\r\n   * > 61\r\n   * ```\r\n   */\n  getChainId() {\n    let returnFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getChainId(this, returnFormat);\n    });\n  }\n  /**\r\n   * @returns The current client version.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getNodeInfo().then(console.log);\r\n   * > \"Mist/v0.9.3/darwin/go1.4.1\"\r\n   * ```\r\n   */\n  getNodeInfo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return ethRpcMethods.getNodeInfo(this.requestManager);\n    });\n  }\n  /**\r\n   * @param address The Address of the account or contract.\r\n   * @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.\r\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n   * @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).\r\n   *\r\n   * ```ts\r\n   * web3.eth.getProof(\r\n   *     \"0x1234567890123456789012345678901234567890\",\r\n   *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\r\n   *     \"latest\"\r\n   * ).then(console.log);\r\n   * > {\r\n   *     \"address\": \"0x1234567890123456789012345678901234567890\",\r\n   *     \"accountProof\": [\r\n   *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\r\n   *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\r\n   *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\r\n   *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\r\n   *     ],\r\n   *     \"balance\": 0n,\r\n   *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\r\n   *     \"nonce\": 0n,\r\n   *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n   *     \"storageProof\": [\r\n   *         {\r\n   *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n   *             \"value\": 0n,\r\n   *             \"proof\": []\r\n   *         },\r\n   *         {\r\n   *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\r\n   *             \"value\": 0n,\r\n   *             \"proof\": []\r\n   *         }\r\n   *     ]\r\n   * }\r\n   *\r\n   * web3.eth.getProof(\r\n   *     \"0x1234567890123456789012345678901234567890\",\r\n   *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\r\n   *     undefined,\r\n   *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n   * ).then(console.log);\r\n   * > {\r\n   *     \"address\": \"0x1234567890123456789012345678901234567890\",\r\n   *     \"accountProof\": [\r\n   *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\r\n   *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\r\n   *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\r\n   *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\r\n   *     ],\r\n   *     \"balance\": 0,\r\n   *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\r\n   *     \"nonce\": 0,\r\n   *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n   *     \"storageProof\": [\r\n   *         {\r\n   *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n   *             \"value\": 0,\r\n   *             \"proof\": []\r\n   *         },\r\n   *         {\r\n   *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\r\n   *             \"value\": 0,\r\n   *             \"proof\": []\r\n   *         }\r\n   *     ]\r\n   * }\r\n   * ```\r\n   */\n  getProof(address, storageKeys) {\n    let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.defaultBlock;\n    let returnFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getProof(this, address, storageKeys, blockNumber, returnFormat);\n    });\n  }\n  // TODO Throwing an error with Geth, but not Infura\n  // TODO gasUsedRatio and reward not formatting\n  /**\r\n   * @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\r\n   * @param newestBlock Highest number block of the requested range.\r\n   * @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n   * @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.\r\n   * The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.\r\n   * For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.\r\n   *\r\n   * ```ts\r\n   * web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);\r\n   * > {\r\n   *     baseFeePerGas: [\r\n   *         22983878621n,\r\n   *         21417903463n,\r\n   *         19989260230n,\r\n   *         17770954829n,\r\n   *         18850641304n\r\n   *     ],\r\n   *     gasUsedRatio: [\r\n   *         0.22746546666666667,\r\n   *         0.2331871,\r\n   *         0.05610054885262125,\r\n   *         0.7430227268212117\r\n   *     ],\r\n   *     oldestBlock: 15216343n,\r\n   *     reward: [\r\n   *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\r\n   *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\r\n   *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\r\n   *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\r\n   *     ]\r\n   * }\r\n   *\r\n   * web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\r\n   * > {\r\n   *     baseFeePerGas: [\r\n   *         22983878621,\r\n   *         21417903463,\r\n   *         19989260230,\r\n   *         17770954829,\r\n   *         18850641304\r\n   *     ],\r\n   *     gasUsedRatio: [\r\n   *         0.22746546666666667,\r\n   *         0.2331871,\r\n   *         0.05610054885262125,\r\n   *         0.7430227268212117\r\n   *     ],\r\n   *     oldestBlock: 15216343,\r\n   *     reward: [\r\n   *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\r\n   *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\r\n   *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\r\n   *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\r\n   *     ]\r\n   * }\r\n   * ```\r\n   */\n  getFeeHistory(blockCount) {\n    let newestBlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultBlock;\n    let rewardPercentiles = arguments.length > 2 ? arguments[2] : undefined;\n    let returnFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.getFeeHistory(this, blockCount, newestBlock, rewardPercentiles, returnFormat);\n    });\n  }\n  /**\r\n   * This method generates an access list for a transaction.\r\n   *\r\n   * @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.\r\n   * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\r\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.\r\n   * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\r\n   * @example\r\n   * ```ts\r\n   * web3.eth.createAccessList({\r\n   * from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',\r\n   * data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',\r\n   * gasPrice: '0x3b9aca00',\r\n   * gas: '0x3d0900',\r\n   * to: '0x940b25304947ae863568B3804434EC77E2160b87'\r\n   * })\r\n   * .then(console.log);\r\n   *\r\n   * > {\r\n   *  \"accessList\": [\r\n   *     {\r\n   *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\r\n   *       \"storageKeys\": [\r\n   *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\r\n   *       ]\r\n   *     }\r\n   *   ],\r\n   *   \"gasUsed\": \"0x7671\"\r\n   * }\r\n   * ```\r\n   */\n  createAccessList(transaction) {\n    let blockNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultBlock;\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      return rpcMethodsWrappers.createAccessList(this, transaction, blockNumber, returnFormat);\n    });\n  }\n  /**\r\n   * Lets you subscribe to specific events in the blockchain.\r\n   *\r\n   * @param name - The subscription you want to subscribe to.\r\n   * @param args - Optional additional parameters, depending on the subscription type.\r\n   * @returns A subscription object of type {@link RegisteredSubscription}. The object contains:\r\n   *  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.\r\n   *  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.\r\n   *  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.\r\n   *  - subscription.args: The subscription arguments, used when re-subscribing.\r\n   *\r\n   *\r\n   * You can use the subscription object to listen on:\r\n   *\r\n   * - on(\"data\") - Fires on each incoming log with the log object as argument.\r\n   * - on(\"changed\") - Fires on each log which was removed from the blockchain. The log will have the additional property \"removed: true\".\r\n   * - on(\"error\") - Fires when an error in the subscription occurs.\r\n   * - on(\"connected\") - Fires once after the subscription successfully connected. Returns the subscription id.\r\n   *\r\n   * @example **Subscribe to Smart Contract events**\r\n   * ```ts\r\n   * // Subscribe to `logs`\r\n   * const logSubscription = web3.eth.subscribe('logs', {\r\n   *     address: '0x1234567890123456789012345678901234567890',\r\n   *     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']\r\n   * });\r\n   * logSubscription.on('data', (data: any) => console.log(data));\r\n   * logSubscription.on('error', (error: any) => console.log(error));\r\n   *\r\n   * ```\r\n   *\r\n   * @example **Subscribe to new block headers**\r\n   * ```ts\r\n   * // Subscribe to `newBlockHeaders`\r\n   * const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');\r\n   *\r\n   * newBlocksSubscription.on('data', async blockhead => {\r\n   * \tconsole.log('New block header: ', blockhead);\r\n   *\r\n   * \t// You do not need the next line, if you like to keep notified for every new block\r\n   * \tawait newBlocksSubscription.unsubscribe();\r\n   * \tconsole.log('Unsubscribed from new block headers.');\r\n   * });\r\n   * newBlocksSubscription.on('error', error =>\r\n   * \tconsole.log('Error when subscribing to New block header: ', error),\r\n   * );\r\n   * ```\r\n   */\n  subscribe(name, args) {\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const subscription = yield (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe(name, args, returnFormat);\n      if (subscription instanceof LogsSubscription && name === 'logs' && typeof args === 'object' && !isNullish(args.fromBlock) && Number.isFinite(Number(args.fromBlock))) {\n        setImmediate(() => {\n          this.getPastLogs(args).then(logs => {\n            for (const log of logs) {\n              subscription._processSubscriptionResult(log);\n            }\n          }).catch(e => {\n            subscription._processSubscriptionError(e);\n          });\n        });\n      }\n      return subscription;\n    });\n  }\n  static shouldClearSubscription(_ref) {\n    let {\n      sub\n    } = _ref;\n    return !(sub instanceof SyncingSubscription);\n  }\n  /**\r\n   * Resets subscriptions.\r\n   *\r\n   * @param notClearSyncing If `true` it keeps the `syncing` subscription.\r\n   * @returns A promise to an array of subscription ids that were cleared.\r\n   *\r\n   * ```ts\r\n   * web3.eth.clearSubscriptions().then(console.log);\r\n   * > [...] An array of subscription ids that were cleared\r\n   * ```\r\n   */\n  clearSubscriptions() {\n    let notClearSyncing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var _a;\n    return (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.unsubscribe(\n    // eslint-disable-next-line\n    notClearSyncing ? Web3Eth.shouldClearSubscription : undefined);\n  }\n}","map":{"version":3,"names":["DEFAULT_RETURN_FORMAT","isSupportedProvider","Web3Context","TransactionNotFound","toChecksumAddress","isNullish","ethRpcMethods","rpcMethodsWrappers","LogsSubscription","NewPendingTransactionsSubscription","NewHeadsSubscription","SyncingSubscription","registeredSubscriptions","logs","newPendingTransactions","newHeads","syncing","pendingTransactions","newBlockHeaders","Web3Eth","constructor","providerOrContext","provider","Object","assign","getProtocolVersion","requestManager","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashrate","returnFormat","arguments","length","undefined","getHashRate","getGasPrice","getAccounts","hexAddresses","_a","map","address","getBlockNumber","getBalance","blockNumber","defaultBlock","getStorageAt","storageSlot","getCode","getBlock","block","hydrated","getBlockTransactionCount","getBlockUncleCount","getUncle","uncleIndex","getTransaction","transactionHash","response","getPendingTransactions","getTransactionFromBlock","transactionIndex","getTransactionReceipt","getTransactionCount","sendTransaction","transaction","options","sendSignedTransaction","sign","message","signTransaction","call","estimateGas","getPastLogs","filter","getLogs","getWork","submitWork","nonce","hash","digest","requestAccounts","getChainId","getNodeInfo","getProof","storageKeys","getFeeHistory","blockCount","newestBlock","rewardPercentiles","createAccessList","subscribe","name","args","subscription","subscriptionManager","fromBlock","Number","isFinite","setImmediate","then","log","_processSubscriptionResult","catch","e","_processSubscriptionError","shouldClearSubscription","_ref","sub","clearSubscriptions","notClearSyncing","unsubscribe"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth\\src\\web3_eth.ts"],"sourcesContent":["﻿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n// Disabling because returnTypes must be last param to match 1.x params\r\n/* eslint-disable default-param-last */\r\n\r\nimport {\r\n\tSupportedProviders,\r\n\tAddress,\r\n\tBytes,\r\n\tFilter,\r\n\tHexString32Bytes,\r\n\tHexString8Bytes,\r\n\tNumbers,\r\n\tBlockNumberOrTag,\r\n\tLogsOutput,\r\n\tTransaction,\r\n\tTransactionCall,\r\n\tWeb3EthExecutionAPI,\r\n\tTransactionWithFromLocalWalletIndex,\r\n\tTransactionWithToLocalWalletIndex,\r\n\tTransactionWithFromAndToLocalWalletIndex,\r\n\tTransactionForAccessList,\r\n\tDataFormat,\r\n\tDEFAULT_RETURN_FORMAT,\r\n} from 'web3-types';\r\nimport { isSupportedProvider, Web3Context, Web3ContextInitOptions } from 'web3-core';\r\nimport { TransactionNotFound } from 'web3-errors';\r\nimport { toChecksumAddress, isNullish } from 'web3-utils';\r\nimport { ethRpcMethods } from 'web3-rpc-methods';\r\n\r\nimport * as rpcMethodsWrappers from './rpc_method_wrappers.js';\r\nimport { SendTransactionOptions } from './types.js';\r\nimport {\r\n\tLogsSubscription,\r\n\tNewPendingTransactionsSubscription,\r\n\tNewHeadsSubscription,\r\n\tSyncingSubscription,\r\n} from './web3_subscriptions.js';\r\n\r\ntype RegisteredSubscription = {\r\n\tlogs: typeof LogsSubscription;\r\n\tnewPendingTransactions: typeof NewPendingTransactionsSubscription;\r\n\tpendingTransactions: typeof NewPendingTransactionsSubscription;\r\n\tnewHeads: typeof NewHeadsSubscription;\r\n\tnewBlockHeaders: typeof NewHeadsSubscription;\r\n\tsyncing: typeof SyncingSubscription;\r\n};\r\n\r\nexport const registeredSubscriptions = {\r\n\tlogs: LogsSubscription,\r\n\tnewPendingTransactions: NewPendingTransactionsSubscription,\r\n\tnewHeads: NewHeadsSubscription,\r\n\tsyncing: SyncingSubscription,\r\n\tpendingTransactions: NewPendingTransactionsSubscription, // the same as newPendingTransactions. just for support API like in version 1.x\r\n\tnewBlockHeaders: NewHeadsSubscription, // the same as newHeads. just for support API like in version 1.x\r\n};\r\n\r\nexport class Web3Eth extends Web3Context<Web3EthExecutionAPI, RegisteredSubscription> {\r\n\tpublic constructor(\r\n\t\tproviderOrContext?: SupportedProviders<any> | Web3ContextInitOptions | string,\r\n\t) {\r\n\t\tif (\r\n\t\t\ttypeof providerOrContext === 'string' ||\r\n\t\t\tisSupportedProvider(providerOrContext as SupportedProviders<any>)\r\n\t\t) {\r\n\t\t\tsuper({\r\n\t\t\t\tprovider: providerOrContext as SupportedProviders<any>,\r\n\t\t\t\tregisteredSubscriptions,\r\n\t\t\t});\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ((providerOrContext as Web3ContextInitOptions).registeredSubscriptions) {\r\n\t\t\tsuper(providerOrContext as Web3ContextInitOptions);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper({\r\n\t\t\t...(providerOrContext as Web3ContextInitOptions),\r\n\t\t\tregisteredSubscriptions,\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns the ethereum protocol version of the node.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getProtocolVersion().then(console.log);\r\n\t * > \"63\"\r\n\t * ```\r\n\t */\r\n\tpublic async getProtocolVersion() {\r\n\t\treturn ethRpcMethods.getProtocolVersion(this.requestManager);\r\n\t}\r\n\r\n\t// TODO Add returnFormat parameter\r\n\t/**\r\n\t * Checks if the node is currently syncing.\r\n\t *\r\n\t * @returns Either a {@link SyncingStatusAPI}, or `false`.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.isSyncing().then(console.log);\r\n\t * > {\r\n\t *     startingBlock: 100,\r\n\t *     currentBlock: 312,\r\n\t *     highestBlock: 512,\r\n\t *     knownStates: 234566,\r\n\t *     pulledStates: 123455\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tpublic async isSyncing() {\r\n\t\treturn ethRpcMethods.getSyncing(this.requestManager);\r\n\t}\r\n\r\n\t// TODO consider adding returnFormat parameter (to format address as bytes)\r\n\t/**\r\n\t * @returns Returns the coinbase address to which mining rewards will go.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getCoinbase().then(console.log);\r\n\t * > \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\"\r\n\t * ```\r\n\t */\r\n\tpublic async getCoinbase() {\r\n\t\treturn ethRpcMethods.getCoinbase(this.requestManager);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether the node is mining or not.\r\n\t *\r\n\t * @returns `true` if the node is mining, otherwise `false`.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.isMining().then(console.log);\r\n\t * > true\r\n\t * ```\r\n\t */\r\n\tpublic async isMining() {\r\n\t\treturn ethRpcMethods.getMining(this.requestManager);\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.\r\n\t *\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The number of hashes per second that the node is mining with.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getHashrate().then(console.log);\r\n\t * > 493736n\r\n\t *\r\n\t * web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\r\n\t * > \"0x788a8\"\r\n\t * ```\r\n\t */\r\n\tpublic async getHashrate<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn this.getHashRate(returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The number of hashes per second that the node is mining with.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getHashRate().then(console.log);\r\n\t * > 493736n\r\n\t *\r\n\t * web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\r\n\t * > \"0x788a8\"\r\n\t * ```\r\n\t */\r\n\tpublic async getHashRate<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getHashRate(this, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The gas price determined by the last few blocks median gas price.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getGasPrice().then(console.log);\r\n\t * > 20000000000n\r\n\t *\r\n\t * web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\r\n\t * > \"0x4a817c800\"\r\n\t * ```\r\n\t */\r\n\tpublic async getGasPrice<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getGasPrice(this, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns A list of accounts the node controls (addresses are checksummed).\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getAccounts().then(console.log);\r\n\t * > [\"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", \"0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf\"]\r\n\t * ```\r\n\t */\r\n\tpublic async getAccounts() {\r\n\t\tconst hexAddresses = (await ethRpcMethods.getAccounts(this.requestManager)) ?? [];\r\n\t\treturn hexAddresses.map(address => toChecksumAddress(address));\r\n\t}\r\n\r\n\t/**\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The current block number.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getBlockNumber().then(console.log);\r\n\t * > 2744n\r\n\t *\r\n\t * web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\r\n\t * > \"0xab8\"\r\n\t * ```\r\n\t */\r\n\tpublic async getBlockNumber<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getBlockNumber(this, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the balance of an address at a given block.\r\n\t *\r\n\t * @param address The address to get the balance of.\r\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The current balance for the given address in `wei`.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\r\n\t * > 1000000000000n\r\n\t *\r\n\t * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\r\n\t * > \"0xe8d4a51000\"\r\n\t * ```\r\n\t */\r\n\tpublic async getBalance<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\taddress: Address,\r\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getBalance(this, address, blockNumber, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the storage at a specific position of an address.\r\n\t *\r\n\t * @param address The address to get the storage from.\r\n\t * @param storageSlot The index position of the storage.\r\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The value in storage at the given position.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getStorageAt(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\", 0).then(console.log);\r\n\t * > \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"\r\n\t *\r\n\t * web3.eth.getStorageAt(\r\n\t *      \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\",\r\n\t *      0,\r\n\t *      undefined,\r\n\t *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\r\n\t * ).then(console.log);\r\n\t * > Uint8Array(31) [\r\n\t *       3, 52,  86, 115,  33,  35, 255, 255,\r\n\t *       35, 66,  52,  45, 209,  35,  66,  67,\r\n\t *       67, 36,  35,  66,  52, 253,  35,  79,\r\n\t *       210, 63, 212, 242,  61,  66,  52\r\n\t *    ]\r\n\t * ```\r\n\t */\r\n\tpublic async getStorageAt<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\taddress: Address,\r\n\t\tstorageSlot: Numbers,\r\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getStorageAt(\r\n\t\t\tthis,\r\n\t\t\taddress,\r\n\t\t\tstorageSlot,\r\n\t\t\tblockNumber,\r\n\t\t\treturnFormat,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the code at a specific address.\r\n\t *\r\n\t * @param address The address to get the code from.\r\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getCode(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\").then(console.log);\r\n\t * > \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"\r\n\t *\r\n\t * web3.eth.getCode(\r\n\t *      \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\r\n\t *      undefined,\r\n\t *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\r\n\t * ).then(console.log);\r\n\t * > Uint8Array(50) [\r\n\t *   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,\r\n\t *   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,\r\n\t *   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,\r\n\t *   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,\r\n\t *   144, 80, 145, 144,  80, 86\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic async getCode<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\taddress: Address,\r\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getCode(this, address, blockNumber, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves a {@link Block} matching the provided block number, block hash or block tag.\r\n\t *\r\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\r\n\t * @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).\r\n\t * @returns A {@link Block} object matching the provided block number or block hash.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getBlock(0).then(console.log);\r\n\t * > {\r\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\r\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\n\t *    miner: '0x0000000000000000000000000000000000000000',\r\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\r\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    difficulty: 1n,\r\n\t *    number: 0n,\r\n\t *    gasLimit: 30000000n,\r\n\t *    gasUsed: 0n,\r\n\t *    timestamp: 1658281638n,\r\n\t *    extraData: '0x',\r\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    nonce: 0n,\r\n\t *    totalDifficulty: 1n,\r\n\t *    baseFeePerGas: 1000000000n,\r\n\t *    size: 514n,\r\n\t *    transactions: [],\r\n\t *    uncles: []\r\n\t *  }\r\n\t *\r\n\t * web3.eth.getBlock(\r\n\t *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\r\n\t *      false,\r\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n\t * ).then(console.log);\r\n\t * > {\r\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\r\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\n\t *    miner: '0x0000000000000000000000000000000000000000',\r\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\r\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    difficulty: 1,\r\n\t *    number: 0,\r\n\t *    gasLimit: 30000000,\r\n\t *    gasUsed: 0,\r\n\t *    timestamp: 1658281638,\r\n\t *    extraData: '0x',\r\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    nonce: 0,\r\n\t *    totalDifficulty: 1,\r\n\t *    baseFeePerGas: 1000000000,\r\n\t *    size: 514,\r\n\t *    transactions: [],\r\n\t *    uncles: []\r\n\t *  }\r\n\t * ```\r\n\t */\r\n\tpublic async getBlock<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\r\n\t\thydrated = false,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getBlock(this, block, hydrated, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The number of transactions in the provided block.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getBlockTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\r\n\t * > 1n\r\n\t *\r\n\t * web3.eth.getBlockTransactionCount(\r\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\r\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n\t * ).then(console.log);\r\n\t * > 1\r\n\t * ```\r\n\t */\r\n\tpublic async getBlockTransactionCount<\r\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\r\n\t>(\r\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getBlockTransactionCount(this, block, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getBlockUncleCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\r\n\t * > 1n\r\n\t *\r\n\t * web3.eth.getBlockUncleCount(\r\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\r\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n\t * ).then(console.log);\r\n\t * > 1\r\n\t * ```\r\n\t */\r\n\tpublic async getBlockUncleCount<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getBlockUncleCount(this, block, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\r\n\t * @param uncleIndex The index position of the uncle.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getUncle(0, 1).then(console.log);\r\n\t * > {\r\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\r\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\n\t *    miner: '0x0000000000000000000000000000000000000000',\r\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\r\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    difficulty: 1n,\r\n\t *    number: 0n,\r\n\t *    gasLimit: 30000000n,\r\n\t *    gasUsed: 0n,\r\n\t *    timestamp: 1658281638n,\r\n\t *    extraData: '0x',\r\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    nonce: 0n,\r\n\t *    totalDifficulty: 1n,\r\n\t *    baseFeePerGas: 1000000000n,\r\n\t *    size: 514n,\r\n\t *    transactions: [],\r\n\t *    uncles: []\r\n\t *  }\r\n\t *\r\n\t * web3.eth.getUncle(\r\n\t *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\r\n\t *      1,\r\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n\t * ).then(console.log);\r\n\t * > {\r\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\r\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\n\t *    miner: '0x0000000000000000000000000000000000000000',\r\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\r\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\r\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    difficulty: 1,\r\n\t *    number: 0,\r\n\t *    gasLimit: 30000000,\r\n\t *    gasUsed: 0,\r\n\t *    timestamp: 1658281638,\r\n\t *    extraData: '0x',\r\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *    nonce: 0,\r\n\t *    totalDifficulty: 1,\r\n\t *    baseFeePerGas: 1000000000,\r\n\t *    size: 514,\r\n\t *    transactions: [],\r\n\t *    uncles: []\r\n\t *  }\r\n\t * ```\r\n\t */\r\n\tpublic async getUncle<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\r\n\t\tuncleIndex: Numbers,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getUncle(this, block, uncleIndex, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * @param transactionHash The hash of the desired transaction.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The desired transaction object.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);\r\n\t * {\r\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n\t *    type: 0n,\r\n\t *    nonce: 0n,\r\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\r\n\t *    blockNumber: 1n,\r\n\t *    transactionIndex: 0n,\r\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *    value: 1n,\r\n\t *    gas: 90000n,\r\n\t *    gasPrice: 2000000000n,\r\n\t *    input: '0x',\r\n\t *    v: 2709n,\r\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n\t *  }\r\n\t *\r\n\t * web3.eth.getTransaction(\r\n\t *     web3.utils.hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\r\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n\t * ).then(console.log);\r\n\t * {\r\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n\t *    type: 0,\r\n\t *    nonce: 0,\r\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\r\n\t *    blockNumber: 1,\r\n\t *    transactionIndex: 0,\r\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *    value: 1,\r\n\t *    gas: 90000,\r\n\t *    gasPrice: 2000000000,\r\n\t *    input: '0x',\r\n\t *    v: 2709,\r\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n\t *  }\r\n\t * ```\r\n\t */\r\n\tpublic async getTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\ttransactionHash: Bytes,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\tconst response = await rpcMethodsWrappers.getTransaction(\r\n\t\t\tthis,\r\n\t\t\ttransactionHash,\r\n\t\t\treturnFormat,\r\n\t\t);\r\n\r\n\t\tif (!response) throw new TransactionNotFound();\r\n\r\n\t\treturn response;\r\n\t}\r\n\r\n\t/**\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns A list of pending transactions.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getPendingTransactions().then(console.log);\r\n\t * > [\r\n\t *      {\r\n\t *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n\t *          type: 0n,\r\n\t *          nonce: 0n,\r\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *          blockNumber: null,\r\n\t *          transactionIndex: 0n,\r\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *          value: 1n,\r\n\t *          gas: 90000n,\r\n\t *          gasPrice: 2000000000n,\r\n\t *          input: '0x',\r\n\t *          v: 2709n,\r\n\t *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n\t *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n\t *      },\r\n\t *      {\r\n\t *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\r\n\t *          type: 0n,\r\n\t *          nonce: 1n,\r\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *          blockNumber: null,\r\n\t *          transactionIndex: 0n,\r\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *          value: 1n,\r\n\t *          gas: 90000n,\r\n\t *          gasPrice: 2000000000n,\r\n\t *          input: '0x',\r\n\t *          v: 2710n,\r\n\t *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\r\n\t *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\r\n\t *      }\r\n\t *   ]\r\n\t *\r\n\t * * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\r\n\t * > [\r\n\t *      {\r\n\t *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n\t *          type: 0,\r\n\t *          nonce: 0,\r\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *          blockNumber: null,\r\n\t *          transactionIndex: 0,\r\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *          value: 1,\r\n\t *          gas: 90000,\r\n\t *          gasPrice: 2000000000,\r\n\t *          input: '0x',\r\n\t *          v: 2709,\r\n\t *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n\t *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n\t *      },\r\n\t *      {\r\n\t *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\r\n\t *          type: 0,\r\n\t *          nonce: 1,\r\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n\t *          blockNumber: null,\r\n\t *          transactionIndex: 0,\r\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *          value: 1,\r\n\t *          gas: 90000,\r\n\t *          gasPrice: 2000000000,\r\n\t *          input: '0x',\r\n\t *          v: 2710,\r\n\t *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\r\n\t *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\r\n\t *      }\r\n\t *   ]\r\n\t * ```\r\n\t */\r\n\tpublic async getPendingTransactions<\r\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\r\n\t>(returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat) {\r\n\t\treturn rpcMethodsWrappers.getPendingTransactions(this, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\r\n\t * @param transactionIndex The index position of the transaction.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The desired transaction object.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);\r\n\t * {\r\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n\t *    type: 0n,\r\n\t *    nonce: 0n,\r\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\r\n\t *    blockNumber: 1n,\r\n\t *    transactionIndex: 0n,\r\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *    value: 1n,\r\n\t *    gas: 90000n,\r\n\t *    gasPrice: 2000000000n,\r\n\t *    input: '0x',\r\n\t *    v: 2709n,\r\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n\t *  }\r\n\t *\r\n\t * web3.eth.getTransactionFromBlock(\r\n\t *     hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\r\n\t *     0,\r\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n\t * ).then(console.log);\r\n\t * {\r\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\r\n\t *    type: 0,\r\n\t *    nonce: 0,\r\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\r\n\t *    blockNumber: 1,\r\n\t *    transactionIndex: 0,\r\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *    value: 1,\r\n\t *    gas: 90000,\r\n\t *    gasPrice: 2000000000,\r\n\t *    input: '0x',\r\n\t *    v: 2709,\r\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\r\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\r\n\t *  }\r\n\t * ```\r\n\t */\r\n\tpublic async getTransactionFromBlock<\r\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\r\n\t>(\r\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\r\n\t\ttransactionIndex: Numbers,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getTransactionFromBlock(\r\n\t\t\tthis,\r\n\t\t\tblock,\r\n\t\t\ttransactionIndex,\r\n\t\t\treturnFormat,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @param transactionHash Hash of the transaction to retrieve the receipt for.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The desired {@link TransactionReceipt} object.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getTransactionReceipt(\"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\").then(console.log);\r\n\t * > {\r\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\r\n\t *      transactionIndex: 0n,\r\n\t *      blockNumber: 2n,\r\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\r\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *      cumulativeGasUsed: 21000n,\r\n\t *      gasUsed: 21000n,\r\n\t *      logs: [],\r\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n\t *      status: 1n,\r\n\t *      effectiveGasPrice: 2000000000n,\r\n\t *      type: 0n\r\n\t *  }\r\n\t *\r\n\t * web3.eth.getTransactionReceipt(\r\n\t *      \"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\",\r\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n\t * ).then(console.log);\r\n\t * > {\r\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\r\n\t *      transactionIndex: 0,\r\n\t *      blockNumber: 2,\r\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\r\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *      cumulativeGasUsed: 21000,\r\n\t *      gasUsed: 21000,\r\n\t *      logs: [],\r\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n\t *      status: 1,\r\n\t *      effectiveGasPrice: 2000000000,\r\n\t *      type: 0n\r\n\t *  }\r\n\t * ```\r\n\t */\r\n\tpublic async getTransactionReceipt<\r\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\r\n\t>(transactionHash: Bytes, returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat) {\r\n\t\tconst response = await rpcMethodsWrappers.getTransactionReceipt(\r\n\t\t\tthis,\r\n\t\t\ttransactionHash,\r\n\t\t\treturnFormat,\r\n\t\t);\r\n\r\n\t\tif (!response) throw new TransactionNotFound();\r\n\r\n\t\treturn response;\r\n\t}\r\n\r\n\t/**\r\n\t * @param address The address to get the number of transactions for.\r\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The number of transactions sent from the provided address.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\r\n\t * > 1n\r\n\t *\r\n\t * web3.eth.getTransactionCount(\r\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\r\n\t *     undefined,\r\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n\t * ).then(console.log);\r\n\t * > 1\r\n\t * ```\r\n\t */\r\n\tpublic async getTransactionCount<\r\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\r\n\t>(\r\n\t\taddress: Address,\r\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getTransactionCount(this, address, blockNumber, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @param options A configuration object used to change the behavior of the `sendTransaction` method.\r\n\t * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\r\n\t * ```ts\r\n\t * const transaction = {\r\n\t *   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\r\n\t *   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\r\n\t *   value: '0x1'\r\n\t * }\r\n\t *\r\n\t * const transactionHash = await web3.eth.sendTransaction(transaction);\r\n\t * console.log(transactionHash);\r\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\r\n\t *\r\n\t * web3.eth.sendTransaction(transaction).then(console.log);\r\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\r\n\t *\r\n\t * web3.eth.sendTransaction(transaction).catch(console.log);\r\n\t * > <Some TransactionError>\r\n\t *\r\n\t * // Example using options.ignoreGasPricing = true\r\n\t * web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);\r\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\r\n\t * ```\r\n\t *\r\n\t *\r\n\t * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\r\n\t * - `sending`\r\n\t * ```ts\r\n\t * web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\r\n\t * > {\r\n\t *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\r\n\t *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\r\n\t *    value: '0x1',\r\n\t *    gasPrice: '0x77359400',\r\n\t *    maxPriorityFeePerGas: undefined,\r\n\t *    maxFeePerGas: undefined\r\n\t * }\r\n\t * ```\r\n\t * - `sent`\r\n\t * ```ts\r\n\t * web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));\r\n\t * > {\r\n\t *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\r\n\t *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\r\n\t *    value: '0x1',\r\n\t *    gasPrice: '0x77359400',\r\n\t *    maxPriorityFeePerGas: undefined,\r\n\t *    maxFeePerGas: undefined\r\n\t * }\r\n\t * ```\r\n\t * - `transactionHash`\r\n\t * ```ts\r\n\t * web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));\r\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\r\n\t * ```\r\n\t * - `receipt`\r\n\t * ```ts\r\n\t * web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));\r\n\t * > {\r\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\r\n\t *      transactionIndex: 0n,\r\n\t *      blockNumber: 2n,\r\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\r\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *      cumulativeGasUsed: 21000n,\r\n\t *      gasUsed: 21000n,\r\n\t *      logs: [],\r\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n\t *      status: 1n,\r\n\t *      effectiveGasPrice: 2000000000n,\r\n\t *      type: 0n\r\n\t * }\r\n\t * ```\r\n\t * - `confirmation`\r\n\t * ```ts\r\n\t * web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));\r\n\t * > {\r\n\t *     confirmations: 1n,\r\n\t *     receipt: {\r\n\t *         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',\r\n\t *         transactionIndex: 0n,\r\n\t *         blockNumber: 5n,\r\n\t *         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',\r\n\t *         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\r\n\t *         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\r\n\t *         cumulativeGasUsed: 21000n,\r\n\t *         gasUsed: 21000n,\r\n\t *         logs: [],\r\n\t *         logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n\t *         status: 1n,\r\n\t *         effectiveGasPrice: 2000000000n,\r\n\t *         type: 0n\r\n\t *     },\r\n\t *     latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'\r\n\t * }\r\n\t * ```\r\n\t * - `error`\r\n\t * ```ts\r\n\t * web3.eth.sendTransaction(transaction).on('error', error => console.log);\r\n\t * > <Some TransactionError>\r\n\t * ```\r\n\t */\r\n\tpublic sendTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\ttransaction:\r\n\t\t\t| Transaction\r\n\t\t\t| TransactionWithFromLocalWalletIndex\r\n\t\t\t| TransactionWithToLocalWalletIndex\r\n\t\t\t| TransactionWithFromAndToLocalWalletIndex,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t\toptions?: SendTransactionOptions,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.sendTransaction(this, transaction, returnFormat, options);\r\n\t}\r\n\r\n\t/**\r\n\t * @param transaction Signed transaction in one of the valid {@link Bytes} format.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\r\n\t * ```ts\r\n\t * const signedTransaction = \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\r\n\t *\r\n\t * const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);\r\n\t * console.log(transactionHash);\r\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\r\n\t *\r\n\t * web3.eth.sendSignedTransaction(signedTransaction).then(console.log);\r\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\r\n\t *\r\n\t * web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);\r\n\t * > <Some TransactionError>\r\n\t * ```\r\n\t *\r\n\t *\r\n\t * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\r\n\t * - `sending`\r\n\t * ```ts\r\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\r\n\t * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\r\n\t * ```\r\n\t * - `sent`\r\n\t * ```ts\r\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));\r\n\t * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\r\n\t * ```\r\n\t * - `transactionHash`\r\n\t * ```ts\r\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));\r\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\r\n\t * ```\r\n\t * - `receipt`\r\n\t * ```ts\r\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));\r\n\t * > {\r\n\t *      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\r\n\t *      blockNumber: 1n,\r\n\t *      cumulativeGasUsed: 21000n,\r\n\t *      effectiveGasPrice: 1000000001n,\r\n\t *      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n\t *      gasUsed: 21000n,\r\n\t *      logs: [],\r\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n\t *      status: 1n,\r\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n\t *      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\r\n\t *      transactionIndex: 0n,\r\n\t *      type: 0n\r\n\t * }\r\n\t * ```\r\n\t * - `confirmation`\r\n\t * ```ts\r\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));\r\n\t * > {\r\n\t *     confirmations: 1n,\r\n\t *     receipt: {\r\n\t *          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\r\n\t *          blockNumber: 1n,\r\n\t *          cumulativeGasUsed: 21000n,\r\n\t *          effectiveGasPrice: 1000000001n,\r\n\t *          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n\t *          gasUsed: 21000n,\r\n\t *          logs: [],\r\n\t *          logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n\t *          status: 1n,\r\n\t *          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n\t *          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\r\n\t *          transactionIndex: 0n,\r\n\t *          type: 0n\r\n\t *     },\r\n\t *     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'\r\n\t * }\r\n\t * ```\r\n\t * - `error`\r\n\t * ```ts\r\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));\r\n\t * > <Some TransactionError>\r\n\t * ```\r\n\t */\r\n\tpublic sendSignedTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\ttransaction: Bytes,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t\toptions?: SendTransactionOptions,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.sendSignedTransaction(this, transaction, returnFormat, options);\r\n\t}\r\n\r\n\t/**\r\n\t * @param message Data to sign in one of the valid {@link Bytes} format.\r\n\t * @param address Address to sign data with, can be an address or the index of a local wallet.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns The signed `message`.\r\n\t *\r\n\t * ```ts\r\n\t * // Using an unlocked account managed by connected RPC client\r\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\").then(console.log);\r\n\t * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\r\n\t *\r\n\t * // Using an unlocked account managed by connected RPC client\r\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);\r\n\t * > Uint8Array(65) [\r\n\t *    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,\r\n\t *    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,\r\n\t *   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,\r\n\t *    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,\r\n\t *    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,\r\n\t *   206, 115, 116, 101, 197, 207, 208,  75, 228,   0\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * // Using an indexed account managed by local Web3 wallet\r\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", 0).then(console.log);\r\n\t * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\r\n\t */\r\n\tpublic async sign<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\tmessage: Bytes,\r\n\t\taddress: Address,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.sign(this, message, address, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * @param transaction The transaction object to sign.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\r\n\t * @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\r\n\t *\r\n\t * ```ts\r\n\t * const transaction = {\r\n\t *      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\r\n\t *      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\r\n\t *      value: '0x1',\r\n\t *      gas: '21000',\r\n\t *      gasPrice: await web3Eth.getGasPrice(),\r\n\t *      nonce: '0x1',\r\n\t *      type: '0x0'\r\n\t * }\r\n\t *\r\n\t * web3.eth.signTransaction(transaction).then(console.log);\r\n\t * > {\r\n\t *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\r\n\t *   tx: {\r\n\t *      type: 0n,\r\n\t *      nonce: 1n,\r\n\t *      gasPrice: 1000000001n,\r\n\t *      gas: 21000n,\r\n\t *      value: 1n,\r\n\t *      v: 2710n,\r\n\t *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\r\n\t *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\r\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n\t *      data: '0x'\r\n\t *   }\r\n\t * }\r\n\t *\r\n\t * web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\r\n\t * > {\r\n\t *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\r\n\t *   tx: {\r\n\t *      type: 0,\r\n\t *      nonce: 1,\r\n\t *      gasPrice: 1000000001,\r\n\t *      gas: 21000,\r\n\t *      value: 1,\r\n\t *      v: 2710,\r\n\t *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\r\n\t *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\r\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\r\n\t *      data: '0x'\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tpublic async signTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\ttransaction: Transaction,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.signTransaction(this, transaction, returnFormat);\r\n\t}\r\n\r\n\t// TODO Decide what to do with transaction.to\r\n\t// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\r\n\t/**\r\n\t * Executes a message call within the EVM without creating a transaction.\r\n\t * It does not publish anything to the blockchain and does not consume any gas.\r\n\t *\r\n\t * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.\r\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n\t * @returns The returned data of the call, e.g. a smart contract function's return value.\r\n\t */\r\n\tpublic async call<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\ttransaction: TransactionCall,\r\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.call(this, transaction, blockNumber, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.\r\n\t * The transaction will not be added to the blockchain, and actual gas usage can vary when interacting\r\n\t * with a contract as a result of updating the contract's state.\r\n\t *\r\n\t * @param transaction The {@link Transaction} object to estimate the gas for.\r\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n\t * @returns The used gas for the simulated transaction execution.\r\n\t *\r\n\t * ```ts\r\n\t * const transaction = {\r\n\t *       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\r\n\t *       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\r\n\t *       value: '0x1',\r\n\t *       nonce: '0x1',\r\n\t *       type: '0x0'\r\n\t * }\r\n\t *\r\n\t * web3.eth.estimateGas(transaction).then(console.log);\r\n\t * > 21000n\r\n\t *\r\n\t * web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\r\n\t * > 21000\r\n\t * ```\r\n\t */\r\n\tpublic async estimateGas<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\ttransaction: Transaction,\r\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.estimateGas(this, transaction, blockNumber, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets past logs, matching the provided `filter`.\r\n\t *\r\n\t * @param filter A {@link Filter} object containing the properties for the desired logs.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n\t * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getPastLogs({\r\n\t *      address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\r\n\t *      topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\r\n\t *  }).then(console.log);\r\n\t * > [{\r\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\r\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\r\n\t *       logIndex: 0n,\r\n\t *       transactionIndex: 0n,\r\n\t *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\r\n\t *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\r\n\t *       blockNumber: 1234n,\r\n\t *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\r\n\t *   },\r\n\t *   {...}]\r\n\t *\r\n\t * web3.eth.getPastLogs(\r\n\t *     {\r\n\t *       address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\r\n\t *       topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\r\n\t *     },\r\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n\t * ).then(console.log);\r\n\t * > [{\r\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\r\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\r\n\t *       logIndex: 0,\r\n\t *       transactionIndex: 0,\r\n\t *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\r\n\t *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\r\n\t *       blockNumber: 1234,\r\n\t *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\r\n\t *   },\r\n\t *   {...}]\r\n\t * ```\r\n\t */\r\n\tpublic async getPastLogs<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\tfilter: Filter,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getLogs(this, filter, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').\r\n\t *\r\n\t * @returns The mining work as an array of strings with the following structure:\r\n\t *\r\n\t * String 32 Bytes - at index 0: current block header pow-hash\r\n\t * String 32 Bytes - at index 1: the seed hash used for the DAG.\r\n\t * String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getWork().then(console.log);\r\n\t * > [\r\n\t *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\r\n\t *     \"0x5EED00000000000000000000000000005EED0000000000000000000000000000\",\r\n\t *     \"0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000\"\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic async getWork() {\r\n\t\treturn ethRpcMethods.getWork(this.requestManager);\r\n\t}\r\n\r\n\t/**\r\n\t * Used for submitting a proof-of-work solution.\r\n\t *\r\n\t * @param nonce The nonce found (8 bytes).\r\n\t * @param hash  The header’s pow-hash (32 bytes).\r\n\t * @param digest The mix digest (32 bytes).\r\n\t * @returns Returns `true` if the provided solution is valid, otherwise `false`.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.submitWork([\r\n\t *     \"0x0000000000000001\",\r\n\t *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\r\n\t *     \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\"\r\n\t * ]).then(console.log);\r\n\t * > true\r\n\t * ```\r\n\t */\r\n\tpublic async submitWork(\r\n\t\tnonce: HexString8Bytes,\r\n\t\thash: HexString32Bytes,\r\n\t\tdigest: HexString32Bytes,\r\n\t) {\r\n\t\treturn ethRpcMethods.submitWork(this.requestManager, nonce, hash, digest);\r\n\t}\r\n\r\n\t// TODO - Format addresses\r\n\t/**\r\n\t * This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)\r\n\t * This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.\r\n\t * It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).\r\n\t * For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.\r\n\t *\r\n\t * @returns An array of enabled accounts.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.requestAccounts().then(console.log);\r\n\t * > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']\r\n\t * ```\r\n\t */\r\n\tpublic async requestAccounts() {\r\n\t\treturn ethRpcMethods.requestAccounts(this.requestManager);\r\n\t}\r\n\r\n\t/**\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n\t * @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getChainId().then(console.log);\r\n\t * > 61n\r\n\t *\r\n\t * web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\r\n\t * > 61\r\n\t * ```\r\n\t */\r\n\tpublic async getChainId<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getChainId(this, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns The current client version.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getNodeInfo().then(console.log);\r\n\t * > \"Mist/v0.9.3/darwin/go1.4.1\"\r\n\t * ```\r\n\t */\r\n\tpublic async getNodeInfo() {\r\n\t\treturn ethRpcMethods.getNodeInfo(this.requestManager);\r\n\t}\r\n\r\n\t/**\r\n\t * @param address The Address of the account or contract.\r\n\t * @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.\r\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n\t * @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getProof(\r\n\t *     \"0x1234567890123456789012345678901234567890\",\r\n\t *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\r\n\t *     \"latest\"\r\n\t * ).then(console.log);\r\n\t * > {\r\n\t *     \"address\": \"0x1234567890123456789012345678901234567890\",\r\n\t *     \"accountProof\": [\r\n\t *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\r\n\t *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\r\n\t *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\r\n\t *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\r\n\t *     ],\r\n\t *     \"balance\": 0n,\r\n\t *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\r\n\t *     \"nonce\": 0n,\r\n\t *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n\t *     \"storageProof\": [\r\n\t *         {\r\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n\t *             \"value\": 0n,\r\n\t *             \"proof\": []\r\n\t *         },\r\n\t *         {\r\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\r\n\t *             \"value\": 0n,\r\n\t *             \"proof\": []\r\n\t *         }\r\n\t *     ]\r\n\t * }\r\n\t *\r\n\t * web3.eth.getProof(\r\n\t *     \"0x1234567890123456789012345678901234567890\",\r\n\t *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\r\n\t *     undefined,\r\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\r\n\t * ).then(console.log);\r\n\t * > {\r\n\t *     \"address\": \"0x1234567890123456789012345678901234567890\",\r\n\t *     \"accountProof\": [\r\n\t *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\r\n\t *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\r\n\t *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\r\n\t *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\r\n\t *     ],\r\n\t *     \"balance\": 0,\r\n\t *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\r\n\t *     \"nonce\": 0,\r\n\t *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\r\n\t *     \"storageProof\": [\r\n\t *         {\r\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n\t *             \"value\": 0,\r\n\t *             \"proof\": []\r\n\t *         },\r\n\t *         {\r\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\r\n\t *             \"value\": 0,\r\n\t *             \"proof\": []\r\n\t *         }\r\n\t *     ]\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tpublic async getProof<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\taddress: Address,\r\n\t\tstorageKeys: Bytes[],\r\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getProof(this, address, storageKeys, blockNumber, returnFormat);\r\n\t}\r\n\r\n\t// TODO Throwing an error with Geth, but not Infura\r\n\t// TODO gasUsedRatio and reward not formatting\r\n\t/**\r\n\t * @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\r\n\t * @param newestBlock Highest number block of the requested range.\r\n\t * @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n\t * @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.\r\n\t * The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.\r\n\t * For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);\r\n\t * > {\r\n\t *     baseFeePerGas: [\r\n\t *         22983878621n,\r\n\t *         21417903463n,\r\n\t *         19989260230n,\r\n\t *         17770954829n,\r\n\t *         18850641304n\r\n\t *     ],\r\n\t *     gasUsedRatio: [\r\n\t *         0.22746546666666667,\r\n\t *         0.2331871,\r\n\t *         0.05610054885262125,\r\n\t *         0.7430227268212117\r\n\t *     ],\r\n\t *     oldestBlock: 15216343n,\r\n\t *     reward: [\r\n\t *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\r\n\t *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\r\n\t *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\r\n\t *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\r\n\t *     ]\r\n\t * }\r\n\t *\r\n\t * web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\r\n\t * > {\r\n\t *     baseFeePerGas: [\r\n\t *         22983878621,\r\n\t *         21417903463,\r\n\t *         19989260230,\r\n\t *         17770954829,\r\n\t *         18850641304\r\n\t *     ],\r\n\t *     gasUsedRatio: [\r\n\t *         0.22746546666666667,\r\n\t *         0.2331871,\r\n\t *         0.05610054885262125,\r\n\t *         0.7430227268212117\r\n\t *     ],\r\n\t *     oldestBlock: 15216343,\r\n\t *     reward: [\r\n\t *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\r\n\t *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\r\n\t *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\r\n\t *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\r\n\t *     ]\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tpublic async getFeeHistory<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\tblockCount: Numbers,\r\n\t\tnewestBlock: BlockNumberOrTag = this.defaultBlock,\r\n\t\trewardPercentiles: Numbers[],\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.getFeeHistory(\r\n\t\t\tthis,\r\n\t\t\tblockCount,\r\n\t\t\tnewestBlock,\r\n\t\t\trewardPercentiles,\r\n\t\t\treturnFormat,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * This method generates an access list for a transaction.\r\n\t *\r\n\t * @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.\r\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\r\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.\r\n\t * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\r\n\t * @example\r\n\t * ```ts\r\n\t * web3.eth.createAccessList({\r\n\t * from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',\r\n\t * data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',\r\n\t * gasPrice: '0x3b9aca00',\r\n\t * gas: '0x3d0900',\r\n\t * to: '0x940b25304947ae863568B3804434EC77E2160b87'\r\n\t * })\r\n\t * .then(console.log);\r\n\t *\r\n\t * > {\r\n\t *  \"accessList\": [\r\n\t *     {\r\n\t *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\r\n\t *       \"storageKeys\": [\r\n\t *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\r\n\t *       ]\r\n\t *     }\r\n\t *   ],\r\n\t *   \"gasUsed\": \"0x7671\"\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tpublic async createAccessList<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\r\n\t\ttransaction: TransactionForAccessList,\r\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\r\n\t\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n\t) {\r\n\t\treturn rpcMethodsWrappers.createAccessList(this, transaction, blockNumber, returnFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Lets you subscribe to specific events in the blockchain.\r\n\t *\r\n\t * @param name - The subscription you want to subscribe to.\r\n\t * @param args - Optional additional parameters, depending on the subscription type.\r\n\t * @returns A subscription object of type {@link RegisteredSubscription}. The object contains:\r\n\t *  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.\r\n\t *  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.\r\n\t *  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.\r\n\t *  - subscription.args: The subscription arguments, used when re-subscribing.\r\n\t *\r\n\t *\r\n\t * You can use the subscription object to listen on:\r\n\t *\r\n\t * - on(\"data\") - Fires on each incoming log with the log object as argument.\r\n\t * - on(\"changed\") - Fires on each log which was removed from the blockchain. The log will have the additional property \"removed: true\".\r\n\t * - on(\"error\") - Fires when an error in the subscription occurs.\r\n\t * - on(\"connected\") - Fires once after the subscription successfully connected. Returns the subscription id.\r\n\t *\r\n\t * @example **Subscribe to Smart Contract events**\r\n\t * ```ts\r\n\t * // Subscribe to `logs`\r\n\t * const logSubscription = web3.eth.subscribe('logs', {\r\n\t *     address: '0x1234567890123456789012345678901234567890',\r\n\t *     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']\r\n\t * });\r\n\t * logSubscription.on('data', (data: any) => console.log(data));\r\n\t * logSubscription.on('error', (error: any) => console.log(error));\r\n\t *\r\n\t * ```\r\n\t *\r\n\t * @example **Subscribe to new block headers**\r\n\t * ```ts\r\n\t * // Subscribe to `newBlockHeaders`\r\n\t * const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');\r\n\t *\r\n\t * newBlocksSubscription.on('data', async blockhead => {\r\n\t * \tconsole.log('New block header: ', blockhead);\r\n\t *\r\n\t * \t// You do not need the next line, if you like to keep notified for every new block\r\n\t * \tawait newBlocksSubscription.unsubscribe();\r\n\t * \tconsole.log('Unsubscribed from new block headers.');\r\n\t * });\r\n\t * newBlocksSubscription.on('error', error =>\r\n\t * \tconsole.log('Error when subscribing to New block header: ', error),\r\n\t * );\r\n\t * ```\r\n\t */\r\n\tpublic async subscribe<\r\n\t\tT extends keyof RegisteredSubscription,\r\n\t\tReturnType extends DataFormat = DataFormat,\r\n\t>(\r\n\t\tname: T,\r\n\t\targs?: ConstructorParameters<RegisteredSubscription[T]>[0],\r\n\t\treturnFormat: ReturnType = DEFAULT_RETURN_FORMAT as ReturnType,\r\n\t): Promise<InstanceType<RegisteredSubscription[T]>> {\r\n\t\tconst subscription = await this.subscriptionManager?.subscribe(name, args, returnFormat);\r\n\t\tif (\r\n\t\t\tsubscription instanceof LogsSubscription &&\r\n\t\t\tname === 'logs' &&\r\n\t\t\ttypeof args === 'object' &&\r\n\t\t\t!isNullish(args.fromBlock) &&\r\n\t\t\tNumber.isFinite(Number(args.fromBlock))\r\n\t\t) {\r\n\t\t\tsetImmediate(() => {\r\n\t\t\t\tthis.getPastLogs(args)\r\n\t\t\t\t\t.then(logs => {\r\n\t\t\t\t\t\tfor (const log of logs) {\r\n\t\t\t\t\t\t\tsubscription._processSubscriptionResult(log as LogsOutput);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(e => {\r\n\t\t\t\t\t\tsubscription._processSubscriptionError(e as Error);\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn subscription;\r\n\t}\r\n\r\n\tprivate static shouldClearSubscription({ sub }: { sub: unknown }): boolean {\r\n\t\treturn !(sub instanceof SyncingSubscription);\r\n\t}\r\n\r\n\t/**\r\n\t * Resets subscriptions.\r\n\t *\r\n\t * @param notClearSyncing If `true` it keeps the `syncing` subscription.\r\n\t * @returns A promise to an array of subscription ids that were cleared.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.clearSubscriptions().then(console.log);\r\n\t * > [...] An array of subscription ids that were cleared\r\n\t * ```\r\n\t */\r\n\tpublic clearSubscriptions(notClearSyncing = false): Promise<string[]> | undefined {\r\n\t\treturn this.subscriptionManager?.unsubscribe(\r\n\t\t\t// eslint-disable-next-line\r\n\t\t\tnotClearSyncing ? Web3Eth.shouldClearSubscription : undefined,\r\n\t\t);\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}