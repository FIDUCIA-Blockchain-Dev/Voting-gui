{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { Web3ContractError } from 'web3-errors';\nimport { isNullish, mergeDeep, toHex } from 'web3-utils';\nimport { encodeMethodABI } from './encoding.js';\nexport const getSendTxParams = _ref => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref;\n  var _a, _b;\n  const deploymentCall = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input;\n  if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  if (!txParams.input || abi.type === 'constructor') {\n    txParams = Object.assign(Object.assign({}, txParams), {\n      input: encodeMethodABI(abi, params, txParams.input)\n    });\n  }\n  return txParams;\n};\nexport const getEthTxCallParams = _ref2 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref2;\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    input: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined)\n  });\n  return txParams;\n};\nexport const getEstimateGasParams = _ref3 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref3;\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input\n  }, options);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    input: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined)\n  });\n  return txParams;\n};\nexport const isContractInitOptions = options => typeof options === 'object' && !isNullish(options) && ['input', 'data', 'from', 'gas', 'gasPrice', 'gasLimit', 'address', 'jsonInterface', 'syncWithContext'].some(key => key in options);\nexport const isWeb3ContractContext = options => typeof options === 'object' && !isNullish(options) && !isContractInitOptions(options);\nexport const getCreateAccessListParams = _ref4 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref4;\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  if (!txParams.input || abi.type === 'constructor') {\n    txParams = Object.assign(Object.assign({}, txParams), {\n      input: encodeMethodABI(abi, params, txParams.input)\n    });\n  }\n  return txParams;\n};","map":{"version":3,"names":["Web3ContractError","isNullish","mergeDeep","toHex","encodeMethodABI","getSendTxParams","_ref","abi","params","options","contractOptions","deploymentCall","_b","_a","input","data","to","address","from","txParams","gas","gasPrice","maxPriorityFeePerGas","maxFeePerGas","type","Object","assign","getEthTxCallParams","_ref2","undefined","getEstimateGasParams","_ref3","isContractInitOptions","some","key","isWeb3ContractContext","getCreateAccessListParams","_ref4"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-contract\\src\\utils.ts"],"sourcesContent":["ï»¿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { Web3ContractError } from 'web3-errors';\r\nimport {\r\n\tTransactionForAccessList,\r\n\tAbiFunctionFragment,\r\n\tTransactionWithSenderAPI,\r\n\tTransactionCall,\r\n\tHexString,\r\n\tAddress,\r\n\tNonPayableCallOptions,\r\n\tPayableCallOptions,\r\n\tContractInitOptions,\r\n} from 'web3-types';\r\nimport { isNullish, mergeDeep, toHex } from 'web3-utils';\r\nimport { encodeMethodABI } from './encoding.js';\r\nimport { ContractOptions, Web3ContractContext } from './types.js';\r\n\r\nexport const getSendTxParams = ({\r\n\tabi,\r\n\tparams,\r\n\toptions,\r\n\tcontractOptions,\r\n}: {\r\n\tabi: AbiFunctionFragment;\r\n\tparams: unknown[];\r\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\r\n\t\tinput?: HexString;\r\n\t\tdata?: HexString;\r\n\t\tto?: Address;\r\n\t};\r\n\tcontractOptions: ContractOptions;\r\n}): TransactionCall => {\r\n\tconst deploymentCall = options?.input ?? options?.data ?? contractOptions.input;\r\n\r\n\tif (!deploymentCall && !options?.to && !contractOptions.address) {\r\n\t\tthrow new Web3ContractError('Contract address not specified');\r\n\t}\r\n\r\n\tif (!options?.from && !contractOptions.from) {\r\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\r\n\t}\r\n\r\n\tlet txParams = mergeDeep(\r\n\t\t{\r\n\t\t\tto: contractOptions.address,\r\n\t\t\tgas: contractOptions.gas,\r\n\t\t\tgasPrice: contractOptions.gasPrice,\r\n\t\t\tfrom: contractOptions.from,\r\n\t\t\tinput: contractOptions.input,\r\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\r\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\r\n\t\t},\r\n\t\toptions as unknown as Record<string, unknown>,\r\n\t) as unknown as TransactionCall;\r\n\r\n\tif (!txParams.input || abi.type === 'constructor') {\r\n\t\ttxParams = {\r\n\t\t\t...txParams,\r\n\t\t\tinput: encodeMethodABI(abi, params, txParams.input as HexString),\r\n\t\t};\r\n\t}\r\n\r\n\treturn txParams;\r\n};\r\n\r\nexport const getEthTxCallParams = ({\r\n\tabi,\r\n\tparams,\r\n\toptions,\r\n\tcontractOptions,\r\n}: {\r\n\tabi: AbiFunctionFragment;\r\n\tparams: unknown[];\r\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & { to?: Address };\r\n\tcontractOptions: ContractOptions;\r\n}): TransactionCall => {\r\n\tif (!options?.to && !contractOptions.address) {\r\n\t\tthrow new Web3ContractError('Contract address not specified');\r\n\t}\r\n\r\n\tlet txParams = mergeDeep(\r\n\t\t{\r\n\t\t\tto: contractOptions.address,\r\n\t\t\tgas: contractOptions.gas,\r\n\t\t\tgasPrice: contractOptions.gasPrice,\r\n\t\t\tfrom: contractOptions.from,\r\n\t\t\tinput: contractOptions.input,\r\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\r\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\r\n\t\t},\r\n\t\toptions as unknown as Record<string, unknown>,\r\n\t) as unknown as TransactionCall;\r\n\r\n\ttxParams = {\r\n\t\t...txParams,\r\n\t\tinput: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined),\r\n\t};\r\n\r\n\treturn txParams;\r\n};\r\n\r\nexport const getEstimateGasParams = ({\r\n\tabi,\r\n\tparams,\r\n\toptions,\r\n\tcontractOptions,\r\n}: {\r\n\tabi: AbiFunctionFragment;\r\n\tparams: unknown[];\r\n\toptions?: PayableCallOptions | NonPayableCallOptions;\r\n\tcontractOptions: ContractOptions;\r\n}): Partial<TransactionWithSenderAPI> => {\r\n\tlet txParams = mergeDeep(\r\n\t\t{\r\n\t\t\tto: contractOptions.address,\r\n\t\t\tgas: contractOptions.gas,\r\n\t\t\tgasPrice: contractOptions.gasPrice,\r\n\t\t\tfrom: contractOptions.from,\r\n\t\t\tinput: contractOptions.input,\r\n\t\t},\r\n\t\toptions as unknown as Record<string, unknown>,\r\n\t) as unknown as TransactionCall;\r\n\r\n\ttxParams = {\r\n\t\t...txParams,\r\n\t\tinput: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined),\r\n\t};\r\n\r\n\treturn txParams as TransactionWithSenderAPI;\r\n};\r\n\r\nexport const isContractInitOptions = (options: unknown): options is ContractInitOptions =>\r\n\ttypeof options === 'object' &&\r\n\t!isNullish(options) &&\r\n\t[\r\n\t\t'input',\r\n\t\t'data',\r\n\t\t'from',\r\n\t\t'gas',\r\n\t\t'gasPrice',\r\n\t\t'gasLimit',\r\n\t\t'address',\r\n\t\t'jsonInterface',\r\n\t\t'syncWithContext',\r\n\t].some(key => key in options);\r\n\r\nexport const isWeb3ContractContext = (options: unknown): options is Web3ContractContext =>\r\n\ttypeof options === 'object' && !isNullish(options) && !isContractInitOptions(options);\r\n\r\nexport const getCreateAccessListParams = ({\r\n\tabi,\r\n\tparams,\r\n\toptions,\r\n\tcontractOptions,\r\n}: {\r\n\tabi: AbiFunctionFragment;\r\n\tparams: unknown[];\r\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & { to?: Address };\r\n\tcontractOptions: ContractOptions;\r\n}): TransactionForAccessList => {\r\n\tif (!options?.to && !contractOptions.address) {\r\n\t\tthrow new Web3ContractError('Contract address not specified');\r\n\t}\r\n\r\n\tif (!options?.from && !contractOptions.from) {\r\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\r\n\t}\r\n\r\n\tlet txParams = mergeDeep(\r\n\t\t{\r\n\t\t\tto: contractOptions.address,\r\n\t\t\tgas: contractOptions.gas,\r\n\t\t\tgasPrice: contractOptions.gasPrice,\r\n\t\t\tfrom: contractOptions.from,\r\n\t\t\tinput: contractOptions.input,\r\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\r\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\r\n\t\t},\r\n\t\toptions as unknown as Record<string, unknown>,\r\n\t) as unknown as TransactionForAccessList;\r\n\r\n\tif (!txParams.input || abi.type === 'constructor') {\r\n\t\ttxParams = {\r\n\t\t\t...txParams,\r\n\t\t\tinput: encodeMethodABI(abi, params, txParams.input as HexString),\r\n\t\t};\r\n\t}\r\n\r\n\treturn txParams;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}