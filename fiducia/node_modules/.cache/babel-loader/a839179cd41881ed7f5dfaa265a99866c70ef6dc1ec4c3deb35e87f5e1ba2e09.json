{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { sha3Raw } from 'web3-utils';\nimport { AbiError } from 'web3-errors';\nimport { jsonInterfaceMethodToString, isAbiErrorFragment } from '../utils.js';\n/**\r\n * Encodes the error name to its ABI signature, which are the sha3 hash of the error name including input types.\r\n */\nexport const encodeErrorSignature = functionName => {\n  if (typeof functionName !== 'string' && !isAbiErrorFragment(functionName)) {\n    throw new AbiError('Invalid parameter value in encodeErrorSignature');\n  }\n  let name;\n  if (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {\n    name = jsonInterfaceMethodToString(functionName);\n  } else {\n    name = functionName;\n  }\n  return sha3Raw(name);\n};","map":{"version":3,"names":["sha3Raw","AbiError","jsonInterfaceMethodToString","isAbiErrorFragment","encodeErrorSignature","functionName","name"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-abi\\src\\api\\errors_api.ts"],"sourcesContent":["ï»¿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { sha3Raw } from 'web3-utils';\r\nimport { AbiError } from 'web3-errors';\r\nimport { AbiErrorFragment } from 'web3-types';\r\nimport { jsonInterfaceMethodToString, isAbiErrorFragment } from '../utils.js';\r\n\r\n/**\r\n * Encodes the error name to its ABI signature, which are the sha3 hash of the error name including input types.\r\n */\r\nexport const encodeErrorSignature = (functionName: string | AbiErrorFragment): string => {\r\n\tif (typeof functionName !== 'string' && !isAbiErrorFragment(functionName)) {\r\n\t\tthrow new AbiError('Invalid parameter value in encodeErrorSignature');\r\n\t}\r\n\r\n\tlet name: string;\r\n\r\n\tif (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {\r\n\t\tname = jsonInterfaceMethodToString(functionName);\r\n\t} else {\r\n\t\tname = functionName;\r\n\t}\r\n\r\n\treturn sha3Raw(name);\r\n};\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,QAAQ,QAAQ,aAAa;AAEtC,SAASC,2BAA2B,EAAEC,kBAAkB,QAAQ,aAAa;AAE7E;;;AAGA,OAAO,MAAMC,oBAAoB,GAAIC,YAAuC,IAAY;EACvF,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAAI,CAACF,kBAAkB,CAACE,YAAY,CAAC,EAAE;IAC1E,MAAM,IAAIJ,QAAQ,CAAC,iDAAiD,CAAC;;EAGtE,IAAIK,IAAY;EAEhB,IAAID,YAAY,KAAK,OAAOA,YAAY,KAAK,UAAU,IAAI,OAAOA,YAAY,KAAK,QAAQ,CAAC,EAAE;IAC7FC,IAAI,GAAGJ,2BAA2B,CAACG,YAAY,CAAC;GAChD,MAAM;IACNC,IAAI,GAAGD,YAAY;;EAGpB,OAAOL,OAAO,CAACM,IAAI,CAAC;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}