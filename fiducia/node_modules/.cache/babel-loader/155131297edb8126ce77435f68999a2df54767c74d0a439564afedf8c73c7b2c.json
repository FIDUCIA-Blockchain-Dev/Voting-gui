{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lakka\\\\OneDrive - Manipal Academy of Higher Education\\\\FIDUCIA\\\\voting-gui\\\\fiducia\\\\src\\\\components\\\\voter\\\\answer_feedback.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { ABI, address } from '../config_feedback.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      no_of_q: 0,\n      questions_array: [],\n      type_of_ans: '',\n      option_array: []\n    };\n  }\n  componentDidMount() {\n    this.loadBlockchainData();\n  }\n  async loadBlockchainData() {\n    try {\n      // Check if Web3 provider is available from Metamask or similar extension\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n\n        // Request user permission to connect\n        await window.ethereum.enable();\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          account: accounts[0]\n        });\n        const scontract = new web3.eth.Contract(ABI, address);\n        this.setState({\n          scontract\n        }, async () => {\n          // First, get the number of questions\n          await this.no_of_questions();\n          // Then, fetch the questions\n          await this.questions();\n          await this.type_of_answers();\n          await this.options();\n          console.log('type of answers:' + this.state.type_of_ans);\n          console.log('option array:' + JSON.stringify(this.state.option_array));\n        });\n      } else {\n        console.log('Please install MetaMask or use a compatible browser extension.');\n      }\n    } catch (error) {\n      console.error('Error loading blockchain data:', error);\n    }\n  }\n  async no_of_questions() {\n    const {\n      scontract\n    } = this.state;\n    const a = await scontract.methods.no_of_q().call();\n    this.setState({\n      no_of_q: a\n    });\n  }\n  async questions() {\n    const {\n      scontract,\n      no_of_q\n    } = this.state;\n    const q = [];\n    for (let i = 0; i < Number(no_of_q); i++) {\n      const b = await scontract.methods.get_Questions(i).call();\n      q.push(b);\n    }\n    this.setState({\n      questions_array: q\n    });\n  }\n  async type_of_answers() {\n    const {\n      scontract\n    } = this.state;\n    const result = await scontract.methods.get_type(0).call();\n    this.setState({\n      type_of_ans: result.toString()\n    });\n  }\n  async options() {\n    // Your options function code here\n    const {\n      scontract\n    } = this.state;\n    let d = Array.from({\n      length: Number(this.state.no_of_q)\n    }, () => Array.from({\n      length: 4\n    }, () => ''));\n    for (let i = 0; i < Number(this.state.no_of_q); i++) {\n      let c = [];\n      c = await scontract.methods.get_options(i).call();\n      for (let j = 0; j < 4; j++) {\n        d[i][j] = c[j];\n      }\n    }\n    this.setState({\n      option_array: d\n    });\n  }\n  render() {\n    const {\n      questions_array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Answer feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: questions_array.map((name, index) => /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [index + 1, \":\", name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Web3","ABI","address","jsxDEV","_jsxDEV","Fragment","_Fragment","App","constructor","props","state","account","no_of_q","questions_array","type_of_ans","option_array","componentDidMount","loadBlockchainData","window","ethereum","web3","enable","accounts","eth","getAccounts","setState","scontract","Contract","no_of_questions","questions","type_of_answers","options","console","log","JSON","stringify","error","a","methods","call","q","i","Number","b","get_Questions","push","result","get_type","toString","d","Array","from","length","c","get_options","j","render","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","name","index"],"sources":["C:/Users/lakka/OneDrive - Manipal Academy of Higher Education/FIDUCIA/voting-gui/fiducia/src/components/voter/answer_feedback.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\n\r\nimport { ABI, address } from '../config_feedback.js';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      account: '',\r\n      no_of_q: 0,\r\n      questions_array: [],\r\n      type_of_ans: '',\r\n      option_array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadBlockchainData();\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    try {\r\n      // Check if Web3 provider is available from Metamask or similar extension\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n\r\n        // Request user permission to connect\r\n        await window.ethereum.enable();\r\n\r\n        const accounts = await web3.eth.getAccounts();\r\n        this.setState({ account: accounts[0] });\r\n        const scontract = new web3.eth.Contract(ABI, address);\r\n        this.setState({ scontract }, async () => {\r\n          // First, get the number of questions\r\n          await this.no_of_questions();\r\n          // Then, fetch the questions\r\n          await this.questions();\r\n\r\n          await this.type_of_answers();\r\n            await this.options();\r\n          console.log('type of answers:' + this.state.type_of_ans);\r\n          console.log('option array:' + JSON.stringify(this.state.option_array));\r\n        });\r\n      } else {\r\n        console.log('Please install MetaMask or use a compatible browser extension.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading blockchain data:', error);\r\n    }\r\n  }\r\n\r\n  async no_of_questions() {\r\n    const { scontract } = this.state;\r\n    const a = await scontract.methods.no_of_q().call();\r\n    this.setState({ no_of_q: a });\r\n  }\r\n\r\n  async questions() {\r\n    const { scontract, no_of_q } = this.state;\r\n    const q = [];\r\n    for (let i = 0; i < Number(no_of_q); i++) {\r\n      const b = await scontract.methods.get_Questions(i).call();\r\n      q.push(b);\r\n    }\r\n    this.setState({ questions_array: q });\r\n  }\r\n\r\n  async type_of_answers() {\r\n    const { scontract } = this.state;\r\n    const result = await scontract.methods.get_type(0).call();\r\n    this.setState({ type_of_ans: result.toString() });\r\n  }\r\n\r\n  async options() {\r\n    // Your options function code here\r\n    const {scontract} = this.state;\r\n    let d = Array.from({ length: Number(this.state.no_of_q) }, () =>\r\n    Array.from({ length: 4 }, () => '')\r\n  )\r\n    for(let i=0;i<Number(this.state.no_of_q);i++)\r\n    { let c = []\r\n      c = await scontract.methods.get_options(i).call();\r\n      \r\n      for(let j=0;j<4;j++)\r\n      {\r\n        d[i][j] = c[j];\r\n      }\r\n    }\r\n    this.setState({option_array:d})\r\n  }\r\n\r\n  render() {\r\n    const { questions_array } = this.state;\r\n    return (\r\n      <>\r\n        <h3>Answer feedback</h3>\r\n        <div className='container'>\r\n          {questions_array.map((name, index) => (\r\n            <h5 key={index}>{index + 1}:{name}</h5>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}