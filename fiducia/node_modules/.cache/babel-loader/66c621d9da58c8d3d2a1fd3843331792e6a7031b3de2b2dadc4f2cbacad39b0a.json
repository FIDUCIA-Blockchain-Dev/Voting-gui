{"ast":null,"code":"import { InvalidResponseError } from 'web3-errors';\nexport class ChunkResponseParser {\n  constructor(eventEmitter, autoReconnect) {\n    this.eventEmitter = eventEmitter;\n    this.autoReconnect = autoReconnect;\n  }\n  clearQueues() {\n    if (typeof this._clearQueues === 'function') {\n      this._clearQueues();\n    }\n  }\n  onError(clearQueues) {\n    this._clearQueues = clearQueues;\n  }\n  parseResponse(data) {\n    const returnValues = [];\n    // DE-CHUNKER\n    const dechunkedData = data.replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n    .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n    .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n    .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n    .split('|--|');\n    dechunkedData.forEach(_chunkData => {\n      // prepend the last chunk\n      let chunkData = _chunkData;\n      if (this.lastChunk) {\n        chunkData = this.lastChunk + chunkData;\n      }\n      let result;\n      try {\n        result = JSON.parse(chunkData);\n      } catch (e) {\n        this.lastChunk = chunkData;\n        // start timeout to cancel all requests\n        if (this.lastChunkTimeout) {\n          clearTimeout(this.lastChunkTimeout);\n        }\n        this.lastChunkTimeout = setTimeout(() => {\n          if (this.autoReconnect) return;\n          this.clearQueues();\n          this.eventEmitter.emit('error', new InvalidResponseError({\n            id: 1,\n            jsonrpc: '2.0',\n            error: {\n              code: 2,\n              message: 'Chunk timeout'\n            }\n          }));\n        }, 1000 * 15);\n        return;\n      }\n      // cancel timeout and set chunk to null\n      clearTimeout(this.lastChunkTimeout);\n      this.lastChunk = undefined;\n      if (result) returnValues.push(result);\n    });\n    return returnValues;\n  }\n}","map":{"version":3,"names":["InvalidResponseError","ChunkResponseParser","constructor","eventEmitter","autoReconnect","clearQueues","_clearQueues","onError","parseResponse","data","returnValues","dechunkedData","replace","split","forEach","_chunkData","chunkData","lastChunk","result","JSON","parse","e","lastChunkTimeout","clearTimeout","setTimeout","emit","id","jsonrpc","error","code","message","undefined","push"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-utils\\src\\chunk_response_parser.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { JsonRpcResponse } from 'web3-types';\r\nimport { InvalidResponseError } from 'web3-errors';\r\nimport { EventEmitter } from 'events';\r\n\r\nexport class ChunkResponseParser {\r\n\tprivate lastChunk: string | undefined;\r\n\tprivate lastChunkTimeout: NodeJS.Timeout | undefined;\r\n\tprivate _clearQueues: (() => void) | undefined;\r\n\tprivate readonly eventEmitter: EventEmitter;\r\n\tprivate readonly autoReconnect: boolean;\r\n\r\n\tpublic constructor(eventEmitter: EventEmitter, autoReconnect: boolean) {\r\n\t\tthis.eventEmitter = eventEmitter;\r\n\t\tthis.autoReconnect = autoReconnect;\r\n\t}\r\n\tprivate clearQueues(): void {\r\n\t\tif (typeof this._clearQueues === 'function') {\r\n\t\t\tthis._clearQueues();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic onError(clearQueues?: () => void) {\r\n\t\tthis._clearQueues = clearQueues;\r\n\t}\r\n\r\n\tpublic parseResponse(data: string): JsonRpcResponse[] {\r\n\t\tconst returnValues: JsonRpcResponse[] = [];\r\n\r\n\t\t// DE-CHUNKER\r\n\t\tconst dechunkedData = data\r\n\t\t\t.replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\r\n\t\t\t.replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\r\n\t\t\t.replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\r\n\t\t\t.replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\r\n\t\t\t.split('|--|');\r\n\r\n\t\tdechunkedData.forEach(_chunkData => {\r\n\t\t\t// prepend the last chunk\r\n\t\t\tlet chunkData = _chunkData;\r\n\t\t\tif (this.lastChunk) {\r\n\t\t\t\tchunkData = this.lastChunk + chunkData;\r\n\t\t\t}\r\n\r\n\t\t\tlet result;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tresult = JSON.parse(chunkData) as unknown as JsonRpcResponse;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthis.lastChunk = chunkData;\r\n\r\n\t\t\t\t// start timeout to cancel all requests\r\n\t\t\t\tif (this.lastChunkTimeout) {\r\n\t\t\t\t\tclearTimeout(this.lastChunkTimeout);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lastChunkTimeout = setTimeout(() => {\r\n\t\t\t\t\tif (this.autoReconnect) return;\r\n\t\t\t\t\tthis.clearQueues();\r\n\t\t\t\t\tthis.eventEmitter.emit(\r\n\t\t\t\t\t\t'error',\r\n\t\t\t\t\t\tnew InvalidResponseError({\r\n\t\t\t\t\t\t\tid: 1,\r\n\t\t\t\t\t\t\tjsonrpc: '2.0',\r\n\t\t\t\t\t\t\terror: { code: 2, message: 'Chunk timeout' },\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t);\r\n\t\t\t\t}, 1000 * 15);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// cancel timeout and set chunk to null\r\n\t\t\tclearTimeout(this.lastChunkTimeout);\r\n\t\t\tthis.lastChunk = undefined;\r\n\r\n\t\t\tif (result) returnValues.push(result);\r\n\t\t});\r\n\r\n\t\treturn returnValues;\r\n\t}\r\n}\r\n"],"mappings":"AAiBA,SAASA,oBAAoB,QAAQ,aAAa;AAGlD,OAAM,MAAOC,mBAAmB;EAO/BC,YAAmBC,YAA0B,EAAEC,aAAsB;IACpE,IAAI,CAACD,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,aAAa,GAAGA,aAAa;EACnC;EACQC,WAAWA,CAAA;IAClB,IAAI,OAAO,IAAI,CAACC,YAAY,KAAK,UAAU,EAAE;MAC5C,IAAI,CAACA,YAAY,EAAE;;EAErB;EAEOC,OAAOA,CAACF,WAAwB;IACtC,IAAI,CAACC,YAAY,GAAGD,WAAW;EAChC;EAEOG,aAAaA,CAACC,IAAY;IAChC,MAAMC,YAAY,GAAsB,EAAE;IAE1C;IACA,MAAMC,aAAa,GAAGF,IAAI,CACxBG,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IAAA,CAClCA,OAAO,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;IAAA,CACxCA,OAAO,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;IAAA,CACrCA,OAAO,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;IAAA,CACrCC,KAAK,CAAC,MAAM,CAAC;IAEfF,aAAa,CAACG,OAAO,CAACC,UAAU,IAAG;MAClC;MACA,IAAIC,SAAS,GAAGD,UAAU;MAC1B,IAAI,IAAI,CAACE,SAAS,EAAE;QACnBD,SAAS,GAAG,IAAI,CAACC,SAAS,GAAGD,SAAS;;MAGvC,IAAIE,MAAM;MAEV,IAAI;QACHA,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,SAAS,CAA+B;OAC5D,CAAC,OAAOK,CAAC,EAAE;QACX,IAAI,CAACJ,SAAS,GAAGD,SAAS;QAE1B;QACA,IAAI,IAAI,CAACM,gBAAgB,EAAE;UAC1BC,YAAY,CAAC,IAAI,CAACD,gBAAgB,CAAC;;QAGpC,IAAI,CAACA,gBAAgB,GAAGE,UAAU,CAAC,MAAK;UACvC,IAAI,IAAI,CAACpB,aAAa,EAAE;UACxB,IAAI,CAACC,WAAW,EAAE;UAClB,IAAI,CAACF,YAAY,CAACsB,IAAI,CACrB,OAAO,EACP,IAAIzB,oBAAoB,CAAC;YACxB0B,EAAE,EAAE,CAAC;YACLC,OAAO,EAAE,KAAK;YACdC,KAAK,EAAE;cAAEC,IAAI,EAAE,CAAC;cAAEC,OAAO,EAAE;YAAe;WAC1C,CAAC,CACF;QACF,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC;QACb;;MAGD;MACAP,YAAY,CAAC,IAAI,CAACD,gBAAgB,CAAC;MACnC,IAAI,CAACL,SAAS,GAAGc,SAAS;MAE1B,IAAIb,MAAM,EAAER,YAAY,CAACsB,IAAI,CAACd,MAAM,CAAC;IACtC,CAAC,CAAC;IAEF,OAAOR,YAAY;EACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}