{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { toChecksumAddress, leftPad, hexToNumber } from 'web3-utils';\nimport { isAddress } from 'web3-validator';\nimport { InvalidAddressError } from 'web3-errors';\n/**\r\n * Converts Ethereum addresses to IBAN or BBAN addresses and vice versa.\r\n */\nexport class Iban {\n  /**\r\n   * Construct a direct or indirect IBAN that has conversion methods and validity checks.\r\n   * If the provided string was not of either the length of a direct IBAN (34 or 35),\r\n   * nor the length of an indirect IBAN (20), an Error will be thrown ('Invalid IBAN was provided').\r\n   *\r\n   * @param iban - a Direct or an Indirect IBAN\r\n   * @returns - Iban instance\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const iban = new web3.eth.Iban(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\r\n   * > Iban { _iban: 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS' }\r\n   * ```\r\n   */\n  constructor(iban) {\n    /**\r\n     * This method should be used to create the equivalent ethereum address for the early provided Direct IBAN address.\r\n     * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:\r\n     * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').\r\n     * Note: this is also available as a static method.\r\n     *\r\n     * @return the equivalent ethereum address\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * const iban = new web3.eth.Iban(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\r\n     * iban.toAddress();\r\n     * > \"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\"\r\n     * ```\r\n     */\n    this.toAddress = () => {\n      if (this.isDirect()) {\n        // check if Iban can be converted to an address\n        const base36 = this._iban.slice(4);\n        const parsedBigInt = Iban._parseInt(base36, 36); // convert the base36 string to a bigint\n        const paddedBigInt = leftPad(parsedBigInt, 40);\n        return toChecksumAddress(paddedBigInt);\n      }\n      throw new Error('Iban is indirect and cannot be converted. Must be length of 34 or 35');\n    };\n    if (Iban.isIndirect(iban) || Iban.isDirect(iban)) {\n      this._iban = iban;\n    } else {\n      throw new Error('Invalid IBAN was provided');\n    }\n  }\n  /**\r\n   * A static method that checks if an IBAN is Direct.\r\n   * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.\r\n   * Note: this is also available as a method at an Iban instance.\r\n   * @param iban - an IBAN to be checked\r\n   * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * web3.eth.Iban.isDirect(\"XE81ETHXREGGAVOFYORK\");\r\n   * > false\r\n   * ```\r\n   */\n  static isDirect(iban) {\n    return iban.length === 34 || iban.length === 35;\n  }\n  /**\r\n   * An instance method that checks if iban number is Direct.\r\n   * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.\r\n   * Note: this is also available as a static method.\r\n   * @param iban - an IBAN to be checked\r\n   * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n   * iban.isDirect();\r\n   * > false\r\n   * ```\r\n   */\n  isDirect() {\n    return Iban.isDirect(this._iban);\n  }\n  /**\r\n   * A static method that checks if an IBAN is Indirect.\r\n   * It actually check the length of the provided variable and, only if it is 20, it returns true.\r\n   * Note: this is also available as a method at an Iban instance.\r\n   * @param iban - an IBAN to be checked\r\n   * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * web3.eth.Iban.isIndirect(\"XE81ETHXREGGAVOFYORK\");\r\n   * > true\r\n   * ```\r\n   */\n  static isIndirect(iban) {\n    return iban.length === 20;\n  }\n  /**\r\n   * check if iban number if indirect\r\n   * It actually check the length of the provided variable and, only if it is 20, it returns true.\r\n   * Note: this is also available as a static method.\r\n   * @param iban - an IBAN to be checked\r\n   * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n   * iban.isIndirect();\r\n   * > true\r\n   * ```\r\n   */\n  isIndirect() {\n    return Iban.isIndirect(this._iban);\n  }\n  /**\r\n   * This method could be used to check if a given string is valid IBAN object.\r\n   * Note: this is also available as a method at an Iban instance.\r\n   *\r\n   * @param iban - a string to be checked if it is in IBAN\r\n   * @returns - true if it is valid IBAN\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * web3.eth.Iban.isValid(\"XE81ETHXREGGAVOFYORK\");\r\n   * > true\r\n   *\r\n   * web3.eth.Iban.isValid(\"XE82ETHXREGGAVOFYORK\");\r\n   * > false // because the checksum is incorrect\r\n   * ```\r\n   */\n  static isValid(iban) {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(iban) && Iban._mod9710(Iban._iso13616Prepare(iban)) === 1;\n  }\n  /**\r\n   * Should be called to check if the early provided IBAN is correct.\r\n   * Note: this is also available as a static method.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n   * iban.isValid();\r\n   * > true\r\n   *\r\n   * const iban = new web3.eth.Iban(\"XE82ETHXREGGAVOFYORK\");\r\n   * iban.isValid();\r\n   * > false // because the checksum is incorrect\r\n   * ```\r\n   */\n  isValid() {\n    return Iban.isValid(this._iban);\n  }\n  /**\r\n   * Convert the passed BBAN to an IBAN for this country specification.\r\n   * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\r\n   * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\r\n   *\r\n   * @param bban - the BBAN to convert to IBAN\r\n   * @returns an Iban class instance that holds the equivalent IBAN\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * web3.eth.Iban.fromBban('ETHXREGGAVOFYORK');\r\n   * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\r\n   * ```\r\n   */\n  static fromBban(bban) {\n    const countryCode = 'XE';\n    const remainder = this._mod9710(this._iso13616Prepare(`${countryCode}00${bban}`));\n    const checkDigit = `0${(98 - remainder).toString()}`.slice(-2);\n    return new Iban(`${countryCode}${checkDigit}${bban}`);\n  }\n  /**\r\n   * Should be used to create IBAN object for given institution and identifier\r\n   *\r\n   * @param options - an object holds the `institution` and the `identifier` which will be composed to create an `Iban` object from.\r\n   * @returns an Iban class instance that holds the equivalent IBAN\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * web3.eth.Iban.createIndirect({\r\n   *     institution: \"XREG\",\r\n   *     identifier: \"GAVOFYORK\"\r\n   * });\r\n   * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\r\n   * ```\r\n   */\n  static createIndirect(options) {\n    return Iban.fromBban(`ETH${options.institution}${options.identifier}`);\n  }\n  /**\r\n   * This method should be used to create iban object from an Ethereum address.\r\n   *\r\n   * @param address - an Ethereum address\r\n   * @returns an Iban class instance that holds the equivalent IBAN\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * web3.eth.Iban.fromAddress(\"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\");\r\n   * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\r\n   * ```\r\n   */\n  static fromAddress(address) {\n    if (!isAddress(address)) {\n      throw new InvalidAddressError(address);\n    }\n    const num = BigInt(hexToNumber(address));\n    const base36 = num.toString(36);\n    const padded = leftPad(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n  }\n  /**\r\n   * This method should be used to create IBAN address from an Ethereum address\r\n   *\r\n   * @param address - an Ethereum address\r\n   * @return the equivalent IBAN address\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * web3.eth.Iban.toIban(\"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\");\r\n   * > \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"\r\n   * ```\r\n   */\n  static toIban(address) {\n    return Iban.fromAddress(address).toString();\n  }\n  /**\r\n   * Should be called to get client identifier within institution\r\n   *\r\n   * @return the client of the IBAN instance.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n   * iban.client();\r\n   * > 'GAVOFYORK'\r\n   * ```\r\n   */\n  client() {\n    return this.isIndirect() ? this._iban.slice(11) : '';\n  }\n  /**\r\n   * Returns the IBAN checksum of the early provided IBAN\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n   * iban.checksum();\r\n   * > \"81\"\r\n   * ```\r\n   *\r\n   */\n  checksum() {\n    return this._iban.slice(2, 4);\n  }\n  /**\r\n   * Returns institution identifier from the early provided  IBAN\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n   * iban.institution();\r\n   * > 'XREG'\r\n   * ```\r\n   */\n  institution() {\n    return this.isIndirect() ? this._iban.slice(7, 11) : '';\n  }\n  /**\r\n   * Simply returns the early provided IBAN\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const iban = new web3.eth.Iban('XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS');\r\n   * iban.toString();\r\n   * > 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS'\r\n   */\n  toString() {\n    return this._iban;\n  }\n}\n/**\r\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\r\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\r\n */\nIban._iso13616Prepare = iban => {\n  const A = 'A'.charCodeAt(0);\n  const Z = 'Z'.charCodeAt(0);\n  const upperIban = iban.toUpperCase();\n  const modifiedIban = `${upperIban.slice(4)}${upperIban.slice(0, 4)}`;\n  return modifiedIban.split('').map(n => {\n    const code = n.charCodeAt(0);\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    }\n    return n;\n  }).join('');\n};\n/**\r\n * return the bigint of the given string with the specified base\r\n */\nIban._parseInt = (str, base) => [...str].reduce((acc, curr) => BigInt(parseInt(curr, base)) + BigInt(base) * acc, BigInt(0));\n/**\r\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\r\n */\nIban._mod9710 = iban => {\n  let remainder = iban;\n  let block;\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = `${(parseInt(block, 10) % 97).toString()}${remainder.slice(block.length)}`;\n  }\n  return parseInt(remainder, 10) % 97;\n};\n/**\r\n * This method should be used to create an ethereum address from a Direct IBAN address.\r\n * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:\r\n * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').\r\n * Note: this is also available as a method at an Iban instance.\r\n *\r\n * @param iban - a Direct IBAN address\r\n * @return the equivalent ethereum address\r\n *\r\n * @example\r\n * ```ts\r\n * web3.eth.Iban.toAddress(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\r\n * > \"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\"\r\n * ```\r\n */\nIban.toAddress = iban => {\n  const ibanObject = new Iban(iban);\n  return ibanObject.toAddress();\n};","map":{"version":3,"names":["toChecksumAddress","leftPad","hexToNumber","isAddress","InvalidAddressError","Iban","constructor","iban","toAddress","isDirect","base36","_iban","slice","parsedBigInt","_parseInt","paddedBigInt","Error","isIndirect","length","isValid","test","_mod9710","_iso13616Prepare","fromBban","bban","countryCode","remainder","checkDigit","toString","createIndirect","options","institution","identifier","fromAddress","address","num","BigInt","padded","toUpperCase","toIban","client","checksum","A","charCodeAt","Z","upperIban","modifiedIban","split","map","n","code","join","str","base","reduce","acc","curr","parseInt","block","ibanObject"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-iban\\src\\iban.ts"],"sourcesContent":["﻿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { HexString } from 'web3-types';\r\nimport { toChecksumAddress, leftPad, hexToNumber } from 'web3-utils';\r\nimport { isAddress } from 'web3-validator';\r\nimport { InvalidAddressError } from 'web3-errors';\r\nimport { IbanOptions } from './types.js';\r\n\r\n/**\r\n * Converts Ethereum addresses to IBAN or BBAN addresses and vice versa.\r\n */\r\nexport class Iban {\r\n\tprivate readonly _iban: string;\r\n\r\n\t/**\r\n\t * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\r\n\t * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\r\n\t */\r\n\tprivate static readonly _iso13616Prepare = (iban: string): string => {\r\n\t\tconst A = 'A'.charCodeAt(0);\r\n\t\tconst Z = 'Z'.charCodeAt(0);\r\n\r\n\t\tconst upperIban = iban.toUpperCase();\r\n\t\tconst modifiedIban = `${upperIban.slice(4)}${upperIban.slice(0, 4)}`;\r\n\r\n\t\treturn modifiedIban\r\n\t\t\t.split('')\r\n\t\t\t.map(n => {\r\n\t\t\t\tconst code = n.charCodeAt(0);\r\n\t\t\t\tif (code >= A && code <= Z) {\r\n\t\t\t\t\t// A = 10, B = 11, ... Z = 35\r\n\t\t\t\t\treturn code - A + 10;\r\n\t\t\t\t}\r\n\t\t\t\treturn n;\r\n\t\t\t})\r\n\t\t\t.join('');\r\n\t};\r\n\r\n\t/**\r\n\t * return the bigint of the given string with the specified base\r\n\t */\r\n\tprivate static readonly _parseInt = (str: string, base: number): bigint =>\r\n\t\t[...str].reduce(\r\n\t\t\t(acc, curr) => BigInt(parseInt(curr, base)) + BigInt(base) * acc,\r\n\t\t\tBigInt(0),\r\n\t\t);\r\n\r\n\t/**\r\n\t * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\r\n\t */\r\n\tprivate static readonly _mod9710 = (iban: string): number => {\r\n\t\tlet remainder = iban;\r\n\t\tlet block;\r\n\r\n\t\twhile (remainder.length > 2) {\r\n\t\t\tblock = remainder.slice(0, 9);\r\n\t\t\tremainder = `${(parseInt(block, 10) % 97).toString()}${remainder.slice(block.length)}`;\r\n\t\t}\r\n\r\n\t\treturn parseInt(remainder, 10) % 97;\r\n\t};\r\n\r\n\t/**\r\n\t * A static method that checks if an IBAN is Direct.\r\n\t * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.\r\n\t * Note: this is also available as a method at an Iban instance.\r\n\t * @param iban - an IBAN to be checked\r\n\t * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * web3.eth.Iban.isDirect(\"XE81ETHXREGGAVOFYORK\");\r\n\t * > false\r\n\t * ```\r\n\t */\r\n\tpublic static isDirect(iban: string): boolean {\r\n\t\treturn iban.length === 34 || iban.length === 35;\r\n\t}\r\n\r\n\t/**\r\n\t * An instance method that checks if iban number is Direct.\r\n\t * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.\r\n\t * Note: this is also available as a static method.\r\n\t * @param iban - an IBAN to be checked\r\n\t * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n\t * iban.isDirect();\r\n\t * > false\r\n\t * ```\r\n\t */\r\n\tpublic isDirect(): boolean {\r\n\t\treturn Iban.isDirect(this._iban);\r\n\t}\r\n\r\n\t/**\r\n\t * A static method that checks if an IBAN is Indirect.\r\n\t * It actually check the length of the provided variable and, only if it is 20, it returns true.\r\n\t * Note: this is also available as a method at an Iban instance.\r\n\t * @param iban - an IBAN to be checked\r\n\t * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * web3.eth.Iban.isIndirect(\"XE81ETHXREGGAVOFYORK\");\r\n\t * > true\r\n\t * ```\r\n\t */\r\n\tpublic static isIndirect(iban: string): boolean {\r\n\t\treturn iban.length === 20;\r\n\t}\r\n\r\n\t/**\r\n\t * check if iban number if indirect\r\n\t * It actually check the length of the provided variable and, only if it is 20, it returns true.\r\n\t * Note: this is also available as a static method.\r\n\t * @param iban - an IBAN to be checked\r\n\t * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n\t * iban.isIndirect();\r\n\t * > true\r\n\t * ```\r\n\t */\r\n\tpublic isIndirect(): boolean {\r\n\t\treturn Iban.isIndirect(this._iban);\r\n\t}\r\n\r\n\t/**\r\n\t * This method could be used to check if a given string is valid IBAN object.\r\n\t * Note: this is also available as a method at an Iban instance.\r\n\t *\r\n\t * @param iban - a string to be checked if it is in IBAN\r\n\t * @returns - true if it is valid IBAN\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * web3.eth.Iban.isValid(\"XE81ETHXREGGAVOFYORK\");\r\n\t * > true\r\n\t *\r\n\t * web3.eth.Iban.isValid(\"XE82ETHXREGGAVOFYORK\");\r\n\t * > false // because the checksum is incorrect\r\n\t * ```\r\n\t */\r\n\tpublic static isValid(iban: string) {\r\n\t\treturn (\r\n\t\t\t/^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(iban) &&\r\n\t\t\tIban._mod9710(Iban._iso13616Prepare(iban)) === 1\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Should be called to check if the early provided IBAN is correct.\r\n\t * Note: this is also available as a static method.\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n\t * iban.isValid();\r\n\t * > true\r\n\t *\r\n\t * const iban = new web3.eth.Iban(\"XE82ETHXREGGAVOFYORK\");\r\n\t * iban.isValid();\r\n\t * > false // because the checksum is incorrect\r\n\t * ```\r\n\t */\r\n\tpublic isValid(): boolean {\r\n\t\treturn Iban.isValid(this._iban);\r\n\t}\r\n\r\n\t/**\r\n\t * Construct a direct or indirect IBAN that has conversion methods and validity checks.\r\n\t * If the provided string was not of either the length of a direct IBAN (34 or 35),\r\n\t * nor the length of an indirect IBAN (20), an Error will be thrown ('Invalid IBAN was provided').\r\n\t *\r\n\t * @param iban - a Direct or an Indirect IBAN\r\n\t * @returns - Iban instance\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const iban = new web3.eth.Iban(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\r\n\t * > Iban { _iban: 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS' }\r\n\t * ```\r\n\t */\r\n\tpublic constructor(iban: string) {\r\n\t\tif (Iban.isIndirect(iban) || Iban.isDirect(iban)) {\r\n\t\t\tthis._iban = iban;\r\n\t\t} else {\r\n\t\t\tthrow new Error('Invalid IBAN was provided');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Convert the passed BBAN to an IBAN for this country specification.\r\n\t * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\r\n\t * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\r\n\t *\r\n\t * @param bban - the BBAN to convert to IBAN\r\n\t * @returns an Iban class instance that holds the equivalent IBAN\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * web3.eth.Iban.fromBban('ETHXREGGAVOFYORK');\r\n\t * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\r\n\t * ```\r\n\t */\r\n\tpublic static fromBban(bban: string): Iban {\r\n\t\tconst countryCode = 'XE';\r\n\r\n\t\tconst remainder = this._mod9710(this._iso13616Prepare(`${countryCode}00${bban}`));\r\n\t\tconst checkDigit = `0${(98 - remainder).toString()}`.slice(-2);\r\n\r\n\t\treturn new Iban(`${countryCode}${checkDigit}${bban}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Should be used to create IBAN object for given institution and identifier\r\n\t *\r\n\t * @param options - an object holds the `institution` and the `identifier` which will be composed to create an `Iban` object from.\r\n\t * @returns an Iban class instance that holds the equivalent IBAN\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * web3.eth.Iban.createIndirect({\r\n\t *     institution: \"XREG\",\r\n\t *     identifier: \"GAVOFYORK\"\r\n\t * });\r\n\t * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\r\n\t * ```\r\n\t */\r\n\tpublic static createIndirect(options: IbanOptions): Iban {\r\n\t\treturn Iban.fromBban(`ETH${options.institution}${options.identifier}`);\r\n\t}\r\n\r\n\t/**\r\n\t * This method should be used to create iban object from an Ethereum address.\r\n\t *\r\n\t * @param address - an Ethereum address\r\n\t * @returns an Iban class instance that holds the equivalent IBAN\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * web3.eth.Iban.fromAddress(\"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\");\r\n\t * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\r\n\t * ```\r\n\t */\r\n\tpublic static fromAddress(address: HexString): Iban {\r\n\t\tif (!isAddress(address)) {\r\n\t\t\tthrow new InvalidAddressError(address);\r\n\t\t}\r\n\r\n\t\tconst num = BigInt(hexToNumber(address));\r\n\t\tconst base36 = num.toString(36);\r\n\t\tconst padded = leftPad(base36, 15);\r\n\t\treturn Iban.fromBban(padded.toUpperCase());\r\n\t}\r\n\r\n\t/**\r\n\t * This method should be used to create an ethereum address from a Direct IBAN address.\r\n\t * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:\r\n\t * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').\r\n\t * Note: this is also available as a method at an Iban instance.\r\n\t *\r\n\t * @param iban - a Direct IBAN address\r\n\t * @return the equivalent ethereum address\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * web3.eth.Iban.toAddress(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\r\n\t * > \"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\"\r\n\t * ```\r\n\t */\r\n\tpublic static toAddress = (iban: string): HexString => {\r\n\t\tconst ibanObject = new Iban(iban);\r\n\t\treturn ibanObject.toAddress();\r\n\t};\r\n\r\n\t/**\r\n\t * This method should be used to create the equivalent ethereum address for the early provided Direct IBAN address.\r\n\t * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:\r\n\t * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').\r\n\t * Note: this is also available as a static method.\r\n\t *\r\n\t * @return the equivalent ethereum address\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const iban = new web3.eth.Iban(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\r\n\t * iban.toAddress();\r\n\t * > \"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\"\r\n\t * ```\r\n\t */\r\n\tpublic toAddress = (): HexString => {\r\n\t\tif (this.isDirect()) {\r\n\t\t\t// check if Iban can be converted to an address\r\n\t\t\tconst base36 = this._iban.slice(4);\r\n\t\t\tconst parsedBigInt = Iban._parseInt(base36, 36); // convert the base36 string to a bigint\r\n\t\t\tconst paddedBigInt = leftPad(parsedBigInt, 40);\r\n\t\t\treturn toChecksumAddress(paddedBigInt);\r\n\t\t}\r\n\t\tthrow new Error('Iban is indirect and cannot be converted. Must be length of 34 or 35');\r\n\t};\r\n\r\n\t/**\r\n\t * This method should be used to create IBAN address from an Ethereum address\r\n\t *\r\n\t * @param address - an Ethereum address\r\n\t * @return the equivalent IBAN address\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * web3.eth.Iban.toIban(\"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\");\r\n\t * > \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"\r\n\t * ```\r\n\t */\r\n\tpublic static toIban(address: HexString): string {\r\n\t\treturn Iban.fromAddress(address).toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Should be called to get client identifier within institution\r\n\t *\r\n\t * @return the client of the IBAN instance.\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n\t * iban.client();\r\n\t * > 'GAVOFYORK'\r\n\t * ```\r\n\t */\r\n\tpublic client(): string {\r\n\t\treturn this.isIndirect() ? this._iban.slice(11) : '';\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the IBAN checksum of the early provided IBAN\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n\t * iban.checksum();\r\n\t * > \"81\"\r\n\t * ```\r\n\t *\r\n\t */\r\n\tpublic checksum(): string {\r\n\t\treturn this._iban.slice(2, 4);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns institution identifier from the early provided  IBAN\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\r\n\t * iban.institution();\r\n\t * > 'XREG'\r\n\t * ```\r\n\t */\r\n\tpublic institution(): string {\r\n\t\treturn this.isIndirect() ? this._iban.slice(7, 11) : '';\r\n\t}\r\n\r\n\t/**\r\n\t * Simply returns the early provided IBAN\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const iban = new web3.eth.Iban('XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS');\r\n\t * iban.toString();\r\n\t * > 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS'\r\n\t */\r\n\tpublic toString(): string {\r\n\t\treturn this._iban;\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}