{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { ERR_CONN, ERR_CONN_INVALID, ERR_CONN_TIMEOUT, ERR_CONN_NOT_OPEN, ERR_CONN_CLOSE, ERR_CONN_MAX_ATTEMPTS, ERR_CONN_PENDING_REQUESTS, ERR_REQ_ALREADY_SENT } from '../error_codes.js';\nimport { BaseWeb3Error } from '../web3_error_base.js';\nexport class ConnectionError extends BaseWeb3Error {\n  constructor(message, event) {\n    super(message);\n    this.code = ERR_CONN;\n    if (event) {\n      this.errorCode = event.code;\n      this.errorReason = event.reason;\n    }\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      errorCode: this.errorCode,\n      errorReason: this.errorReason\n    });\n  }\n}\nexport class InvalidConnectionError extends ConnectionError {\n  constructor(host, event) {\n    super(`CONNECTION ERROR: Couldn't connect to node ${host}.`, event);\n    this.host = host;\n    this.code = ERR_CONN_INVALID;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      host: this.host\n    });\n  }\n}\nexport class ConnectionTimeoutError extends ConnectionError {\n  constructor(duration) {\n    super(`CONNECTION TIMEOUT: timeout of ${duration}ms achieved`);\n    this.duration = duration;\n    this.code = ERR_CONN_TIMEOUT;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      duration: this.duration\n    });\n  }\n}\nexport class ConnectionNotOpenError extends ConnectionError {\n  constructor(event) {\n    super('Connection not open', event);\n    this.code = ERR_CONN_NOT_OPEN;\n  }\n}\nexport class ConnectionCloseError extends ConnectionError {\n  constructor(event) {\n    var _a, _b;\n    super(`CONNECTION ERROR: The connection got closed with the close code ${(_a = event === null || event === void 0 ? void 0 : event.code) !== null && _a !== void 0 ? _a : ''} and the following reason string ${(_b = event === null || event === void 0 ? void 0 : event.reason) !== null && _b !== void 0 ? _b : ''}`, event);\n    this.code = ERR_CONN_CLOSE;\n  }\n}\nexport class MaxAttemptsReachedOnReconnectingError extends ConnectionError {\n  constructor(numberOfAttempts) {\n    super(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);\n    this.code = ERR_CONN_MAX_ATTEMPTS;\n  }\n}\nexport class PendingRequestsOnReconnectingError extends ConnectionError {\n  constructor() {\n    super('CONNECTION ERROR: Provider started to reconnect before the response got received!');\n    this.code = ERR_CONN_PENDING_REQUESTS;\n  }\n}\nexport class RequestAlreadySentError extends ConnectionError {\n  constructor(id) {\n    super(`Request already sent with following id: ${id}`);\n    this.code = ERR_REQ_ALREADY_SENT;\n  }\n}","map":{"version":3,"names":["ERR_CONN","ERR_CONN_INVALID","ERR_CONN_TIMEOUT","ERR_CONN_NOT_OPEN","ERR_CONN_CLOSE","ERR_CONN_MAX_ATTEMPTS","ERR_CONN_PENDING_REQUESTS","ERR_REQ_ALREADY_SENT","BaseWeb3Error","ConnectionError","constructor","message","event","code","errorCode","errorReason","reason","toJSON","Object","assign","InvalidConnectionError","host","ConnectionTimeoutError","duration","ConnectionNotOpenError","ConnectionCloseError","_a","_b","MaxAttemptsReachedOnReconnectingError","numberOfAttempts","PendingRequestsOnReconnectingError","RequestAlreadySentError","id"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-errors\\src\\errors\\connection_errors.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConnectionEvent } from 'web3-types';\r\nimport {\r\n\tERR_CONN,\r\n\tERR_CONN_INVALID,\r\n\tERR_CONN_TIMEOUT,\r\n\tERR_CONN_NOT_OPEN,\r\n\tERR_CONN_CLOSE,\r\n\tERR_CONN_MAX_ATTEMPTS,\r\n\tERR_CONN_PENDING_REQUESTS,\r\n\tERR_REQ_ALREADY_SENT,\r\n} from '../error_codes.js';\r\nimport { BaseWeb3Error } from '../web3_error_base.js';\r\n\r\nexport class ConnectionError extends BaseWeb3Error {\r\n\tpublic code = ERR_CONN;\r\n\tpublic errorCode?: number;\r\n\tpublic errorReason?: string;\r\n\r\n\tpublic constructor(message: string, event?: ConnectionEvent) {\r\n\t\tsuper(message);\r\n\r\n\t\tif (event) {\r\n\t\t\tthis.errorCode = event.code;\r\n\t\t\tthis.errorReason = event.reason;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toJSON() {\r\n\t\treturn { ...super.toJSON(), errorCode: this.errorCode, errorReason: this.errorReason };\r\n\t}\r\n}\r\n\r\nexport class InvalidConnectionError extends ConnectionError {\r\n\tpublic constructor(public host: string, event?: ConnectionEvent) {\r\n\t\tsuper(`CONNECTION ERROR: Couldn't connect to node ${host}.`, event);\r\n\t\tthis.code = ERR_CONN_INVALID;\r\n\t}\r\n\r\n\tpublic toJSON() {\r\n\t\treturn { ...super.toJSON(), host: this.host };\r\n\t}\r\n}\r\n\r\nexport class ConnectionTimeoutError extends ConnectionError {\r\n\tpublic constructor(public duration: number) {\r\n\t\tsuper(`CONNECTION TIMEOUT: timeout of ${duration}ms achieved`);\r\n\t\tthis.code = ERR_CONN_TIMEOUT;\r\n\t}\r\n\r\n\tpublic toJSON() {\r\n\t\treturn { ...super.toJSON(), duration: this.duration };\r\n\t}\r\n}\r\n\r\nexport class ConnectionNotOpenError extends ConnectionError {\r\n\tpublic constructor(event?: ConnectionEvent) {\r\n\t\tsuper('Connection not open', event);\r\n\t\tthis.code = ERR_CONN_NOT_OPEN;\r\n\t}\r\n}\r\n\r\nexport class ConnectionCloseError extends ConnectionError {\r\n\tpublic constructor(event?: ConnectionEvent) {\r\n\t\tsuper(\r\n\t\t\t`CONNECTION ERROR: The connection got closed with the close code ${\r\n\t\t\t\tevent?.code ?? ''\r\n\t\t\t} and the following reason string ${event?.reason ?? ''}`,\r\n\t\t\tevent,\r\n\t\t);\r\n\t\tthis.code = ERR_CONN_CLOSE;\r\n\t}\r\n}\r\n\r\nexport class MaxAttemptsReachedOnReconnectingError extends ConnectionError {\r\n\tpublic constructor(numberOfAttempts: number) {\r\n\t\tsuper(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);\r\n\t\tthis.code = ERR_CONN_MAX_ATTEMPTS;\r\n\t}\r\n}\r\n\r\nexport class PendingRequestsOnReconnectingError extends ConnectionError {\r\n\tpublic constructor() {\r\n\t\tsuper('CONNECTION ERROR: Provider started to reconnect before the response got received!');\r\n\t\tthis.code = ERR_CONN_PENDING_REQUESTS;\r\n\t}\r\n}\r\n\r\nexport class RequestAlreadySentError extends ConnectionError {\r\n\tpublic constructor(id: number | string) {\r\n\t\tsuper(`Request already sent with following id: ${id}`);\r\n\t\tthis.code = ERR_REQ_ALREADY_SENT;\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}