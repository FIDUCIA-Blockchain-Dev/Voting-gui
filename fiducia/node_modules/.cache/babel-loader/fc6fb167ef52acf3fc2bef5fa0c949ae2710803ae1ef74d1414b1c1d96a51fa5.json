{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lakka\\\\OneDrive - Manipal Academy of Higher Education\\\\FIDUCIA\\\\voting-gui\\\\fiducia\\\\src\\\\components\\\\voter\\\\reveal.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { ABI, address } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      winners_length: 0,\n      winners: []\n    };\n    this.loadBlockchainData = this.loadBlockchainData.bind(this);\n    this.get_winners_length = this.get_winners_length.bind(this);\n    this.get_winners = this.get_winners.bind(this);\n    this.reveal_winner = this.reveal_winner.bind(this);\n  }\n  // Bind the functions to the current instance of App\n\n  componentDidMount() {\n    this.loadBlockchainData();\n  }\n  async loadBlockchainData() {\n    try {\n      // Check if Web3 provider is available from Metamask or similar extension\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        await window.ethereum.enable(); // Request user permission to connect\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          account: accounts[0]\n        });\n        const scontract = new web3.eth.Contract(ABI, address);\n        this.setState({\n          scontract\n        }, async () => {\n          // Callback function to ensure scontract is set before calling get_names()\n          await this.reveal_winner();\n          this.get_winners_length();\n          this.get_winners();\n        });\n      } else {\n        console.log('Please install MetaMask or use a compatible browser extension.');\n      }\n    } catch (error) {\n      console.error('Error loading blockchain data:', error);\n    }\n  }\n  async get_winners_length() {\n    const {\n      scontract\n    } = this.state;\n    const lth = await scontract.methods.get_winners_length().call();\n    this.setState({\n      winners_length: lth\n    });\n    console.log(this.state.winners_length);\n  }\n  async get_winners() {\n    const {\n      scontract,\n      winners_length\n    } = this.state;\n    const winner_array = [];\n    for (let i = 0; i < winners_length; i++) {\n      const data = await scontract.methods.get_winners(i).call();\n      winner_array.push(data);\n    }\n    this.setState({\n      winners: winner_array\n    });\n    console.log(this.state.winners);\n  }\n  async reveal_winner() {\n    const {\n      scontract\n    } = this.state;\n    await scontract.methods.reveal_winner().send({\n      from: this.state.account\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"REVEAL WINNER PAGE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your account: \", this.state.account]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Web3","ABI","address","jsxDEV","_jsxDEV","App","constructor","props","state","account","winners_length","winners","loadBlockchainData","bind","get_winners_length","get_winners","reveal_winner","componentDidMount","window","ethereum","web3","enable","accounts","eth","getAccounts","setState","scontract","Contract","console","log","error","lth","methods","call","winner_array","i","data","push","send","from","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/lakka/OneDrive - Manipal Academy of Higher Education/FIDUCIA/voting-gui/fiducia/src/components/voter/reveal.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport { ABI, address } from '../config';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      account: '',\r\n      winners_length:0,\r\n      winners:[],\r\n    };\r\n    this.loadBlockchainData = this.loadBlockchainData.bind(this);\r\n    this.get_winners_length = this.get_winners_length.bind(this);\r\n    this.get_winners = this.get_winners.bind(this);\r\n    this.reveal_winner = this.reveal_winner.bind(this);\r\n  }\r\n  // Bind the functions to the current instance of App\r\n \r\n  componentDidMount() {\r\n    this.loadBlockchainData();\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    try {\r\n      // Check if Web3 provider is available from Metamask or similar extension\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        await window.ethereum.enable(); // Request user permission to connect\r\n        const accounts = await web3.eth.getAccounts();\r\n        this.setState({ account: accounts[0] });\r\n        const scontract = new web3.eth.Contract(ABI, address);\r\n        this.setState({ scontract }, async () => {\r\n          // Callback function to ensure scontract is set before calling get_names()\r\n          await this.reveal_winner();\r\n          this.get_winners_length();\r\n          this.get_winners();\r\n        });\r\n      } else {\r\n        console.log('Please install MetaMask or use a compatible browser extension.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading blockchain data:', error);\r\n    }\r\n  }\r\n  async get_winners_length() {\r\n    const {scontract} = this.state;\r\n    const lth = await scontract.methods.get_winners_length().call();\r\n    this.setState({winners_length:lth});\r\n    console.log(this.state.winners_length);\r\n  }\r\n\r\n  async get_winners() {\r\n    const {scontract,winners_length} = this.state;\r\n    const winner_array = [];\r\n    for(let i=0;i<winners_length;i++)\r\n    {\r\n      const data = await scontract.methods.get_winners(i).call();\r\n      winner_array.push(data);\r\n    }\r\n    this.setState({winners:winner_array});\r\n    console.log(this.state.winners);\r\n  }\r\n    async reveal_winner() {\r\n      const {scontract} = this.state;\r\n      await scontract.methods.reveal_winner().send({from:this.state.account});\r\n    \r\n    }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>REVEAL WINNER PAGE</h1>\r\n        <p>Your account: {this.state.account}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}