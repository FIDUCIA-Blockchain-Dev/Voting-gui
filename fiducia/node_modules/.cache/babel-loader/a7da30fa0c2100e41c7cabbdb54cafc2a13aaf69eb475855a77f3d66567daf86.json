{"ast":null,"code":"/**\r\n * Can be used in conjunction with {@link Transaction.supports}\r\n * to query on tx capabilities\r\n */\nexport var Capability;\n(function (Capability) {\n  /**\r\n   * Tx supports EIP-155 replay protection\r\n   * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\r\n   */\n  Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n  /**\r\n   * Tx supports EIP-1559 gas fee market mechanism\r\n   * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\r\n   */\n  Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n  /**\r\n   * Tx is a typed transaction as defined in EIP-2718\r\n   * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\r\n   */\n  Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n  /**\r\n   * Tx supports access list generation as defined in EIP-2930\r\n   * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\r\n   */\n  Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n})(Capability || (Capability = {}));\nexport function isAccessListUint8Array(input) {\n  if (input.length === 0) {\n    return true;\n  }\n  const firstItem = input[0];\n  if (Array.isArray(firstItem)) {\n    return true;\n  }\n  return false;\n}\nexport function isAccessList(input) {\n  return !isAccessListUint8Array(input); // This is exactly the same method, except the output is negated.\n}","map":{"version":3,"names":["Capability","isAccessListUint8Array","input","length","firstItem","Array","isArray","isAccessList"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-accounts\\src\\tx\\types.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport type { HexString, Numbers } from 'web3-types';\r\n\r\nimport type { Common } from '../common/common.js';\r\nimport type { Uint8ArrayLike, PrefixedHexString } from '../common/types';\r\nimport { Address } from './address.js';\r\n\r\n/**\r\n * Can be used in conjunction with {@link Transaction.supports}\r\n * to query on tx capabilities\r\n */\r\nexport enum Capability {\r\n\t/**\r\n\t * Tx supports EIP-155 replay protection\r\n\t * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\r\n\t */\r\n\tEIP155ReplayProtection = 155,\r\n\r\n\t/**\r\n\t * Tx supports EIP-1559 gas fee market mechanism\r\n\t * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\r\n\t */\r\n\tEIP1559FeeMarket = 1559,\r\n\r\n\t/**\r\n\t * Tx is a typed transaction as defined in EIP-2718\r\n\t * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\r\n\t */\r\n\tEIP2718TypedTransaction = 2718,\r\n\r\n\t/**\r\n\t * Tx supports access list generation as defined in EIP-2930\r\n\t * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\r\n\t */\r\n\tEIP2930AccessLists = 2930,\r\n}\r\n\r\n/**\r\n * The options for initializing a {@link Transaction}.\r\n */\r\nexport interface TxOptions {\r\n\t/**\r\n\t * A {@link Common} object defining the chain and hardfork for the transaction.\r\n\t *\r\n\t * Object will be internally copied so that tx behavior don't incidentally\r\n\t * change on future HF changes.\r\n\t *\r\n\t * Default: {@link Common} object set to `mainnet` and the default hardfork as defined in the {@link Common} class.\r\n\t *\r\n\t * Current default hardfork: `istanbul`\r\n\t */\r\n\tcommon?: Common;\r\n\t/**\r\n\t * A transaction object by default gets frozen along initialization. This gives you\r\n\t * strong additional security guarantees on the consistency of the tx parameters.\r\n\t * It also enables tx hash caching when the `hash()` method is called multiple times.\r\n\t *\r\n\t * If you need to deactivate the tx freeze - e.g. because you want to subclass tx and\r\n\t * add additional properties - it is strongly encouraged that you do the freeze yourself\r\n\t * within your code instead.\r\n\t *\r\n\t * Default: true\r\n\t */\r\n\tfreeze?: boolean;\r\n\r\n\t/**\r\n\t * Allows unlimited contract code-size init while debugging. This (partially) disables EIP-3860.\r\n\t * Gas cost for initcode size analysis will still be charged. Use with caution.\r\n\t */\r\n\tallowUnlimitedInitCodeSize?: boolean;\r\n}\r\n\r\n/*\r\n * Access List types\r\n */\r\n\r\nexport type AccessListItem = {\r\n\taddress: PrefixedHexString;\r\n\tstorageKeys: PrefixedHexString[];\r\n};\r\n\r\n/*\r\n * An Access List as a tuple of [address: Uint8Array, storageKeys: Uint8Array[]]\r\n */\r\nexport type AccessListUint8ArrayItem = [Uint8Array, Uint8Array[]];\r\nexport type AccessListUint8Array = AccessListUint8ArrayItem[];\r\nexport type AccessList = AccessListItem[];\r\n\r\nexport function isAccessListUint8Array(\r\n\tinput: AccessListUint8Array | AccessList,\r\n): input is AccessListUint8Array {\r\n\tif (input.length === 0) {\r\n\t\treturn true;\r\n\t}\r\n\tconst firstItem = input[0];\r\n\tif (Array.isArray(firstItem)) {\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport function isAccessList(input: AccessListUint8Array | AccessList): input is AccessList {\r\n\treturn !isAccessListUint8Array(input); // This is exactly the same method, except the output is negated.\r\n}\r\n\r\nexport interface ECDSASignature {\r\n\tv: bigint;\r\n\tr: Uint8Array;\r\n\ts: Uint8Array;\r\n}\r\n\r\n/**\r\n * Legacy {@link Transaction} Data\r\n */\r\nexport type TxData = {\r\n\t/**\r\n\t * The transaction's nonce.\r\n\t */\r\n\tnonce?: Numbers | Uint8Array;\r\n\r\n\t/**\r\n\t * The transaction's gas price.\r\n\t */\r\n\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\tgasPrice?: Numbers | Uint8Array | null;\r\n\r\n\t/**\r\n\t * The transaction's gas limit.\r\n\t */\r\n\tgasLimit?: Numbers | Uint8Array;\r\n\r\n\t/**\r\n\t * The transaction's the address is sent to.\r\n\t */\r\n\tto?: Address | Uint8Array | HexString;\r\n\r\n\t/**\r\n\t * The amount of Ether sent.\r\n\t */\r\n\tvalue?: Numbers | Uint8Array;\r\n\r\n\t/**\r\n\t * This will contain the data of the message or the init of a contract.\r\n\t */\r\n\tdata?: Uint8ArrayLike;\r\n\r\n\t/**\r\n\t * EC recovery ID.\r\n\t */\r\n\tv?: Numbers | Uint8Array;\r\n\r\n\t/**\r\n\t * EC signature parameter.\r\n\t */\r\n\tr?: Numbers | Uint8Array;\r\n\r\n\t/**\r\n\t * EC signature parameter.\r\n\t */\r\n\ts?: Numbers | Uint8Array;\r\n\r\n\t/**\r\n\t * The transaction type\r\n\t */\r\n\r\n\ttype?: Numbers;\r\n};\r\n\r\n/**\r\n * {@link AccessListEIP2930Transaction} data.\r\n */\r\nexport interface AccessListEIP2930TxData extends TxData {\r\n\t/**\r\n\t * The transaction's chain ID\r\n\t */\r\n\tchainId?: Numbers;\r\n\r\n\t/**\r\n\t * The access list which contains the addresses/storage slots which the transaction wishes to access\r\n\t */\r\n\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\taccessList?: AccessListUint8Array | AccessList | null;\r\n}\r\n\r\n/**\r\n * {@link FeeMarketEIP1559Transaction} data.\r\n */\r\nexport interface FeeMarketEIP1559TxData extends AccessListEIP2930TxData {\r\n\t/**\r\n\t * The transaction's gas price, inherited from {@link Transaction}.  This property is not used for EIP1559\r\n\t * transactions and should always be undefined for this specific transaction type.\r\n\t */\r\n\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\tgasPrice?: never | null;\r\n\t/**\r\n\t * The maximum inclusion fee per gas (this fee is given to the miner)\r\n\t */\r\n\tmaxPriorityFeePerGas?: Numbers | Uint8Array;\r\n\t/**\r\n\t * The maximum total fee\r\n\t */\r\n\tmaxFeePerGas?: Numbers | Uint8Array;\r\n}\r\n\r\n/**\r\n * Uint8Array values array for a legacy {@link Transaction}\r\n */\r\nexport type TxValuesArray = Uint8Array[];\r\n\r\n/**\r\n * Uint8Array values array for an {@link AccessListEIP2930Transaction}\r\n */\r\nexport type AccessListEIP2930ValuesArray = [\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tAccessListUint8Array,\r\n\tUint8Array?,\r\n\tUint8Array?,\r\n\tUint8Array?,\r\n];\r\n\r\n/**\r\n * Uint8Array values array for a {@link FeeMarketEIP1559Transaction}\r\n */\r\nexport type FeeMarketEIP1559ValuesArray = [\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tUint8Array,\r\n\tAccessListUint8Array,\r\n\tUint8Array?,\r\n\tUint8Array?,\r\n\tUint8Array?,\r\n];\r\n\r\ntype JsonAccessListItem = { address: string; storageKeys: string[] };\r\n\r\n/**\r\n * Generic interface for all tx types with a\r\n * JSON representation of a transaction.\r\n *\r\n * Note that all values are marked as optional\r\n * and not all the values are present on all tx types\r\n * (an EIP1559 tx e.g. lacks a `gasPrice`).\r\n */\r\nexport interface JsonTx {\r\n\tnonce?: string;\r\n\tgasPrice?: string;\r\n\tgasLimit?: string;\r\n\tto?: string;\r\n\tdata?: string;\r\n\tv?: string;\r\n\tr?: string;\r\n\ts?: string;\r\n\tvalue?: string;\r\n\tchainId?: string;\r\n\taccessList?: JsonAccessListItem[];\r\n\ttype?: string;\r\n\tmaxPriorityFeePerGas?: string;\r\n\tmaxFeePerGas?: string;\r\n\tmaxFeePerDataGas?: string;\r\n\tversionedHashes?: string[];\r\n}\r\n"],"mappings":"AAsBA;;;;AAIA,WAAYA,UAwBX;AAxBD,WAAYA,UAAU;EACrB;;;;EAIAA,UAAA,CAAAA,UAAA,4DAA4B;EAE5B;;;;EAIAA,UAAA,CAAAA,UAAA,iDAAuB;EAEvB;;;;EAIAA,UAAA,CAAAA,UAAA,+DAA8B;EAE9B;;;;EAIAA,UAAA,CAAAA,UAAA,qDAAyB;AAC1B,CAAC,EAxBWA,UAAU,KAAVA,UAAU;AA6EtB,OAAM,SAAUC,sBAAsBA,CACrCC,KAAwC;EAExC,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACvB,OAAO,IAAI;;EAEZ,MAAMC,SAAS,GAAGF,KAAK,CAAC,CAAC,CAAC;EAC1B,IAAIG,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,EAAE;IAC7B,OAAO,IAAI;;EAEZ,OAAO,KAAK;AACb;AAEA,OAAM,SAAUG,YAAYA,CAACL,KAAwC;EACpE,OAAO,CAACD,sBAAsB,CAACC,KAAK,CAAC,CAAC,CAAC;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}