{"ast":null,"code":"export class Web3BaseWallet extends Array {\n  constructor(accountProvider) {\n    super();\n    this._accountProvider = accountProvider;\n  }\n}","map":{"version":3,"names":["Web3BaseWallet","Array","constructor","accountProvider","_accountProvider"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-types\\src\\web3_base_wallet.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { Transaction } from './eth_types.js';\r\nimport { HexString } from './primitives_types.js';\r\n\r\nexport type Cipher = 'aes-128-ctr' | 'aes-128-cbc' | 'aes-256-cbc';\r\n\r\nexport type CipherOptions = {\r\n\tsalt?: Uint8Array | string;\r\n\tiv?: Uint8Array | string;\r\n\tkdf?: 'scrypt' | 'pbkdf2';\r\n\tdklen?: number;\r\n\tc?: number; // iterrations\r\n\tn?: number; // cpu/memory cost\r\n\tr?: number; // block size\r\n\tp?: number; // parallelization cost\r\n};\r\n\r\nexport type ScryptParams = {\r\n\tdklen: number;\r\n\tn: number;\r\n\tp: number;\r\n\tr: number;\r\n\tsalt: Uint8Array | string;\r\n};\r\nexport type PBKDF2SHA256Params = {\r\n\tc: number; // iterations\r\n\tdklen: number;\r\n\tprf: 'hmac-sha256';\r\n\tsalt: Uint8Array | string;\r\n};\r\n\r\nexport type KeyStore = {\r\n\tcrypto: {\r\n\t\tcipher: Cipher;\r\n\t\tciphertext: string;\r\n\t\tcipherparams: {\r\n\t\t\tiv: string;\r\n\t\t};\r\n\t\tkdf: 'pbkdf2' | 'scrypt';\r\n\t\tkdfparams: ScryptParams | PBKDF2SHA256Params;\r\n\t\tmac: HexString;\r\n\t};\r\n\tid: string;\r\n\tversion: 3;\r\n\taddress: string;\r\n};\r\n\r\nexport interface Web3BaseWalletAccount {\r\n\t[key: string]: unknown;\r\n\treadonly address: string;\r\n\treadonly privateKey: string;\r\n\treadonly signTransaction: (tx: Transaction) => Promise<{\r\n\t\treadonly messageHash: HexString;\r\n\t\treadonly r: HexString;\r\n\t\treadonly s: HexString;\r\n\t\treadonly v: HexString;\r\n\t\treadonly rawTransaction: HexString;\r\n\t\treadonly transactionHash: HexString;\r\n\t}>;\r\n\treadonly sign: (data: Record<string, unknown> | string) => {\r\n\t\treadonly messageHash: HexString;\r\n\t\treadonly r: HexString;\r\n\t\treadonly s: HexString;\r\n\t\treadonly v: HexString;\r\n\t\treadonly message?: string;\r\n\t\treadonly signature: HexString;\r\n\t};\r\n\treadonly encrypt: (password: string, options?: Record<string, unknown>) => Promise<KeyStore>;\r\n}\r\n\r\nexport interface Web3AccountProvider<T> {\r\n\tprivateKeyToAccount: (privateKey: string) => T;\r\n\tcreate: () => T;\r\n\tdecrypt: (\r\n\t\tkeystore: KeyStore | string,\r\n\t\tpassword: string,\r\n\t\toptions?: Record<string, unknown>,\r\n\t) => Promise<T>;\r\n}\r\n\r\nexport abstract class Web3BaseWallet<T extends Web3BaseWalletAccount> extends Array<T> {\r\n\tprotected readonly _accountProvider: Web3AccountProvider<T>;\r\n\r\n\tpublic constructor(accountProvider: Web3AccountProvider<T>) {\r\n\t\tsuper();\r\n\t\tthis._accountProvider = accountProvider;\r\n\t}\r\n\r\n\tpublic abstract create(numberOfAccounts: number): this;\r\n\tpublic abstract add(account: T | string): this;\r\n\tpublic abstract get(addressOrIndex: string | number): T | undefined;\r\n\tpublic abstract remove(addressOrIndex: string | number): boolean;\r\n\tpublic abstract clear(): this;\r\n\tpublic abstract encrypt(\r\n\t\tpassword: string,\r\n\t\toptions?: Record<string, unknown>,\r\n\t): Promise<KeyStore[]>;\r\n\tpublic abstract decrypt(\r\n\t\tencryptedWallet: KeyStore[],\r\n\t\tpassword: string,\r\n\t\toptions?: Record<string, unknown>,\r\n\t): Promise<this>;\r\n\tpublic abstract save(password: string, keyName?: string): Promise<boolean | never>;\r\n\tpublic abstract load(password: string, keyName?: string): Promise<this | never>;\r\n}\r\n"],"mappings":"AA+FA,OAAM,MAAgBA,cAAgD,SAAQC,KAAQ;EAGrFC,YAAmBC,eAAuC;IACzD,KAAK,EAAE;IACP,IAAI,CAACC,gBAAgB,GAAGD,eAAe;EACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}