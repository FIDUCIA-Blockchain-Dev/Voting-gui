{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { toUint8Array, uint8ArrayToBigInt } from '../common/utils.js';\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction.js';\nimport { AccessListEIP2930Transaction } from './eip2930Transaction.js';\nimport { Transaction } from './legacyTransaction.js';\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class TransactionFactory {\n  // It is not possible to instantiate a TransactionFactory object.\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n  constructor() {}\n  /**\r\n   * Create a transaction from a `txData` object\r\n   *\r\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\r\n   * @param txOptions - Options to pass on to the constructor of the transaction\r\n   */\n  static fromTxData(txData) {\n    let txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return Transaction.fromTxData(txData, txOptions);\n    }\n    const txType = Number(uint8ArrayToBigInt(toUint8Array(txData.type)));\n    if (txType === 0) {\n      return Transaction.fromTxData(txData, txOptions);\n    }\n    if (txType === 1) {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      return AccessListEIP2930Transaction.fromTxData(\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      txData, txOptions);\n    }\n    if (txType === 2) {\n      return FeeMarketEIP1559Transaction.fromTxData(\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      txData, txOptions);\n    }\n    throw new Error(`Tx instantiation with type ${txType} not supported`);\n  }\n  /**\r\n   * This method tries to decode serialized data.\r\n   *\r\n   * @param data - The data Uint8Array\r\n   * @param txOptions - The transaction options\r\n   */\n  static fromSerializedData(data) {\n    let txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      switch (data[0]) {\n        case 1:\n          return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n        case 2:\n          return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n        default:\n          throw new Error(`TypedTransaction with ID ${data[0]} unknown`);\n      }\n    } else {\n      return Transaction.fromSerializedTx(data, txOptions);\n    }\n  }\n  /**\r\n   * When decoding a BlockBody, in the transactions field, a field is either:\r\n   * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\r\n   * A Uint8Array[] (Legacy Transaction)\r\n   * This method returns the right transaction.\r\n   *\r\n   * @param data - A Uint8Array or Uint8Array[]\r\n   * @param txOptions - The transaction options\r\n   */\n  static fromBlockBodyData(data) {\n    let txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (data instanceof Uint8Array) {\n      return this.fromSerializedData(data, txOptions);\n    }\n    if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return Transaction.fromValuesArray(data, txOptions);\n    }\n    throw new Error('Cannot decode transaction: unknown type input');\n  }\n}","map":{"version":3,"names":["toUint8Array","uint8ArrayToBigInt","FeeMarketEIP1559Transaction","AccessListEIP2930Transaction","Transaction","TransactionFactory","constructor","fromTxData","txData","txOptions","arguments","length","undefined","type","txType","Number","Error","fromSerializedData","data","fromSerializedTx","fromBlockBodyData","Uint8Array","Array","isArray","fromValuesArray"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-accounts\\src\\tx\\transactionFactory.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { toUint8Array, uint8ArrayToBigInt } from '../common/utils.js';\r\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction.js';\r\nimport { AccessListEIP2930Transaction } from './eip2930Transaction.js';\r\nimport { Transaction } from './legacyTransaction.js';\r\nimport type { TypedTransaction } from '../types.js';\r\n\r\nimport type {\r\n\tAccessListEIP2930TxData,\r\n\tFeeMarketEIP1559TxData,\r\n\tTxData,\r\n\tTxOptions,\r\n} from './types.js';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\r\nexport class TransactionFactory {\r\n\t// It is not possible to instantiate a TransactionFactory object.\r\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\r\n\tprivate constructor() {}\r\n\r\n\t/**\r\n\t * Create a transaction from a `txData` object\r\n\t *\r\n\t * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\r\n\t * @param txOptions - Options to pass on to the constructor of the transaction\r\n\t */\r\n\tpublic static fromTxData(\r\n\t\ttxData: TxData | TypedTransaction,\r\n\t\ttxOptions: TxOptions = {},\r\n\t): TypedTransaction {\r\n\t\tif (!('type' in txData) || txData.type === undefined) {\r\n\t\t\t// Assume legacy transaction\r\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\r\n\t\t}\r\n\t\tconst txType = Number(uint8ArrayToBigInt(toUint8Array(txData.type)));\r\n\t\tif (txType === 0) {\r\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\r\n\t\t}\r\n\t\tif (txType === 1) {\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\r\n\t\t\treturn AccessListEIP2930Transaction.fromTxData(\r\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\r\n\t\t\t\t<AccessListEIP2930TxData>txData,\r\n\t\t\t\ttxOptions,\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (txType === 2) {\r\n\t\t\treturn FeeMarketEIP1559Transaction.fromTxData(\r\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\r\n\t\t\t\t<FeeMarketEIP1559TxData>txData,\r\n\t\t\t\ttxOptions,\r\n\t\t\t);\r\n\t\t}\r\n\t\tthrow new Error(`Tx instantiation with type ${txType} not supported`);\r\n\t}\r\n\r\n\t/**\r\n\t * This method tries to decode serialized data.\r\n\t *\r\n\t * @param data - The data Uint8Array\r\n\t * @param txOptions - The transaction options\r\n\t */\r\n\tpublic static fromSerializedData(\r\n\t\tdata: Uint8Array,\r\n\t\ttxOptions: TxOptions = {},\r\n\t): TypedTransaction {\r\n\t\tif (data[0] <= 0x7f) {\r\n\t\t\t// Determine the type.\r\n\t\t\tswitch (data[0]) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`TypedTransaction with ID ${data[0]} unknown`);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn Transaction.fromSerializedTx(data, txOptions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * When decoding a BlockBody, in the transactions field, a field is either:\r\n\t * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\r\n\t * A Uint8Array[] (Legacy Transaction)\r\n\t * This method returns the right transaction.\r\n\t *\r\n\t * @param data - A Uint8Array or Uint8Array[]\r\n\t * @param txOptions - The transaction options\r\n\t */\r\n\tpublic static fromBlockBodyData(data: Uint8Array | Uint8Array[], txOptions: TxOptions = {}) {\r\n\t\tif (data instanceof Uint8Array) {\r\n\t\t\treturn this.fromSerializedData(data, txOptions);\r\n\t\t}\r\n\t\tif (Array.isArray(data)) {\r\n\t\t\t// It is a legacy transaction\r\n\t\t\treturn Transaction.fromValuesArray(data, txOptions);\r\n\t\t}\r\n\t\tthrow new Error('Cannot decode transaction: unknown type input');\r\n\t}\r\n}\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,YAAY,EAAEC,kBAAkB,QAAQ,oBAAoB;AACrE,SAASC,2BAA2B,QAAQ,yBAAyB;AACrE,SAASC,4BAA4B,QAAQ,yBAAyB;AACtE,SAASC,WAAW,QAAQ,wBAAwB;AAUpD;AACA,OAAM,MAAOC,kBAAkB;EAC9B;EACA;EACAC,YAAA,GAAuB;EAEvB;;;;;;EAMO,OAAOC,UAAUA,CACvBC,MAAiC,EACR;IAAA,IAAzBC,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuB,EAAE;IAEzB,IAAI,EAAE,MAAM,IAAIF,MAAM,CAAC,IAAIA,MAAM,CAACK,IAAI,KAAKD,SAAS,EAAE;MACrD;MACA,OAAOR,WAAW,CAACG,UAAU,CAACC,MAAgB,EAAEC,SAAS,CAAC;;IAE3D,MAAMK,MAAM,GAAGC,MAAM,CAACd,kBAAkB,CAACD,YAAY,CAACQ,MAAM,CAACK,IAAI,CAAC,CAAC,CAAC;IACpE,IAAIC,MAAM,KAAK,CAAC,EAAE;MACjB,OAAOV,WAAW,CAACG,UAAU,CAACC,MAAgB,EAAEC,SAAS,CAAC;;IAE3D,IAAIK,MAAM,KAAK,CAAC,EAAE;MACjB;MACA,OAAOX,4BAA4B,CAACI,UAAU;MAC7C;MACyBC,MAAM,EAC/BC,SAAS,CACT;;IAEF,IAAIK,MAAM,KAAK,CAAC,EAAE;MACjB,OAAOZ,2BAA2B,CAACK,UAAU;MAC5C;MACwBC,MAAM,EAC9BC,SAAS,CACT;;IAEF,MAAM,IAAIO,KAAK,CAAC,8BAA8BF,MAAM,gBAAgB,CAAC;EACtE;EAEA;;;;;;EAMO,OAAOG,kBAAkBA,CAC/BC,IAAgB,EACS;IAAA,IAAzBT,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuB,EAAE;IAEzB,IAAIQ,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;MACpB;MACA,QAAQA,IAAI,CAAC,CAAC,CAAC;QACd,KAAK,CAAC;UACL,OAAOf,4BAA4B,CAACgB,gBAAgB,CAACD,IAAI,EAAET,SAAS,CAAC;QACtE,KAAK,CAAC;UACL,OAAOP,2BAA2B,CAACiB,gBAAgB,CAACD,IAAI,EAAET,SAAS,CAAC;QACrE;UACC,MAAM,IAAIO,KAAK,CAAC,4BAA4BE,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC;;KAEhE,MAAM;MACN,OAAOd,WAAW,CAACe,gBAAgB,CAACD,IAAI,EAAET,SAAS,CAAC;;EAEtD;EAEA;;;;;;;;;EASO,OAAOW,iBAAiBA,CAACF,IAA+B,EAA2B;IAAA,IAAzBT,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuB,EAAE;IACzF,IAAIQ,IAAI,YAAYG,UAAU,EAAE;MAC/B,OAAO,IAAI,CAACJ,kBAAkB,CAACC,IAAI,EAAET,SAAS,CAAC;;IAEhD,IAAIa,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;MACxB;MACA,OAAOd,WAAW,CAACoB,eAAe,CAACN,IAAI,EAAET,SAAS,CAAC;;IAEpD,MAAM,IAAIO,KAAK,CAAC,+CAA+C,CAAC;EACjE"},"metadata":{},"sourceType":"module","externalDependencies":[]}