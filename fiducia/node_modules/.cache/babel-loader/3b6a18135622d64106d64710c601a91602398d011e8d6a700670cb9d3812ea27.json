{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { format } from 'web3-utils';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport { watchTransactionByPolling } from './watch_transaction_by_pooling.js';\n/**\r\n * This function watches a Transaction by subscribing to new heads.\r\n * It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.\r\n */\nexport const watchTransactionBySubscription = _ref => {\n  let {\n    web3Context,\n    transactionReceipt,\n    transactionPromiEvent,\n    returnFormat\n  } = _ref;\n  // The following variable will stay true except if the data arrived,\n  //\tor if watching started after an error had occurred.\n  let needToWatchLater = true;\n  let lastCaughtBlockHash;\n  setImmediate(() => {\n    var _a;\n    (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe('newHeads').then(subscription => {\n      subscription.on('data', newBlockHeader => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        needToWatchLater = false;\n        if (!(newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.number) ||\n        // For some cases, the on-data event is fired couple times for the same block!\n        // This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.\n        lastCaughtBlockHash === (newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash)) {\n          return;\n        }\n        lastCaughtBlockHash = newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash;\n        const confirmations = BigInt(newBlockHeader.number) - BigInt(transactionReceipt.blockNumber) + BigInt(1);\n        transactionPromiEvent.emit('confirmation', {\n          confirmations: format({\n            format: 'uint'\n          }, confirmations, returnFormat),\n          receipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n          latestBlockHash: format({\n            format: 'bytes32'\n          }, newBlockHeader.parentHash, returnFormat)\n        });\n        if (confirmations >= web3Context.transactionConfirmationBlocks) {\n          yield (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription);\n        }\n      }));\n      subscription.on('error', () => __awaiter(void 0, void 0, void 0, function* () {\n        var _b;\n        yield (_b = web3Context.subscriptionManager) === null || _b === void 0 ? void 0 : _b.removeSubscription(subscription);\n        needToWatchLater = false;\n        watchTransactionByPolling({\n          web3Context,\n          transactionReceipt,\n          transactionPromiEvent,\n          returnFormat\n        });\n      }));\n    }).catch(() => {\n      needToWatchLater = false;\n      watchTransactionByPolling({\n        web3Context,\n        transactionReceipt,\n        transactionPromiEvent,\n        returnFormat\n      });\n    });\n  });\n  // Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n  setTimeout(() => {\n    if (needToWatchLater) {\n      watchTransactionByPolling({\n        web3Context,\n        transactionReceipt,\n        transactionPromiEvent,\n        returnFormat\n      });\n    }\n  }, web3Context.blockHeaderTimeout * 1000);\n};","map":{"version":3,"names":["format","transactionReceiptSchema","watchTransactionByPolling","watchTransactionBySubscription","_ref","web3Context","transactionReceipt","transactionPromiEvent","returnFormat","needToWatchLater","lastCaughtBlockHash","setImmediate","_a","subscriptionManager","subscribe","then","subscription","on","newBlockHeader","__awaiter","number","parentHash","confirmations","BigInt","blockNumber","emit","receipt","latestBlockHash","transactionConfirmationBlocks","removeSubscription","_b","catch","setTimeout","blockHeaderTimeout"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth\\src\\utils\\watch_transaction_by_subscription.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { Bytes, Numbers, BlockHeaderOutput, TransactionReceipt } from 'web3-types';\r\nimport { format } from 'web3-utils';\r\n\r\nimport { DataFormat } from 'web3-types';\r\nimport { NewHeadsSubscription } from '../web3_subscriptions.js';\r\nimport { transactionReceiptSchema } from '../schemas.js';\r\nimport { WaitProps, watchTransactionByPolling } from './watch_transaction_by_pooling.js';\r\n\r\n/**\r\n * This function watches a Transaction by subscribing to new heads.\r\n * It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.\r\n */\r\nexport const watchTransactionBySubscription = <\r\n\tReturnFormat extends DataFormat,\r\n\tResolveType = TransactionReceipt,\r\n>({\r\n\tweb3Context,\r\n\ttransactionReceipt,\r\n\ttransactionPromiEvent,\r\n\treturnFormat,\r\n}: WaitProps<ReturnFormat, ResolveType>) => {\r\n\t// The following variable will stay true except if the data arrived,\r\n\t//\tor if watching started after an error had occurred.\r\n\tlet needToWatchLater = true;\r\n\tlet lastCaughtBlockHash: string;\r\n\tsetImmediate(() => {\r\n\t\tweb3Context.subscriptionManager\r\n\t\t\t?.subscribe('newHeads')\r\n\t\t\t.then((subscription: NewHeadsSubscription) => {\r\n\t\t\t\tsubscription.on('data', async (newBlockHeader: BlockHeaderOutput) => {\r\n\t\t\t\t\tneedToWatchLater = false;\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!newBlockHeader?.number ||\r\n\t\t\t\t\t\t// For some cases, the on-data event is fired couple times for the same block!\r\n\t\t\t\t\t\t// This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.\r\n\t\t\t\t\t\tlastCaughtBlockHash === newBlockHeader?.parentHash\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastCaughtBlockHash = newBlockHeader?.parentHash as string;\r\n\r\n\t\t\t\t\tconst confirmations =\r\n\t\t\t\t\t\tBigInt(newBlockHeader.number) -\r\n\t\t\t\t\t\tBigInt(transactionReceipt.blockNumber) +\r\n\t\t\t\t\t\tBigInt(1);\r\n\r\n\t\t\t\t\ttransactionPromiEvent.emit('confirmation', {\r\n\t\t\t\t\t\tconfirmations: format(\r\n\t\t\t\t\t\t\t{ format: 'uint' },\r\n\t\t\t\t\t\t\tconfirmations as Numbers,\r\n\t\t\t\t\t\t\treturnFormat,\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\r\n\t\t\t\t\t\tlatestBlockHash: format(\r\n\t\t\t\t\t\t\t{ format: 'bytes32' },\r\n\t\t\t\t\t\t\tnewBlockHeader.parentHash as Bytes,\r\n\t\t\t\t\t\t\treturnFormat,\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (confirmations >= web3Context.transactionConfirmationBlocks) {\r\n\t\t\t\t\t\tawait web3Context.subscriptionManager?.removeSubscription(subscription);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tsubscription.on('error', async () => {\r\n\t\t\t\t\tawait web3Context.subscriptionManager?.removeSubscription(subscription);\r\n\r\n\t\t\t\t\tneedToWatchLater = false;\r\n\t\t\t\t\twatchTransactionByPolling({\r\n\t\t\t\t\t\tweb3Context,\r\n\t\t\t\t\t\ttransactionReceipt,\r\n\t\t\t\t\t\ttransactionPromiEvent,\r\n\t\t\t\t\t\treturnFormat,\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch(() => {\r\n\t\t\t\tneedToWatchLater = false;\r\n\t\t\t\twatchTransactionByPolling({\r\n\t\t\t\t\tweb3Context,\r\n\t\t\t\t\ttransactionReceipt,\r\n\t\t\t\t\ttransactionPromiEvent,\r\n\t\t\t\t\treturnFormat,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t});\r\n\r\n\t// Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\r\n\tsetTimeout(() => {\r\n\t\tif (needToWatchLater) {\r\n\t\t\twatchTransactionByPolling({\r\n\t\t\t\tweb3Context,\r\n\t\t\t\ttransactionReceipt,\r\n\t\t\t\ttransactionPromiEvent,\r\n\t\t\t\treturnFormat,\r\n\t\t\t});\r\n\t\t}\r\n\t}, web3Context.blockHeaderTimeout * 1000);\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,MAAM,QAAQ,YAAY;AAInC,SAASC,wBAAwB,QAAQ,eAAe;AACxD,SAAoBC,yBAAyB,QAAQ,mCAAmC;AAExF;;;;AAIA,OAAO,MAAMC,8BAA8B,GAAGC,IAAA,IAQH;EAAA,IALzC;IACDC,WAAW;IACXC,kBAAkB;IAClBC,qBAAqB;IACrBC;EAAY,CAC0B,GAAAJ,IAAA;EACtC;EACA;EACA,IAAIK,gBAAgB,GAAG,IAAI;EAC3B,IAAIC,mBAA2B;EAC/BC,YAAY,CAAC,MAAK;;IACjB,CAAAC,EAAA,GAAAP,WAAW,CAACQ,mBAAmB,cAAAD,EAAA,uBAAAA,EAAA,CAC5BE,SAAS,CAAC,UAAU,EACrBC,IAAI,CAAEC,YAAkC,IAAI;MAC5CA,YAAY,CAACC,EAAE,CAAC,MAAM,EAASC,cAAiC,IAAIC,SAAA;;QACnEV,gBAAgB,GAAG,KAAK;QACxB,IACC,EAACS,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEE,MAAM;QACvB;QACA;QACAV,mBAAmB,MAAKQ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEG,UAAU,GACjD;UACD;;QAEDX,mBAAmB,GAAGQ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEG,UAAoB;QAE1D,MAAMC,aAAa,GAClBC,MAAM,CAACL,cAAc,CAACE,MAAM,CAAC,GAC7BG,MAAM,CAACjB,kBAAkB,CAACkB,WAAW,CAAC,GACtCD,MAAM,CAAC,CAAC,CAAC;QAEVhB,qBAAqB,CAACkB,IAAI,CAAC,cAAc,EAAE;UAC1CH,aAAa,EAAEtB,MAAM,CACpB;YAAEA,MAAM,EAAE;UAAM,CAAE,EAClBsB,aAAwB,EACxBd,YAAY,CACZ;UACDkB,OAAO,EAAE1B,MAAM,CAACC,wBAAwB,EAAEK,kBAAkB,EAAEE,YAAY,CAAC;UAC3EmB,eAAe,EAAE3B,MAAM,CACtB;YAAEA,MAAM,EAAE;UAAS,CAAE,EACrBkB,cAAc,CAACG,UAAmB,EAClCb,YAAY;SAEb,CAAC;QACF,IAAIc,aAAa,IAAIjB,WAAW,CAACuB,6BAA6B,EAAE;UAC/D,MAAM,CAAAhB,EAAA,GAAAP,WAAW,CAACQ,mBAAmB,cAAAD,EAAA,uBAAAA,EAAA,CAAEiB,kBAAkB,CAACb,YAAY,CAAC;;MAEzE,CAAC,EAAC;MACFA,YAAY,CAACC,EAAE,CAAC,OAAO,EAAE,MAAWE,SAAA;;QACnC,MAAM,CAAAW,EAAA,GAAAzB,WAAW,CAACQ,mBAAmB,cAAAiB,EAAA,uBAAAA,EAAA,CAAED,kBAAkB,CAACb,YAAY,CAAC;QAEvEP,gBAAgB,GAAG,KAAK;QACxBP,yBAAyB,CAAC;UACzBG,WAAW;UACXC,kBAAkB;UAClBC,qBAAqB;UACrBC;SACA,CAAC;MACH,CAAC,EAAC;IACH,CAAC,EACAuB,KAAK,CAAC,MAAK;MACXtB,gBAAgB,GAAG,KAAK;MACxBP,yBAAyB,CAAC;QACzBG,WAAW;QACXC,kBAAkB;QAClBC,qBAAqB;QACrBC;OACA,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF;EACAwB,UAAU,CAAC,MAAK;IACf,IAAIvB,gBAAgB,EAAE;MACrBP,yBAAyB,CAAC;QACzBG,WAAW;QACXC,kBAAkB;QAClBC,qBAAqB;QACrBC;OACA,CAAC;;EAEJ,CAAC,EAAEH,WAAW,CAAC4B,kBAAkB,GAAG,IAAI,CAAC;AAC1C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}