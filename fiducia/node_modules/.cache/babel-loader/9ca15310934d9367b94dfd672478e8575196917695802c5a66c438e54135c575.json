{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ResolverMethodMissingError } from 'web3-errors';\nimport { isNullish, sha3 } from 'web3-utils';\nimport { isHexStrict } from 'web3-validator';\nimport { interfaceIds, methodsInInterface } from './config.js';\nimport { namehash } from './utils.js';\n//  Default public resolver\n//  https://github.com/ensdomains/resolvers/blob/master/contracts/PublicResolver.sol\nexport class Resolver {\n  constructor(registry) {\n    this.registry = registry;\n  }\n  getResolverContractAdapter(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      //  TODO : (Future 4.1.0 TDB) cache resolver contract if frequently queried same ENS name, refresh cache based on TTL and usage, also limit cache size, optional cache with a flag\n      return this.registry.getResolver(ENSName);\n    });\n  }\n  //  https://eips.ethereum.org/EIPS/eip-165\n  // eslint-disable-next-line class-methods-use-this\n  checkInterfaceSupport(resolverContract, methodName) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isNullish(interfaceIds[methodName])) throw new ResolverMethodMissingError((_a = resolverContract.options.address) !== null && _a !== void 0 ? _a : '', methodName);\n      const supported = yield resolverContract.methods.supportsInterface(interfaceIds[methodName]).call();\n      if (!supported) throw new ResolverMethodMissingError((_b = resolverContract.options.address) !== null && _b !== void 0 ? _b : '', methodName);\n    });\n  }\n  supportsInterface(ENSName, interfaceId) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      let interfaceIdParam = interfaceId;\n      if (!isHexStrict(interfaceIdParam)) {\n        interfaceIdParam = (_a = sha3(interfaceId)) !== null && _a !== void 0 ? _a : '';\n        if (interfaceId === '') throw new Error('Invalid interface Id');\n        interfaceIdParam = interfaceIdParam.slice(0, 10);\n      }\n      return resolverContract.methods.supportsInterface(interfaceIdParam).call();\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-inferrable-types\n  getAddress(ENSName) {\n    let coinType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      yield this.checkInterfaceSupport(resolverContract, methodsInInterface.addr);\n      return resolverContract.methods.addr(namehash(ENSName), coinType).call();\n    });\n  }\n  getPubkey(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      yield this.checkInterfaceSupport(resolverContract, methodsInInterface.pubkey);\n      return resolverContract.methods.pubkey(namehash(ENSName)).call();\n    });\n  }\n  getContenthash(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      yield this.checkInterfaceSupport(resolverContract, methodsInInterface.contenthash);\n      return resolverContract.methods.contenthash(namehash(ENSName)).call();\n    });\n  }\n}","map":{"version":3,"names":["ResolverMethodMissingError","isNullish","sha3","isHexStrict","interfaceIds","methodsInInterface","namehash","Resolver","constructor","registry","getResolverContractAdapter","ENSName","getResolver","checkInterfaceSupport","resolverContract","methodName","_a","options","address","supported","methods","supportsInterface","call","_b","interfaceId","interfaceIdParam","Error","slice","getAddress","coinType","arguments","length","undefined","addr","getPubkey","pubkey","getContenthash","contenthash"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-ens\\src\\resolver.ts"],"sourcesContent":["ï»¿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { ResolverMethodMissingError } from 'web3-errors';\r\nimport { Contract } from 'web3-eth-contract';\r\nimport { isNullish, sha3 } from 'web3-utils';\r\nimport { isHexStrict } from 'web3-validator';\r\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\r\nimport { interfaceIds, methodsInInterface } from './config.js';\r\nimport { Registry } from './registry.js';\r\nimport { namehash } from './utils.js';\r\n\r\n//  Default public resolver\r\n//  https://github.com/ensdomains/resolvers/blob/master/contracts/PublicResolver.sol\r\n\r\nexport class Resolver {\r\n\tprivate readonly registry: Registry;\r\n\r\n\tpublic constructor(registry: Registry) {\r\n\t\tthis.registry = registry;\r\n\t}\r\n\r\n\tprivate async getResolverContractAdapter(ENSName: string) {\r\n\t\t//  TODO : (Future 4.1.0 TDB) cache resolver contract if frequently queried same ENS name, refresh cache based on TTL and usage, also limit cache size, optional cache with a flag\r\n\t\treturn this.registry.getResolver(ENSName);\r\n\t}\r\n\r\n\t//  https://eips.ethereum.org/EIPS/eip-165\r\n\t// eslint-disable-next-line class-methods-use-this\r\n\tpublic async checkInterfaceSupport(\r\n\t\tresolverContract: Contract<typeof PublicResolverAbi>,\r\n\t\tmethodName: string,\r\n\t) {\r\n\t\tif (isNullish(interfaceIds[methodName]))\r\n\t\t\tthrow new ResolverMethodMissingError(\r\n\t\t\t\tresolverContract.options.address ?? '',\r\n\t\t\t\tmethodName,\r\n\t\t\t);\r\n\r\n\t\tconst supported = await resolverContract.methods\r\n\t\t\t.supportsInterface(interfaceIds[methodName])\r\n\t\t\t.call();\r\n\r\n\t\tif (!supported)\r\n\t\t\tthrow new ResolverMethodMissingError(\r\n\t\t\t\tresolverContract.options.address ?? '',\r\n\t\t\t\tmethodName,\r\n\t\t\t);\r\n\t}\r\n\r\n\tpublic async supportsInterface(ENSName: string, interfaceId: string) {\r\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\r\n\r\n\t\tlet interfaceIdParam = interfaceId;\r\n\r\n\t\tif (!isHexStrict(interfaceIdParam)) {\r\n\t\t\tinterfaceIdParam = sha3(interfaceId) ?? '';\r\n\r\n\t\t\tif (interfaceId === '') throw new Error('Invalid interface Id');\r\n\r\n\t\t\tinterfaceIdParam = interfaceIdParam.slice(0, 10);\r\n\t\t}\r\n\r\n\t\treturn resolverContract.methods.supportsInterface(interfaceIdParam).call();\r\n\t}\r\n\r\n\t// eslint-disable-next-line @typescript-eslint/no-inferrable-types\r\n\tpublic async getAddress(ENSName: string, coinType: number = 60) {\r\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\r\n\r\n\t\tawait this.checkInterfaceSupport(resolverContract, methodsInInterface.addr);\r\n\r\n\t\treturn resolverContract.methods.addr(namehash(ENSName), coinType).call();\r\n\t}\r\n\r\n\tpublic async getPubkey(ENSName: string) {\r\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\r\n\r\n\t\tawait this.checkInterfaceSupport(resolverContract, methodsInInterface.pubkey);\r\n\r\n\t\treturn resolverContract.methods.pubkey(namehash(ENSName)).call();\r\n\t}\r\n\r\n\tpublic async getContenthash(ENSName: string) {\r\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\r\n\r\n\t\tawait this.checkInterfaceSupport(resolverContract, methodsInInterface.contenthash);\r\n\r\n\t\treturn resolverContract.methods.contenthash(namehash(ENSName)).call();\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}