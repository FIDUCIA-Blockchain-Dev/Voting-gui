{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth\\src\\types.ts"],"sourcesContent":["ï»¿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport {\r\n\tContractExecutionError,\r\n\tTransactionRevertedWithoutReasonError,\r\n\tTransactionRevertInstructionError,\r\n\tTransactionRevertWithCustomError,\r\n\tInvalidResponseError,\r\n} from 'web3-errors';\r\nimport {\r\n\tFormatType,\r\n\tETH_DATA_FORMAT,\r\n\tDataFormat,\r\n\tBytes,\r\n\tContractAbi,\r\n\tHexString,\r\n\tNumbers,\r\n\tTransaction,\r\n\tTransactionReceipt,\r\n} from 'web3-types';\r\n\r\nexport type InternalTransaction = FormatType<Transaction, typeof ETH_DATA_FORMAT>;\r\n\r\nexport type SendTransactionEvents<ReturnFormat extends DataFormat> = {\r\n\tsending: FormatType<Transaction, typeof ETH_DATA_FORMAT>;\r\n\tsent: FormatType<Transaction, typeof ETH_DATA_FORMAT>;\r\n\ttransactionHash: FormatType<Bytes, ReturnFormat>;\r\n\treceipt: FormatType<TransactionReceipt, ReturnFormat>;\r\n\tconfirmation: {\r\n\t\tconfirmations: FormatType<Numbers, ReturnFormat>;\r\n\t\treceipt: FormatType<TransactionReceipt, ReturnFormat>;\r\n\t\tlatestBlockHash: FormatType<Bytes, ReturnFormat>;\r\n\t};\r\n\terror:\r\n\t\t| TransactionRevertedWithoutReasonError<FormatType<TransactionReceipt, ReturnFormat>>\r\n\t\t| TransactionRevertInstructionError<FormatType<TransactionReceipt, ReturnFormat>>\r\n\t\t| TransactionRevertWithCustomError<FormatType<TransactionReceipt, ReturnFormat>>\r\n\t\t| InvalidResponseError\r\n\t\t| ContractExecutionError;\r\n};\r\n\r\nexport type SendSignedTransactionEvents<ReturnFormat extends DataFormat> = {\r\n\tsending: FormatType<Bytes, typeof ETH_DATA_FORMAT>;\r\n\tsent: FormatType<Bytes, typeof ETH_DATA_FORMAT>;\r\n\ttransactionHash: FormatType<Bytes, ReturnFormat>;\r\n\treceipt: FormatType<TransactionReceipt, ReturnFormat>;\r\n\tconfirmation: {\r\n\t\tconfirmations: FormatType<Numbers, ReturnFormat>;\r\n\t\treceipt: FormatType<TransactionReceipt, ReturnFormat>;\r\n\t\tlatestBlockHash: FormatType<Bytes, ReturnFormat>;\r\n\t};\r\n\terror:\r\n\t\t| TransactionRevertedWithoutReasonError<FormatType<TransactionReceipt, ReturnFormat>>\r\n\t\t| TransactionRevertInstructionError<FormatType<TransactionReceipt, ReturnFormat>>\r\n\t\t| TransactionRevertWithCustomError<FormatType<TransactionReceipt, ReturnFormat>>\r\n\t\t| InvalidResponseError\r\n\t\t| ContractExecutionError;\r\n};\r\n\r\nexport interface SendTransactionOptions<ResolveType = TransactionReceipt> {\r\n\tignoreGasPricing?: boolean;\r\n\ttransactionResolver?: (receipt: TransactionReceipt) => ResolveType;\r\n\tcontractAbi?: ContractAbi;\r\n\tcheckRevertBeforeSending?: boolean;\r\n}\r\n\r\nexport interface SendSignedTransactionOptions<ResolveType = TransactionReceipt> {\r\n\ttransactionResolver?: (receipt: TransactionReceipt) => ResolveType;\r\n\tcontractAbi?: ContractAbi;\r\n\tcheckRevertBeforeSending?: boolean;\r\n}\r\n\r\nexport interface RevertReason {\r\n\treason: string;\r\n\tsignature?: HexString;\r\n\tdata?: HexString;\r\n}\r\n\r\nexport interface RevertReasonWithCustomError extends RevertReason {\r\n\tcustomErrorName: string;\r\n\tcustomErrorDecodedSignature: string;\r\n\tcustomErrorArguments: Record<string, unknown>;\r\n}\r\n"],"mappings":"AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}