{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { ProviderError, SubscriptionError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSupportSubscriptions } from './utils.js';\nimport { Web3RequestManagerEvent } from './web3_request_manager.js';\nexport class Web3SubscriptionManager {\n  constructor(requestManager, registeredSubscriptions) {\n    let tolerateUnlinkedSubscription = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.requestManager = requestManager;\n    this.registeredSubscriptions = registeredSubscriptions;\n    this.tolerateUnlinkedSubscription = tolerateUnlinkedSubscription;\n    this._subscriptions = new Map();\n    this.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, () => __awaiter(this, void 0, void 0, function* () {\n      yield this.unsubscribe();\n    }));\n    this.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {\n      this.clear();\n      this.listenToProviderEvents();\n    });\n    this.listenToProviderEvents();\n  }\n  listenToProviderEvents() {\n    const providerAsWebProvider = this.requestManager.provider;\n    if (!this.requestManager.provider || typeof (providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions) === 'function' && !(providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions())) {\n      return;\n    }\n    if (typeof this.requestManager.provider.on === 'function') {\n      if (typeof this.requestManager.provider.request === 'function') {\n        // Listen to provider messages and data\n        this.requestManager.provider.on('message',\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        message => this.messageListener(message));\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        providerAsWebProvider.on('data', data => this.messageListener(data));\n      }\n    }\n  }\n  messageListener(data) {\n    var _a, _b, _c;\n    if (!data) {\n      throw new SubscriptionError('Should not call messageListener with no data. Type was');\n    }\n    const subscriptionId = ((_a = data.params) === null || _a === void 0 ? void 0 : _a.subscription) || ((_b = data.data) === null || _b === void 0 ? void 0 : _b.subscription) || ((_c = data.id) === null || _c === void 0 ? void 0 : _c.toString(16));\n    // Process if the received data is related to a subscription\n    if (subscriptionId) {\n      const sub = this._subscriptions.get(subscriptionId);\n      sub === null || sub === void 0 ? void 0 : sub.processSubscriptionData(data);\n    }\n  }\n  /**\r\n   * Will create a new subscription\r\n   *\r\n   * @param name - The subscription you want to subscribe to\r\n   * @param args - Optional additional parameters, depending on the subscription type\r\n   * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n   *\r\n   * Will subscribe to a specific topic (note: name)\r\n   * @returns The subscription object\r\n   */\n  subscribe(name, args) {\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      const Klass = this.registeredSubscriptions[name];\n      if (!Klass) {\n        throw new SubscriptionError('Invalid subscription type');\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      const subscription = new Klass(args !== null && args !== void 0 ? args : undefined, {\n        subscriptionManager: this,\n        returnFormat\n      });\n      yield this.addSubscription(subscription);\n      return subscription;\n    });\n  }\n  /**\r\n   * Will returns all subscriptions.\r\n   */\n  get subscriptions() {\n    return this._subscriptions;\n  }\n  /**\r\n   *\r\n   * Adds an instance of {@link Web3Subscription} and subscribes to it\r\n   *\r\n   * @param sub - A {@link Web3Subscription} object\r\n   */\n  addSubscription(sub) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.requestManager.provider) {\n        throw new ProviderError('Provider not available');\n      }\n      if (!this.supportsSubscriptions()) {\n        throw new SubscriptionError('The current provider does not support subscriptions');\n      }\n      if (sub.id && this._subscriptions.has(sub.id)) {\n        throw new SubscriptionError(`Subscription with id \"${sub.id}\" already exists`);\n      }\n      yield sub.sendSubscriptionRequest();\n      if (isNullish(sub.id)) {\n        throw new SubscriptionError('Subscription is not subscribed yet.');\n      }\n      this._subscriptions.set(sub.id, sub);\n      return sub.id;\n    });\n  }\n  /**\r\n   * Will clear a subscription\r\n   *\r\n   * @param id - The subscription of type {@link Web3Subscription}  to remove\r\n   */\n  removeSubscription(sub) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        id\n      } = sub;\n      if (isNullish(id)) {\n        throw new SubscriptionError('Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.');\n      }\n      if (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) {\n        throw new SubscriptionError(`Subscription with id \"${id.toString()}\" does not exists`);\n      }\n      yield sub.sendUnsubscribeRequest();\n      this._subscriptions.delete(id);\n      return id;\n    });\n  }\n  /**\r\n   * Will unsubscribe all subscriptions that fulfill the condition\r\n   *\r\n   * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`\r\n   * @returns An array of all the un-subscribed subscriptions\r\n   */\n  unsubscribe(condition) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = [];\n      for (const [id, sub] of this.subscriptions.entries()) {\n        if (!condition || typeof condition === 'function' && condition({\n          id,\n          sub\n        })) {\n          result.push(this.removeSubscription(sub));\n        }\n      }\n      return Promise.all(result);\n    });\n  }\n  /**\r\n   * Clears all subscriptions\r\n   */\n  clear() {\n    this._subscriptions.clear();\n  }\n  /**\r\n   * Check whether the current provider supports subscriptions.\r\n   *\r\n   * @returns `true` or `false` depending on if the current provider supports subscriptions\r\n   */\n  supportsSubscriptions() {\n    return isNullish(this.requestManager.provider) ? false : isSupportSubscriptions(this.requestManager.provider);\n  }\n}","map":{"version":3,"names":["DEFAULT_RETURN_FORMAT","ProviderError","SubscriptionError","isNullish","isSupportSubscriptions","Web3RequestManagerEvent","Web3SubscriptionManager","constructor","requestManager","registeredSubscriptions","tolerateUnlinkedSubscription","arguments","length","undefined","_subscriptions","Map","on","BEFORE_PROVIDER_CHANGE","__awaiter","unsubscribe","PROVIDER_CHANGED","clear","listenToProviderEvents","providerAsWebProvider","provider","supportsSubscriptions","request","message","messageListener","data","subscriptionId","_a","params","subscription","_b","_c","id","toString","sub","get","processSubscriptionData","subscribe","name","args","returnFormat","Klass","subscriptionManager","addSubscription","subscriptions","has","sendSubscriptionRequest","set","removeSubscription","sendUnsubscribeRequest","delete","condition","result","entries","push","Promise","all"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-core\\src\\web3_subscription_manager.ts"],"sourcesContent":["ï»¿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport {\r\n\tDataFormat,\r\n\tDEFAULT_RETURN_FORMAT,\r\n\tEIP1193Provider,\r\n\tJsonRpcNotification,\r\n\tJsonRpcSubscriptionResult,\r\n\tJsonRpcSubscriptionResultOld,\r\n\tLog,\r\n\tWeb3APISpec,\r\n\tWeb3BaseProvider,\r\n} from 'web3-types';\r\nimport { ProviderError, SubscriptionError } from 'web3-errors';\r\nimport { isNullish } from 'web3-utils';\r\nimport { isSupportSubscriptions } from './utils.js';\r\nimport { Web3RequestManager, Web3RequestManagerEvent } from './web3_request_manager.js';\r\n// eslint-disable-next-line import/no-cycle\r\nimport { Web3SubscriptionConstructor } from './web3_subscriptions.js';\r\n\r\ntype ShouldUnsubscribeCondition = ({\r\n\tid,\r\n\tsub,\r\n}: {\r\n\tid: string;\r\n\tsub: unknown;\r\n}) => boolean | undefined;\r\n\r\nexport class Web3SubscriptionManager<\r\n\tAPI extends Web3APISpec = Web3APISpec,\r\n\tRegisteredSubs extends { [key: string]: Web3SubscriptionConstructor<API> } = {\r\n\t\t[key: string]: Web3SubscriptionConstructor<API>;\r\n\t},\r\n> {\r\n\tprivate readonly _subscriptions: Map<\r\n\t\tstring,\r\n\t\tInstanceType<RegisteredSubs[keyof RegisteredSubs]>\r\n\t> = new Map();\r\n\r\n\t/**\r\n\t *\r\n\t * @param - requestManager\r\n\t * @param - registeredSubscriptions\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const requestManager = new Web3RequestManager(\"ws://localhost:8545\");\r\n\t * const subscriptionManager = new Web3SubscriptionManager(requestManager, {});\r\n\t * ```\r\n\t */\r\n\tpublic constructor(\r\n\t\trequestManager: Web3RequestManager<API>,\r\n\t\tregisteredSubscriptions: RegisteredSubs,\r\n\t);\r\n\t/**\r\n\t * @deprecated This constructor overloading should not be used\r\n\t */\r\n\tpublic constructor(\r\n\t\trequestManager: Web3RequestManager<API>,\r\n\t\tregisteredSubscriptions: RegisteredSubs,\r\n\t\ttolerateUnlinkedSubscription: boolean,\r\n\t);\r\n\tpublic constructor(\r\n\t\tpublic readonly requestManager: Web3RequestManager<API>,\r\n\t\tpublic readonly registeredSubscriptions: RegisteredSubs,\r\n\t\tprivate readonly tolerateUnlinkedSubscription: boolean = false,\r\n\t) {\r\n\t\tthis.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, async () => {\r\n\t\t\tawait this.unsubscribe();\r\n\t\t});\r\n\r\n\t\tthis.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {\r\n\t\t\tthis.clear();\r\n\t\t\tthis.listenToProviderEvents();\r\n\t\t});\r\n\r\n\t\tthis.listenToProviderEvents();\r\n\t}\r\n\r\n\tprivate listenToProviderEvents() {\r\n\t\tconst providerAsWebProvider = this.requestManager.provider as Web3BaseProvider;\r\n\t\tif (\r\n\t\t\t!this.requestManager.provider ||\r\n\t\t\t(typeof providerAsWebProvider?.supportsSubscriptions === 'function' &&\r\n\t\t\t\t!providerAsWebProvider?.supportsSubscriptions())\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (typeof (this.requestManager.provider as EIP1193Provider<API>).on === 'function') {\r\n\t\t\tif (\r\n\t\t\t\ttypeof (this.requestManager.provider as EIP1193Provider<API>).request === 'function'\r\n\t\t\t) {\r\n\t\t\t\t// Listen to provider messages and data\r\n\t\t\t\t(this.requestManager.provider as EIP1193Provider<API>).on(\r\n\t\t\t\t\t'message',\r\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\r\n\t\t\t\t\t(message: any) => this.messageListener(message),\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\r\n\t\t\t\tproviderAsWebProvider.on<Log>('data', (data: any) => this.messageListener(data));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected messageListener(\r\n\t\tdata?:\r\n\t\t\t| JsonRpcSubscriptionResult\r\n\t\t\t| JsonRpcSubscriptionResultOld<Log>\r\n\t\t\t| JsonRpcNotification<Log>,\r\n\t) {\r\n\t\tif (!data) {\r\n\t\t\tthrow new SubscriptionError('Should not call messageListener with no data. Type was');\r\n\t\t}\r\n\t\tconst subscriptionId =\r\n\t\t\t(data as JsonRpcNotification).params?.subscription ||\r\n\t\t\t(data as JsonRpcSubscriptionResultOld).data?.subscription ||\r\n\t\t\t(data as JsonRpcSubscriptionResult).id?.toString(16);\r\n\r\n\t\t// Process if the received data is related to a subscription\r\n\t\tif (subscriptionId) {\r\n\t\t\tconst sub = this._subscriptions.get(subscriptionId);\r\n\t\t\tsub?.processSubscriptionData(data);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Will create a new subscription\r\n\t *\r\n\t * @param name - The subscription you want to subscribe to\r\n\t * @param args - Optional additional parameters, depending on the subscription type\r\n\t * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\r\n\t *\r\n\t * Will subscribe to a specific topic (note: name)\r\n\t * @returns The subscription object\r\n\t */\r\n\tpublic async subscribe<T extends keyof RegisteredSubs>(\r\n\t\tname: T,\r\n\t\targs?: ConstructorParameters<RegisteredSubs[T]>[0],\r\n\t\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\r\n\t): Promise<InstanceType<RegisteredSubs[T]>> {\r\n\t\tconst Klass: RegisteredSubs[T] = this.registeredSubscriptions[name];\r\n\t\tif (!Klass) {\r\n\t\t\tthrow new SubscriptionError('Invalid subscription type');\r\n\t\t}\r\n\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n\t\tconst subscription = new Klass(args ?? undefined, {\r\n\t\t\tsubscriptionManager: this as Web3SubscriptionManager<API, RegisteredSubs>,\r\n\t\t\treturnFormat,\r\n\t\t} as any) as InstanceType<RegisteredSubs[T]>;\r\n\r\n\t\tawait this.addSubscription(subscription);\r\n\r\n\t\treturn subscription;\r\n\t}\r\n\r\n\t/**\r\n\t * Will returns all subscriptions.\r\n\t */\r\n\tpublic get subscriptions() {\r\n\t\treturn this._subscriptions;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * Adds an instance of {@link Web3Subscription} and subscribes to it\r\n\t *\r\n\t * @param sub - A {@link Web3Subscription} object\r\n\t */\r\n\tpublic async addSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>) {\r\n\t\tif (!this.requestManager.provider) {\r\n\t\t\tthrow new ProviderError('Provider not available');\r\n\t\t}\r\n\r\n\t\tif (!this.supportsSubscriptions()) {\r\n\t\t\tthrow new SubscriptionError('The current provider does not support subscriptions');\r\n\t\t}\r\n\r\n\t\tif (sub.id && this._subscriptions.has(sub.id)) {\r\n\t\t\tthrow new SubscriptionError(`Subscription with id \"${sub.id}\" already exists`);\r\n\t\t}\r\n\r\n\t\tawait sub.sendSubscriptionRequest();\r\n\r\n\t\tif (isNullish(sub.id)) {\r\n\t\t\tthrow new SubscriptionError('Subscription is not subscribed yet.');\r\n\t\t}\r\n\r\n\t\tthis._subscriptions.set(sub.id, sub);\r\n\r\n\t\treturn sub.id;\r\n\t}\r\n\r\n\t/**\r\n\t * Will clear a subscription\r\n\t *\r\n\t * @param id - The subscription of type {@link Web3Subscription}  to remove\r\n\t */\r\n\tpublic async removeSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>) {\r\n\t\tconst { id } = sub;\r\n\r\n\t\tif (isNullish(id)) {\r\n\t\t\tthrow new SubscriptionError(\r\n\t\t\t\t'Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.',\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) {\r\n\t\t\tthrow new SubscriptionError(`Subscription with id \"${id.toString()}\" does not exists`);\r\n\t\t}\r\n\r\n\t\tawait sub.sendUnsubscribeRequest();\r\n\t\tthis._subscriptions.delete(id);\r\n\t\treturn id;\r\n\t}\r\n\t/**\r\n\t * Will unsubscribe all subscriptions that fulfill the condition\r\n\t *\r\n\t * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`\r\n\t * @returns An array of all the un-subscribed subscriptions\r\n\t */\r\n\tpublic async unsubscribe(condition?: ShouldUnsubscribeCondition) {\r\n\t\tconst result = [];\r\n\t\tfor (const [id, sub] of this.subscriptions.entries()) {\r\n\t\t\tif (!condition || (typeof condition === 'function' && condition({ id, sub }))) {\r\n\t\t\t\tresult.push(this.removeSubscription(sub));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn Promise.all(result);\r\n\t}\r\n\r\n\t/**\r\n\t * Clears all subscriptions\r\n\t */\r\n\tpublic clear() {\r\n\t\tthis._subscriptions.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Check whether the current provider supports subscriptions.\r\n\t *\r\n\t * @returns `true` or `false` depending on if the current provider supports subscriptions\r\n\t */\r\n\tpublic supportsSubscriptions(): boolean {\r\n\t\treturn isNullish(this.requestManager.provider)\r\n\t\t\t? false\r\n\t\t\t: isSupportSubscriptions(this.requestManager.provider);\r\n\t}\r\n}\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAECA,qBAAqB,QAQf,YAAY;AACnB,SAASC,aAAa,EAAEC,iBAAiB,QAAQ,aAAa;AAC9D,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,sBAAsB,QAAQ,YAAY;AACnD,SAA6BC,uBAAuB,QAAQ,2BAA2B;AAYvF,OAAM,MAAOC,uBAAuB;EAkCnCC,YACiBC,cAAuC,EACvCC,uBAAuC,EACO;IAAA,IAA7CC,4BAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwC,KAAK;IAF9C,KAAAH,cAAc,GAAdA,cAAc;IACd,KAAAC,uBAAuB,GAAvBA,uBAAuB;IACtB,KAAAC,4BAA4B,GAA5BA,4BAA4B;IA/B7B,KAAAI,cAAc,GAG3B,IAAIC,GAAG,EAAE;IA8BZ,IAAI,CAACP,cAAc,CAACQ,EAAE,CAACX,uBAAuB,CAACY,sBAAsB,EAAE,MAAWC,SAAA;MACjF,MAAM,IAAI,CAACC,WAAW,EAAE;IACzB,CAAC,EAAC;IAEF,IAAI,CAACX,cAAc,CAACQ,EAAE,CAACX,uBAAuB,CAACe,gBAAgB,EAAE,MAAK;MACrE,IAAI,CAACC,KAAK,EAAE;MACZ,IAAI,CAACC,sBAAsB,EAAE;IAC9B,CAAC,CAAC;IAEF,IAAI,CAACA,sBAAsB,EAAE;EAC9B;EAEQA,sBAAsBA,CAAA;IAC7B,MAAMC,qBAAqB,GAAG,IAAI,CAACf,cAAc,CAACgB,QAA4B;IAC9E,IACC,CAAC,IAAI,CAAChB,cAAc,CAACgB,QAAQ,IAC5B,QAAOD,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEE,qBAAqB,MAAK,UAAU,IAClE,EAACF,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEE,qBAAqB,EAAE,CAAC,EAChD;MACD;;IAGD,IAAI,OAAQ,IAAI,CAACjB,cAAc,CAACgB,QAAiC,CAACR,EAAE,KAAK,UAAU,EAAE;MACpF,IACC,OAAQ,IAAI,CAACR,cAAc,CAACgB,QAAiC,CAACE,OAAO,KAAK,UAAU,EACnF;QACD;QACC,IAAI,CAAClB,cAAc,CAACgB,QAAiC,CAACR,EAAE,CACxD,SAAS;QACT;QACCW,OAAY,IAAK,IAAI,CAACC,eAAe,CAACD,OAAO,CAAC,CAC/C;OACD,MAAM;QACN;QACAJ,qBAAqB,CAACP,EAAE,CAAM,MAAM,EAAGa,IAAS,IAAK,IAAI,CAACD,eAAe,CAACC,IAAI,CAAC,CAAC;;;EAGnF;EAEUD,eAAeA,CACxBC,IAG2B;;IAE3B,IAAI,CAACA,IAAI,EAAE;MACV,MAAM,IAAI3B,iBAAiB,CAAC,wDAAwD,CAAC;;IAEtF,MAAM4B,cAAc,GACnB,EAAAC,EAAA,GAACF,IAA4B,CAACG,MAAM,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,YAAY,MAClD,CAAAC,EAAA,GAACL,IAAqC,CAACA,IAAI,cAAAK,EAAA,uBAAAA,EAAA,CAAED,YAAY,MACzD,CAAAE,EAAA,GAACN,IAAkC,CAACO,EAAE,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,QAAQ,CAAC,EAAE,CAAC;IAErD;IACA,IAAIP,cAAc,EAAE;MACnB,MAAMQ,GAAG,GAAG,IAAI,CAACxB,cAAc,CAACyB,GAAG,CAACT,cAAc,CAAC;MACnDQ,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEE,uBAAuB,CAACX,IAAI,CAAC;;EAEpC;EACA;;;;;;;;;;EAUaY,SAASA,CACrBC,IAAO,EACPC,IAAkD,EACF;IAAA,IAAhDC,YAAA,GAAAjC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2BX,qBAAqB;;MAEhD,MAAM6C,KAAK,GAAsB,IAAI,CAACpC,uBAAuB,CAACiC,IAAI,CAAC;MACnE,IAAI,CAACG,KAAK,EAAE;QACX,MAAM,IAAI3C,iBAAiB,CAAC,2BAA2B,CAAC;;MAGzD;MACA,MAAM+B,YAAY,GAAG,IAAIY,KAAK,CAACF,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI9B,SAAS,EAAE;QACjDiC,mBAAmB,EAAE,IAAoD;QACzEF;OACO,CAAoC;MAE5C,MAAM,IAAI,CAACG,eAAe,CAACd,YAAY,CAAC;MAExC,OAAOA,YAAY;IACpB,CAAC;;EAED;;;EAGA,IAAWe,aAAaA,CAAA;IACvB,OAAO,IAAI,CAAClC,cAAc;EAC3B;EAEA;;;;;;EAMaiC,eAAeA,CAACT,GAAuD;;MACnF,IAAI,CAAC,IAAI,CAAC9B,cAAc,CAACgB,QAAQ,EAAE;QAClC,MAAM,IAAIvB,aAAa,CAAC,wBAAwB,CAAC;;MAGlD,IAAI,CAAC,IAAI,CAACwB,qBAAqB,EAAE,EAAE;QAClC,MAAM,IAAIvB,iBAAiB,CAAC,qDAAqD,CAAC;;MAGnF,IAAIoC,GAAG,CAACF,EAAE,IAAI,IAAI,CAACtB,cAAc,CAACmC,GAAG,CAACX,GAAG,CAACF,EAAE,CAAC,EAAE;QAC9C,MAAM,IAAIlC,iBAAiB,CAAC,yBAAyBoC,GAAG,CAACF,EAAE,kBAAkB,CAAC;;MAG/E,MAAME,GAAG,CAACY,uBAAuB,EAAE;MAEnC,IAAI/C,SAAS,CAACmC,GAAG,CAACF,EAAE,CAAC,EAAE;QACtB,MAAM,IAAIlC,iBAAiB,CAAC,qCAAqC,CAAC;;MAGnE,IAAI,CAACY,cAAc,CAACqC,GAAG,CAACb,GAAG,CAACF,EAAE,EAAEE,GAAG,CAAC;MAEpC,OAAOA,GAAG,CAACF,EAAE;IACd,CAAC;;EAED;;;;;EAKagB,kBAAkBA,CAACd,GAAuD;;MACtF,MAAM;QAAEF;MAAE,CAAE,GAAGE,GAAG;MAElB,IAAInC,SAAS,CAACiC,EAAE,CAAC,EAAE;QAClB,MAAM,IAAIlC,iBAAiB,CAC1B,iHAAiH,CACjH;;MAGF,IAAI,CAAC,IAAI,CAACY,cAAc,CAACmC,GAAG,CAACb,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC1B,4BAA4B,EAAE;QACvE,MAAM,IAAIR,iBAAiB,CAAC,yBAAyBkC,EAAE,CAACC,QAAQ,EAAE,mBAAmB,CAAC;;MAGvF,MAAMC,GAAG,CAACe,sBAAsB,EAAE;MAClC,IAAI,CAACvC,cAAc,CAACwC,MAAM,CAAClB,EAAE,CAAC;MAC9B,OAAOA,EAAE;IACV,CAAC;;EACD;;;;;;EAMajB,WAAWA,CAACoC,SAAsC;;MAC9D,MAAMC,MAAM,GAAG,EAAE;MACjB,KAAK,MAAM,CAACpB,EAAE,EAAEE,GAAG,CAAC,IAAI,IAAI,CAACU,aAAa,CAACS,OAAO,EAAE,EAAE;QACrD,IAAI,CAACF,SAAS,IAAK,OAAOA,SAAS,KAAK,UAAU,IAAIA,SAAS,CAAC;UAAEnB,EAAE;UAAEE;QAAG,CAAE,CAAE,EAAE;UAC9EkB,MAAM,CAACE,IAAI,CAAC,IAAI,CAACN,kBAAkB,CAACd,GAAG,CAAC,CAAC;;;MAI3C,OAAOqB,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;IAC3B,CAAC;;EAED;;;EAGOnC,KAAKA,CAAA;IACX,IAAI,CAACP,cAAc,CAACO,KAAK,EAAE;EAC5B;EAEA;;;;;EAKOI,qBAAqBA,CAAA;IAC3B,OAAOtB,SAAS,CAAC,IAAI,CAACK,cAAc,CAACgB,QAAQ,CAAC,GAC3C,KAAK,GACLpB,sBAAsB,CAAC,IAAI,CAACI,cAAc,CAACgB,QAAQ,CAAC;EACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}