{"ast":null,"code":"import { bytesToHex, format, hexToBytes, keccak256 } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { detectRawTransactionType } from './detect_transaction_type.js';\nimport { formatTransaction } from './format_transaction.js';\n/**\r\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\r\n *\r\n * @param encodedSignedTransaction The RLP encoded transaction.\r\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\r\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\r\n */\nexport function decodeSignedTransaction(encodedSignedTransaction, returnFormat) {\n  return {\n    raw: format({\n      format: 'bytes'\n    }, encodedSignedTransaction, returnFormat),\n    tx: formatTransaction(Object.assign(Object.assign({}, TransactionFactory.fromSerializedData(hexToBytes(encodedSignedTransaction)).toJSON()), {\n      hash: bytesToHex(keccak256(hexToBytes(encodedSignedTransaction))),\n      type: detectRawTransactionType(hexToBytes(encodedSignedTransaction))\n    }), returnFormat)\n  };\n}","map":{"version":3,"names":["bytesToHex","format","hexToBytes","keccak256","TransactionFactory","detectRawTransactionType","formatTransaction","decodeSignedTransaction","encodedSignedTransaction","returnFormat","raw","tx","Object","assign","fromSerializedData","toJSON","hash","type"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth\\src\\utils\\decode_signed_transaction.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport {\r\n\tDataFormat,\r\n\tHexStringBytes,\r\n\tSignedTransactionInfoAPI,\r\n\tTransactionSignedAPI,\r\n} from 'web3-types';\r\nimport { bytesToHex, format, hexToBytes, keccak256 } from 'web3-utils';\r\nimport { TransactionFactory } from 'web3-eth-accounts';\r\nimport { detectRawTransactionType } from './detect_transaction_type.js';\r\nimport { formatTransaction } from './format_transaction.js';\r\n\r\n/**\r\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\r\n *\r\n * @param encodedSignedTransaction The RLP encoded transaction.\r\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\r\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\r\n */\r\nexport function decodeSignedTransaction<ReturnFormat extends DataFormat>(\r\n\tencodedSignedTransaction: HexStringBytes,\r\n\treturnFormat: ReturnFormat,\r\n): SignedTransactionInfoAPI {\r\n\treturn {\r\n\t\traw: format({ format: 'bytes' }, encodedSignedTransaction, returnFormat),\r\n\t\ttx: formatTransaction(\r\n\t\t\t{\r\n\t\t\t\t...TransactionFactory.fromSerializedData(\r\n\t\t\t\t\thexToBytes(encodedSignedTransaction),\r\n\t\t\t\t).toJSON(),\r\n\t\t\t\thash: bytesToHex(keccak256(hexToBytes(encodedSignedTransaction))),\r\n\t\t\t\ttype: detectRawTransactionType(hexToBytes(encodedSignedTransaction)),\r\n\t\t\t} as TransactionSignedAPI,\r\n\t\t\treturnFormat,\r\n\t\t),\r\n\t};\r\n}\r\n"],"mappings":"AAsBA,SAASA,UAAU,EAAEC,MAAM,EAAEC,UAAU,EAAEC,SAAS,QAAQ,YAAY;AACtE,SAASC,kBAAkB,QAAQ,mBAAmB;AACtD,SAASC,wBAAwB,QAAQ,8BAA8B;AACvE,SAASC,iBAAiB,QAAQ,yBAAyB;AAE3D;;;;;;;AAOA,OAAM,SAAUC,uBAAuBA,CACtCC,wBAAwC,EACxCC,YAA0B;EAE1B,OAAO;IACNC,GAAG,EAAET,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAO,CAAE,EAAEO,wBAAwB,EAAEC,YAAY,CAAC;IACxEE,EAAE,EAAEL,iBAAiB,CACpBM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACIT,kBAAkB,CAACU,kBAAkB,CACvCZ,UAAU,CAACM,wBAAwB,CAAC,CACpC,CAACO,MAAM,EAAE;MACVC,IAAI,EAAEhB,UAAU,CAACG,SAAS,CAACD,UAAU,CAACM,wBAAwB,CAAC,CAAC,CAAC;MACjES,IAAI,EAAEZ,wBAAwB,CAACH,UAAU,CAACM,wBAAwB,CAAC;IAAC,EAC5C,EACzBC,YAAY;GAEb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}