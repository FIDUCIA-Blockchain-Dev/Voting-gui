{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n/**\r\n * This is the main (or 'umbrella') class of the web3.js library.\r\n *\r\n * ```ts\r\n * import Web3 from 'web3';\r\n *\r\n * > Web3.utils\r\n * > Web3.version\r\n * > Web3.givenProvider\r\n * > Web3.providers\r\n * > Web3.modules\r\n * ```\r\n *\r\n * # Web3.modules\r\n *\r\n * ```ts\r\n * Web3.modules\r\n * ```\r\n *\r\n * Will return an object with the classes of all major sub modules, to be able to instantiate them manually.\r\n *\r\n * #### Returns\r\n *\r\n *  `Object` A list of module constructors:\r\n *\r\n *\r\n *  + `Eth` - `Constructor`: The Eth module for interacting with the Ethereum network\r\n *\r\n *\r\n *  + `Net` - `Constructor`: The Net module for interacting with network properties.\r\n *\r\n *\r\n *  + `Personal` - `constructor`: The Personal module for interacting with the Ethereum accounts (web3.eth.personal).\r\n *\r\n * #### Example\r\n *\r\n * ```ts\r\n * Web3.modules\r\n * > {\r\n *   \tEth: Eth(provider),\r\n *   \tNet: Net(provider),\r\n *   \tPersonal: Personal(provider),\r\n *   }\r\n * ```\r\n *\r\n * See details: {@link Web3.modules}\r\n *\r\n * # Web3 Instance\r\n *\r\n * The Web3 class is an umbrella package to house all Ethereum related modules.\r\n *\r\n * ```ts\r\n * import Web3 from 'web3';\r\n *\r\n * // \"Web3.givenProvider\" will be set if in an Ethereum supported browser.\r\n * const web3 = new Web3(Web3.givenProvider || 'ws://some.local-or-remote.node:8546');\r\n *\r\n * > web3.eth\r\n * > web3.utils\r\n * > web3.version\r\n * ```\r\n *\r\n * ### version\r\n *\r\n * Contains the current package version of the web3.js library.\r\n *\r\n * #### Returns\r\n * //todo enable when functionality added\r\n * // @see Web3.version\r\n *\r\n * ### utils\r\n *\r\n * Static accessible property of the Web3 class and property of the instance as well.\r\n *\r\n * ```ts\r\n * Web3.utils\r\n * web3.utils\r\n * ```\r\n *\r\n * Utility functions are also exposed on the `Web3` class object diretly.\r\n *\r\n * //todo enable when implemented\r\n * //See details: {@link Web3.utils}\r\n *\r\n * ### setProvider\r\n *\r\n * ```ts\r\n * web3.setProvider(myProvider)\r\n * web3.eth.setProvider(myProvider)\r\n * ...\r\n * ```\r\n *\r\n * Will change the provider for its module.\r\n *\r\n * **_NOTE:_** When called on the umbrella package web3 it will also set the provider for all sub modules web3.eth  etc.\r\n *\r\n * #### Parameters\r\n *  `Object`  - `myProvider`: a valid provider.\r\n *\r\n * #### Returns\r\n * `Boolean`\r\n *\r\n * See details: {@link Web3.setProvider}\r\n *\r\n * #### Example: Local Geth Node\r\n * ```ts\r\n * import Web3 from \"web3\";\r\n * let web3: Web3 = new Web3('http://localhost:8545');\r\n * // or\r\n * let web3: Web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\r\n *\r\n * // change provider\r\n * web3.setProvider('ws://localhost:8546');\r\n * // or\r\n * web3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8546'));\r\n *\r\n * //todo add IPC provider\r\n * ```\r\n *\r\n * #### Example: Remote Geth Node\r\n *\r\n * ```ts\r\n * // Using a remote node provider, like Alchemy (https://www.alchemyapi.io/supernode), is simple.\r\n * import Web3 from \"web3\";\r\n * let web3: Web3 = new Web3(\"https://eth-mainnet.alchemyapi.io/v2/your-api-key\");\r\n * ```\r\n *\r\n * ### providers\r\n *\r\n * ```ts\r\n * web3.providers\r\n * web3.eth.providers\r\n * ```\r\n * Contains the current available providers.\r\n *\r\n * #### Returns\r\n *  `Object` with the following providers:\r\n *\r\n *\r\n *  + `Object` - `HttpProvider`: HTTP provider, does not support subscriptions.\r\n *\r\n *\r\n *  + `Object` - `WebSocketProvider`: The WebSocket provider is the standard for usage in legacy browsers.\r\n *\r\n *\r\n *  + `Object` - `IpcProvider`: The IPC provider is used in node.js dapps when running a local node. Gives the most secure connection.\r\n *\r\n *\r\n * #### Example\r\n * ```ts\r\n * import Web3 from 'web3';\r\n * // use the given Provider or instantiate a new websocket provider\r\n * let web3 = new Web3(Web3.givenProvider || 'ws://remotenode.com:8546');\r\n * // or\r\n * let web3 = new Web3(Web3.givenProvider || new Web3.providers.WebsocketProvider('ws://remotenode.com:8546'));\r\n *\r\n * // Using the IPC provider in node.js\r\n * var web3 = new Web3(new Web3.providers.IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc')); // mac os path\r\n * // on windows the path is: \"\\\\\\\\.\\\\pipe\\\\geth.ipc\"\r\n * // on linux the path is: \"/users/myuser/.ethereum/geth.ipc\"\r\n * ```\r\n * #### Configuration\r\n *\r\n * ```ts\r\n *\r\n * //===\r\n * //Http\r\n * //===\r\n *\r\n * import Web3HttpProvider, { HttpProviderOptions } from \"web3-providers-http\";\r\n *\r\n * let options: HttpProviderOptions = {\r\n * \tproviderOptions: {\r\n * \t\tkeepalive: true,\r\n * \t\tcredentials: \"omit\",\r\n * \t\theaders: {\r\n * \t\t\t\"Access-Control-Allow-Origin\": \"*\",\r\n * \t\t},\r\n * \t},\r\n * };\r\n *\r\n *\r\n * var provider = new Web3HttpProvider(\"http://localhost:8545\", options);\r\n * web3.setProvider(provider);\r\n *\r\n * //===\r\n * //WebSockets\r\n * //===\r\n * import Web3WsProvider, {\r\n * \tClientOptions,\r\n * \tClientRequestArgs,\r\n * \tReconnectOptions,\r\n * } from \"web3-providers-ws\";\r\n *\r\n *\r\n * let clientOptions: ClientOptions = {\r\n * \t// Useful for credentialed urls, e.g: ws://username:password@localhost:8546\r\n * \theaders: {\r\n * \t\tauthorization: \"Basic username:password\",\r\n * \t},\r\n * \tmaxPayload: 100000000,\r\n * };\r\n *\r\n * // Enable auto reconnection\r\n * let reconnectOptions: ReconnectOptions = {\r\n * \tautoReconnect: true,\r\n * \tdelay: 5000, // ms\r\n * \tmaxAttempts: 5,\r\n * };\r\n *\r\n * //clientOptions and reconnectOptions are optional\r\n * //clientOptions: ClientOptions | ClientRequestArgs\r\n * let ws = new Web3WsProvider(\r\n * \"ws://localhost:8546\",\r\n * clientOptions,\r\n * reconnectOptions\r\n * );\r\n * web3.setProvider(ws);\r\n *\r\n * ```\r\n * More information for the Http and Websocket provider modules can be found here:\r\n *\r\n *\r\n * - {@link HttpProvider}\r\n *\r\n *\r\n * - {@link WebSocketProvider}\r\n *\r\n * See details: {@link Web3.providers}\r\n *\r\n *\r\n * ### givenProvider\r\n *\r\n * ```ts\r\n * web3.givenProvider\r\n * web3.eth.givenProvider\r\n * ...\r\n * ```\r\n * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser.\r\n * Will return the given provider by the (browser) environment, otherwise `undefined`.\r\n *\r\n * #### Returns\r\n * `Object` -  The given provider set or `undefined`.\r\n *\r\n * See details: {@link Web3.givenProvider}\r\n *\r\n * ### currentProvider\r\n *\r\n * ```ts\r\n * web3.currentProvider\r\n * web3.eth.currentProvider\r\n * ...\r\n * ```\r\n * Will return the current provider, otherwise `undefined`.\r\n *\r\n * #### Returns\r\n * `Object`: The current provider, otherwise `undefined`.\r\n *\r\n * See details: {@link Web3.currentProvider}\r\n *\r\n * ### BatchRequest\r\n *\r\n * ```ts\r\n * new web3.BatchRequest()\r\n * new web3.BatchRequest()\r\n * ...\r\n * ```\r\n * Class to create and execute batch requests.\r\n *\r\n *  #### Parameters\r\n *  none\r\n *\r\n * #### Returns\r\n * `Object`: With the following methods:\r\n *\r\n * + `add(request)`: To add a request object to the batch call.\r\n *\r\n * + `execute()` : To execute the batch request.\r\n *\r\n * #### Example\r\n * ```ts\r\n * let request1: JsonRpcOptionalRequest = {\r\n * \tid: 10,\r\n * \tmethod: 'eth_getBalance',\r\n * \tparams: [\"0xdc6bad79dab7ea733098f66f6c6f9dd008da3258\", 'latest'],\r\n * };\r\n * let request2: JsonRpcOptionalRequest = {\r\n * \tid: 11,\r\n * \tmethod: 'eth_getBalance',\r\n * \tparams: [\"0x962f9a9c2a6c092474d24def35eccb3d9363265e\", 'latest'],\r\n * };\r\n *\r\n * const batch = new web3.BatchRequest();\r\n *\r\n *  batch.add(request1);\r\n *  batch.add(request2);\r\n * // add returns a deferred promise which can be used to run specific code after completion of each respective request.\r\n * //const request2Promise = batch.add(request2);\r\n *\r\n * const response = await batch.execute();\r\n * ```\r\n * See details: {@link Web3.BatchRequest}\r\n */\n/**\r\n * This comment _supports3_ [Markdown](https://marked.js.org/)\r\n */\nimport Web3 from './web3.js';\nexport * from './types.js';\nexport default Web3;\n/**\r\n * Named exports for all objects which are the default-exported-object in their packages\r\n */\nexport { Web3 };\nexport { Web3Context, Web3PluginBase, Web3EthPluginBase } from 'web3-core';\nexport { Web3Eth } from 'web3-eth';\nexport { Contract } from 'web3-eth-contract';\nexport { Iban } from 'web3-eth-iban';\nexport { Personal } from 'web3-eth-personal';\nexport { Net } from 'web3-net';\nexport { HttpProvider } from 'web3-providers-http';\nexport { WebSocketProvider } from 'web3-providers-ws';\nexport { Web3Validator } from 'web3-validator';\n/**\r\n * Export all packages grouped by name spaces\r\n */\nimport * as _core from 'web3-core';\nexport { _core as core };\nimport * as _errors from 'web3-errors';\nexport { _errors as errors };\nimport * as _eth from './eth.exports.js';\nexport { _eth as eth };\nimport * as _net from 'web3-net';\nexport { _net as net };\nimport * as _providers from './providers.exports.js';\nexport { _providers as providers };\nimport * as _rpcMethods from 'web3-rpc-methods';\nexport { _rpcMethods as rpcMethods };\nimport * as _types from 'web3-types';\nexport { _types as types };\nimport * as _utils from 'web3-utils';\nexport { _utils as utils };\nimport * as _validator from 'web3-validator';\nexport { _validator as validator };\n/**\r\n * Export all types from `web3-types` without a namespace (in addition to being available at `types` namespace).\r\n * To enable the user to write: `function something(): Web3Api` without the need for `types.Web3Api`.\r\n * And the same for `web3-errors`. Because this package contains error classes and constants.\r\n */\nexport * from 'web3-errors';\nexport * from 'web3-types';","map":{"version":3,"names":["Web3","Web3Context","Web3PluginBase","Web3EthPluginBase","Web3Eth","Contract","Iban","Personal","Net","HttpProvider","WebSocketProvider","Web3Validator","_core","core","_errors","errors","_eth","eth","_net","net","_providers","providers","_rpcMethods","rpcMethods","_types","types","_utils","utils","_validator","validator"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3\\src\\index.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/**\r\n * This is the main (or 'umbrella') class of the web3.js library.\r\n *\r\n * ```ts\r\n * import Web3 from 'web3';\r\n *\r\n * > Web3.utils\r\n * > Web3.version\r\n * > Web3.givenProvider\r\n * > Web3.providers\r\n * > Web3.modules\r\n * ```\r\n *\r\n * # Web3.modules\r\n *\r\n * ```ts\r\n * Web3.modules\r\n * ```\r\n *\r\n * Will return an object with the classes of all major sub modules, to be able to instantiate them manually.\r\n *\r\n * #### Returns\r\n *\r\n *  `Object` A list of module constructors:\r\n *\r\n *\r\n *  + `Eth` - `Constructor`: The Eth module for interacting with the Ethereum network\r\n *\r\n *\r\n *  + `Net` - `Constructor`: The Net module for interacting with network properties.\r\n *\r\n *\r\n *  + `Personal` - `constructor`: The Personal module for interacting with the Ethereum accounts (web3.eth.personal).\r\n *\r\n * #### Example\r\n *\r\n * ```ts\r\n * Web3.modules\r\n * > {\r\n *   \tEth: Eth(provider),\r\n *   \tNet: Net(provider),\r\n *   \tPersonal: Personal(provider),\r\n *   }\r\n * ```\r\n *\r\n * See details: {@link Web3.modules}\r\n *\r\n * # Web3 Instance\r\n *\r\n * The Web3 class is an umbrella package to house all Ethereum related modules.\r\n *\r\n * ```ts\r\n * import Web3 from 'web3';\r\n *\r\n * // \"Web3.givenProvider\" will be set if in an Ethereum supported browser.\r\n * const web3 = new Web3(Web3.givenProvider || 'ws://some.local-or-remote.node:8546');\r\n *\r\n * > web3.eth\r\n * > web3.utils\r\n * > web3.version\r\n * ```\r\n *\r\n * ### version\r\n *\r\n * Contains the current package version of the web3.js library.\r\n *\r\n * #### Returns\r\n * //todo enable when functionality added\r\n * // @see Web3.version\r\n *\r\n * ### utils\r\n *\r\n * Static accessible property of the Web3 class and property of the instance as well.\r\n *\r\n * ```ts\r\n * Web3.utils\r\n * web3.utils\r\n * ```\r\n *\r\n * Utility functions are also exposed on the `Web3` class object diretly.\r\n *\r\n * //todo enable when implemented\r\n * //See details: {@link Web3.utils}\r\n *\r\n * ### setProvider\r\n *\r\n * ```ts\r\n * web3.setProvider(myProvider)\r\n * web3.eth.setProvider(myProvider)\r\n * ...\r\n * ```\r\n *\r\n * Will change the provider for its module.\r\n *\r\n * **_NOTE:_** When called on the umbrella package web3 it will also set the provider for all sub modules web3.eth  etc.\r\n *\r\n * #### Parameters\r\n *  `Object`  - `myProvider`: a valid provider.\r\n *\r\n * #### Returns\r\n * `Boolean`\r\n *\r\n * See details: {@link Web3.setProvider}\r\n *\r\n * #### Example: Local Geth Node\r\n * ```ts\r\n * import Web3 from \"web3\";\r\n * let web3: Web3 = new Web3('http://localhost:8545');\r\n * // or\r\n * let web3: Web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\r\n *\r\n * // change provider\r\n * web3.setProvider('ws://localhost:8546');\r\n * // or\r\n * web3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8546'));\r\n *\r\n * //todo add IPC provider\r\n * ```\r\n *\r\n * #### Example: Remote Geth Node\r\n *\r\n * ```ts\r\n * // Using a remote node provider, like Alchemy (https://www.alchemyapi.io/supernode), is simple.\r\n * import Web3 from \"web3\";\r\n * let web3: Web3 = new Web3(\"https://eth-mainnet.alchemyapi.io/v2/your-api-key\");\r\n * ```\r\n *\r\n * ### providers\r\n *\r\n * ```ts\r\n * web3.providers\r\n * web3.eth.providers\r\n * ```\r\n * Contains the current available providers.\r\n *\r\n * #### Returns\r\n *  `Object` with the following providers:\r\n *\r\n *\r\n *  + `Object` - `HttpProvider`: HTTP provider, does not support subscriptions.\r\n *\r\n *\r\n *  + `Object` - `WebSocketProvider`: The WebSocket provider is the standard for usage in legacy browsers.\r\n *\r\n *\r\n *  + `Object` - `IpcProvider`: The IPC provider is used in node.js dapps when running a local node. Gives the most secure connection.\r\n *\r\n *\r\n * #### Example\r\n * ```ts\r\n * import Web3 from 'web3';\r\n * // use the given Provider or instantiate a new websocket provider\r\n * let web3 = new Web3(Web3.givenProvider || 'ws://remotenode.com:8546');\r\n * // or\r\n * let web3 = new Web3(Web3.givenProvider || new Web3.providers.WebsocketProvider('ws://remotenode.com:8546'));\r\n *\r\n * // Using the IPC provider in node.js\r\n * var web3 = new Web3(new Web3.providers.IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc')); // mac os path\r\n * // on windows the path is: \"\\\\\\\\.\\\\pipe\\\\geth.ipc\"\r\n * // on linux the path is: \"/users/myuser/.ethereum/geth.ipc\"\r\n * ```\r\n * #### Configuration\r\n *\r\n * ```ts\r\n *\r\n * //===\r\n * //Http\r\n * //===\r\n *\r\n * import Web3HttpProvider, { HttpProviderOptions } from \"web3-providers-http\";\r\n *\r\n * let options: HttpProviderOptions = {\r\n * \tproviderOptions: {\r\n * \t\tkeepalive: true,\r\n * \t\tcredentials: \"omit\",\r\n * \t\theaders: {\r\n * \t\t\t\"Access-Control-Allow-Origin\": \"*\",\r\n * \t\t},\r\n * \t},\r\n * };\r\n *\r\n *\r\n * var provider = new Web3HttpProvider(\"http://localhost:8545\", options);\r\n * web3.setProvider(provider);\r\n *\r\n * //===\r\n * //WebSockets\r\n * //===\r\n * import Web3WsProvider, {\r\n * \tClientOptions,\r\n * \tClientRequestArgs,\r\n * \tReconnectOptions,\r\n * } from \"web3-providers-ws\";\r\n *\r\n *\r\n * let clientOptions: ClientOptions = {\r\n * \t// Useful for credentialed urls, e.g: ws://username:password@localhost:8546\r\n * \theaders: {\r\n * \t\tauthorization: \"Basic username:password\",\r\n * \t},\r\n * \tmaxPayload: 100000000,\r\n * };\r\n *\r\n * // Enable auto reconnection\r\n * let reconnectOptions: ReconnectOptions = {\r\n * \tautoReconnect: true,\r\n * \tdelay: 5000, // ms\r\n * \tmaxAttempts: 5,\r\n * };\r\n *\r\n * //clientOptions and reconnectOptions are optional\r\n * //clientOptions: ClientOptions | ClientRequestArgs\r\n * let ws = new Web3WsProvider(\r\n * \"ws://localhost:8546\",\r\n * clientOptions,\r\n * reconnectOptions\r\n * );\r\n * web3.setProvider(ws);\r\n *\r\n * ```\r\n * More information for the Http and Websocket provider modules can be found here:\r\n *\r\n *\r\n * - {@link HttpProvider}\r\n *\r\n *\r\n * - {@link WebSocketProvider}\r\n *\r\n * See details: {@link Web3.providers}\r\n *\r\n *\r\n * ### givenProvider\r\n *\r\n * ```ts\r\n * web3.givenProvider\r\n * web3.eth.givenProvider\r\n * ...\r\n * ```\r\n * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser.\r\n * Will return the given provider by the (browser) environment, otherwise `undefined`.\r\n *\r\n * #### Returns\r\n * `Object` -  The given provider set or `undefined`.\r\n *\r\n * See details: {@link Web3.givenProvider}\r\n *\r\n * ### currentProvider\r\n *\r\n * ```ts\r\n * web3.currentProvider\r\n * web3.eth.currentProvider\r\n * ...\r\n * ```\r\n * Will return the current provider, otherwise `undefined`.\r\n *\r\n * #### Returns\r\n * `Object`: The current provider, otherwise `undefined`.\r\n *\r\n * See details: {@link Web3.currentProvider}\r\n *\r\n * ### BatchRequest\r\n *\r\n * ```ts\r\n * new web3.BatchRequest()\r\n * new web3.BatchRequest()\r\n * ...\r\n * ```\r\n * Class to create and execute batch requests.\r\n *\r\n *  #### Parameters\r\n *  none\r\n *\r\n * #### Returns\r\n * `Object`: With the following methods:\r\n *\r\n * + `add(request)`: To add a request object to the batch call.\r\n *\r\n * + `execute()` : To execute the batch request.\r\n *\r\n * #### Example\r\n * ```ts\r\n * let request1: JsonRpcOptionalRequest = {\r\n * \tid: 10,\r\n * \tmethod: 'eth_getBalance',\r\n * \tparams: [\"0xdc6bad79dab7ea733098f66f6c6f9dd008da3258\", 'latest'],\r\n * };\r\n * let request2: JsonRpcOptionalRequest = {\r\n * \tid: 11,\r\n * \tmethod: 'eth_getBalance',\r\n * \tparams: [\"0x962f9a9c2a6c092474d24def35eccb3d9363265e\", 'latest'],\r\n * };\r\n *\r\n * const batch = new web3.BatchRequest();\r\n *\r\n *  batch.add(request1);\r\n *  batch.add(request2);\r\n * // add returns a deferred promise which can be used to run specific code after completion of each respective request.\r\n * //const request2Promise = batch.add(request2);\r\n *\r\n * const response = await batch.execute();\r\n * ```\r\n * See details: {@link Web3.BatchRequest}\r\n */\r\n/**\r\n * This comment _supports3_ [Markdown](https://marked.js.org/)\r\n */\r\n\r\nimport Web3 from './web3.js';\r\n\r\nexport * from './types.js';\r\nexport default Web3;\r\n\r\n/**\r\n * Named exports for all objects which are the default-exported-object in their packages\r\n */\r\nexport { Web3 };\r\nexport { Web3Context, Web3PluginBase, Web3EthPluginBase } from 'web3-core';\r\nexport { Web3Eth } from 'web3-eth';\r\nexport { Contract } from 'web3-eth-contract';\r\nexport { Iban } from 'web3-eth-iban';\r\nexport { Personal } from 'web3-eth-personal';\r\nexport { Net } from 'web3-net';\r\nexport { HttpProvider } from 'web3-providers-http';\r\nexport { WebSocketProvider } from 'web3-providers-ws';\r\nexport { Web3Validator } from 'web3-validator';\r\n\r\n/**\r\n * Export all packages grouped by name spaces\r\n */\r\nexport * as core from 'web3-core';\r\nexport * as errors from 'web3-errors';\r\nexport * as eth from './eth.exports.js';\r\nexport * as net from 'web3-net';\r\nexport * as providers from './providers.exports.js';\r\nexport * as rpcMethods from 'web3-rpc-methods';\r\nexport * as types from 'web3-types';\r\nexport * as utils from 'web3-utils';\r\nexport * as validator from 'web3-validator';\r\n\r\n/**\r\n * Export all types from `web3-types` without a namespace (in addition to being available at `types` namespace).\r\n * To enable the user to write: `function something(): Web3Api` without the need for `types.Web3Api`.\r\n * And the same for `web3-errors`. Because this package contains error classes and constants.\r\n */\r\nexport * from 'web3-errors';\r\nexport * from 'web3-types';\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+SA;;;AAIA,OAAOA,IAAI,MAAM,WAAW;AAE5B,cAAc,YAAY;AAC1B,eAAeA,IAAI;AAEnB;;;AAGA,SAASA,IAAI;AACb,SAASC,WAAW,EAAEC,cAAc,EAAEC,iBAAiB,QAAQ,WAAW;AAC1E,SAASC,OAAO,QAAQ,UAAU;AAClC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,IAAI,QAAQ,eAAe;AACpC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,GAAG,QAAQ,UAAU;AAC9B,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,iBAAiB,QAAQ,mBAAmB;AACrD,SAASC,aAAa,QAAQ,gBAAgB;AAE9C;;;AAAA,YAAAC,KAAA,MAGsB,WAAW;AAAA,SAAAA,KAAA,IAArBC,IAAI;AAAA,YAAAC,OAAA,MACQ,aAAa;AAAA,SAAAA,OAAA,IAAzBC,MAAM;AAAA,YAAAC,IAAA,MACG,kBAAkB;AAAA,SAAAA,IAAA,IAA3BC,GAAG;AAAA,YAAAC,IAAA,MACM,UAAU;AAAA,SAAAA,IAAA,IAAnBC,GAAG;AAAA,YAAAC,UAAA,MACY,wBAAwB;AAAA,SAAAA,UAAA,IAAvCC,SAAS;AAAA,YAAAC,WAAA,MACO,kBAAkB;AAAA,SAAAA,WAAA,IAAlCC,UAAU;AAAA,YAAAC,MAAA,MACC,YAAY;AAAA,SAAAA,MAAA,IAAvBC,KAAK;AAAA,YAAAC,MAAA,MACM,YAAY;AAAA,SAAAA,MAAA,IAAvBC,KAAK;AAAA,YAAAC,UAAA,MACU,gBAAgB;AAAA,SAAAA,UAAA,IAA/BC,SAAS;AAErB;;;;;AAKA,cAAc,aAAa;AAC3B,cAAc,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}