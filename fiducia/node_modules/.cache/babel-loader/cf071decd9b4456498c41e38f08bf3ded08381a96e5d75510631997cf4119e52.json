{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { codePointToInt, hexToUint8Array, padLeft, uint8ArrayToHexString } from '../utils.js';\nimport { isAddress } from './address.js';\nimport { isHexStrict } from './string.js';\n/**\r\n * Returns true if the bloom is a valid bloom\r\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\r\n */\nexport const isBloom = bloom => {\n  if (typeof bloom !== 'string') {\n    return false;\n  }\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  }\n  if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n  return false;\n};\n/**\r\n * Returns true if the value is part of the given bloom\r\n * note: false positives are possible.\r\n */\nexport const isInBloom = (bloom, value) => {\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    return false;\n  }\n  if (!isBloom(bloom)) {\n    return false;\n  }\n  const uint8Array = typeof value === 'string' ? hexToUint8Array(value) : value;\n  const hash = uint8ArrayToHexString(keccak256(uint8Array)).slice(2);\n  for (let i = 0; i < 12; i += 4) {\n    // calculate bit position in bloom filter that must be active\n    const bitpos =\n    // eslint-disable-next-line no-bitwise\n    (parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16) & 2047;\n    // test if bitpos in bloom is active\n    const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));\n    // eslint-disable-next-line no-bitwise\n    const offset = 1 << bitpos % 4;\n    // eslint-disable-next-line no-bitwise\n    if ((code & offset) !== offset) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\r\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\r\n */\nexport const isUserEthereumAddressInBloom = (bloom, ethereumAddress) => {\n  if (!isBloom(bloom)) {\n    return false;\n  }\n  if (!isAddress(ethereumAddress)) {\n    return false;\n  }\n  // you have to pad the ethereum address to 32 bytes\n  // else the bloom filter does not work\n  // this is only if your matching the USERS\n  // ethereum address. Contract address do not need this\n  // hence why we have 2 methods\n  // (0x is not in the 2nd parameter of padleft so 64 chars is fine)\n  const address = padLeft(ethereumAddress, 64);\n  return isInBloom(bloom, address);\n};\n/**\r\n * Returns true if the contract address is part of the given bloom.\r\n * note: false positives are possible.\r\n */\nexport const isContractAddressInBloom = (bloom, contractAddress) => {\n  if (!isBloom(bloom)) {\n    return false;\n  }\n  if (!isAddress(contractAddress)) {\n    return false;\n  }\n  return isInBloom(bloom, contractAddress);\n};","map":{"version":3,"names":["keccak256","codePointToInt","hexToUint8Array","padLeft","uint8ArrayToHexString","isAddress","isHexStrict","isBloom","bloom","test","isInBloom","value","uint8Array","hash","slice","i","bitpos","parseInt","code","charCodeAt","length","Math","floor","offset","isUserEthereumAddressInBloom","ethereumAddress","address","isContractAddressInBloom","contractAddress"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-validator\\src\\validation\\bloom.ts"],"sourcesContent":["ï»¿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\r\nimport { ValidInputTypes } from '../types.js';\r\nimport { codePointToInt, hexToUint8Array, padLeft, uint8ArrayToHexString } from '../utils.js';\r\nimport { isAddress } from './address.js';\r\nimport { isHexStrict } from './string.js';\r\n\r\n/**\r\n * Returns true if the bloom is a valid bloom\r\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\r\n */\r\nexport const isBloom = (bloom: ValidInputTypes): boolean => {\r\n\tif (typeof bloom !== 'string') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn false;\r\n};\r\n\r\n/**\r\n * Returns true if the value is part of the given bloom\r\n * note: false positives are possible.\r\n */\r\nexport const isInBloom = (bloom: string, value: string | Uint8Array): boolean => {\r\n\tif (typeof value === 'string' && !isHexStrict(value)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (!isBloom(bloom)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst uint8Array = typeof value === 'string' ? hexToUint8Array(value) : value;\r\n\r\n\tconst hash = uint8ArrayToHexString(keccak256(uint8Array)).slice(2);\r\n\r\n\tfor (let i = 0; i < 12; i += 4) {\r\n\t\t// calculate bit position in bloom filter that must be active\r\n\t\tconst bitpos =\r\n\t\t\t// eslint-disable-next-line no-bitwise\r\n\t\t\t((parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16)) &\r\n\t\t\t2047;\r\n\r\n\t\t// test if bitpos in bloom is active\r\n\t\tconst code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));\r\n\r\n\t\t// eslint-disable-next-line no-bitwise\r\n\t\tconst offset = 1 << bitpos % 4;\r\n\r\n\t\t// eslint-disable-next-line no-bitwise\r\n\t\tif ((code & offset) !== offset) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\r\n */\r\nexport const isUserEthereumAddressInBloom = (bloom: string, ethereumAddress: string): boolean => {\r\n\tif (!isBloom(bloom)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (!isAddress(ethereumAddress)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// you have to pad the ethereum address to 32 bytes\r\n\t// else the bloom filter does not work\r\n\t// this is only if your matching the USERS\r\n\t// ethereum address. Contract address do not need this\r\n\t// hence why we have 2 methods\r\n\t// (0x is not in the 2nd parameter of padleft so 64 chars is fine)\r\n\r\n\tconst address = padLeft(ethereumAddress, 64);\r\n\r\n\treturn isInBloom(bloom, address);\r\n};\r\n\r\n/**\r\n * Returns true if the contract address is part of the given bloom.\r\n * note: false positives are possible.\r\n */\r\nexport const isContractAddressInBloom = (bloom: string, contractAddress: string): boolean => {\r\n\tif (!isBloom(bloom)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (!isAddress(contractAddress)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn isInBloom(bloom, contractAddress);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}