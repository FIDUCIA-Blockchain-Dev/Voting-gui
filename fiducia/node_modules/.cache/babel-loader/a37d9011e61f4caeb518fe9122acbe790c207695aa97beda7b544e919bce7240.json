{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3\\src\\types.ts"],"sourcesContent":["ï»¿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { Bytes, Transaction } from 'web3-types';\r\nimport Eth from 'web3-eth';\r\nimport {\r\n\tdecodeLog,\r\n\tdecodeParameter,\r\n\tdecodeParameters,\r\n\tencodeFunctionCall,\r\n\tencodeFunctionSignature,\r\n\tencodeParameter,\r\n\tencodeParameters,\r\n} from 'web3-eth-abi';\r\nimport {\r\n\tencrypt,\r\n\thashMessage,\r\n\trecover,\r\n\trecoverTransaction,\r\n\tsign,\r\n\tsignTransaction,\r\n\tWallet,\r\n\tWeb3Account,\r\n} from 'web3-eth-accounts';\r\nimport { Contract } from 'web3-eth-contract';\r\nimport { ENS } from 'web3-eth-ens';\r\nimport Net from 'web3-net';\r\nimport { Iban } from 'web3-eth-iban';\r\n\r\n/**\r\n * The Ethereum interface for main web3 object. It provides extra methods in addition to `web3-eth` interface.\r\n *\r\n * {@link web3_eth.Web3Eth} for details about the `Eth` interface.\r\n */\r\nexport interface Web3EthInterface extends Eth {\r\n\t/**\r\n\t * Extended [Contract](/api/web3-eth-contract/class/Contract) constructor for main `web3` object. See [Contract](/api/web3-eth-contract/class/Contract) for further details.\r\n\t *\r\n\t * You can use `.setProvider` on this constructor to set provider for **all the instances** of the contracts which were created by `web3.eth.Contract`.\r\n\t * Please check the {@doclink guides/web3_upgrade_guide/x/providers_migration_guide | following guide} to understand more about setting provider.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.Contract.setProvider(myProvider)\r\n\t * ```\r\n\t */\r\n\tContract: typeof Contract;\r\n\tIban: typeof Iban;\r\n\tnet: Net;\r\n\tens: ENS;\r\n\tabi: {\r\n\t\tencodeEventSignature: typeof encodeFunctionSignature;\r\n\t\tencodeFunctionCall: typeof encodeFunctionCall;\r\n\t\tencodeFunctionSignature: typeof encodeFunctionSignature;\r\n\t\tencodeParameter: typeof encodeParameter;\r\n\t\tencodeParameters: typeof encodeParameters;\r\n\t\tdecodeParameter: typeof decodeParameter;\r\n\t\tdecodeParameters: typeof decodeParameters;\r\n\t\tdecodeLog: typeof decodeLog;\r\n\t};\r\n\taccounts: {\r\n\t\tcreate: () => Web3Account;\r\n\t\tprivateKeyToAccount: (privateKey: Uint8Array | string) => Web3Account;\r\n\t\tsignTransaction: (\r\n\t\t\ttransaction: Transaction,\r\n\t\t\tprivateKey: Bytes,\r\n\t\t) => ReturnType<typeof signTransaction>;\r\n\t\trecoverTransaction: typeof recoverTransaction;\r\n\t\thashMessage: typeof hashMessage;\r\n\t\tsign: typeof sign;\r\n\t\trecover: typeof recover;\r\n\t\tencrypt: typeof encrypt;\r\n\t\tdecrypt: (\r\n\t\t\tkeystore: string,\r\n\t\t\tpassword: string,\r\n\t\t\toptions?: Record<string, unknown>,\r\n\t\t) => Promise<Web3Account>;\r\n\t\twallet: Wallet;\r\n\t};\r\n}\r\n"],"mappings":"AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}