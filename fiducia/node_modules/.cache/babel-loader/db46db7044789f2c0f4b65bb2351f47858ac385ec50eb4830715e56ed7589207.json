{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n/* eslint-disable-next-line max-classes-per-file */\nimport { format } from 'web3-utils';\nimport { Web3Subscription } from 'web3-core';\nimport { blockHeaderSchema, logSchema, syncSchema } from './schemas.js';\n/**\r\n * ## subscribe('logs')\r\n * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\r\n *\r\n * You can subscribe to logs matching a given filter object, which can take the following parameters:\r\n * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\r\n * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\r\n * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\r\n *\r\n */\nexport class LogsSubscription extends Web3Subscription {\n  _buildSubscriptionParams() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return ['logs', this.args];\n  }\n  _processSubscriptionResult(data) {\n    this.emit('data', format(logSchema, data, super.returnFormat));\n  }\n  _processSubscriptionError(error) {\n    this.emit('error', error);\n  }\n}\n/**\r\n * ## subscribe('pendingTransactions')\r\n * Subscribes to incoming pending transactions.\r\n *\r\n * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\r\n * @example\r\n * ```ts\r\n * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\r\n * ```\r\n */\nexport class NewPendingTransactionsSubscription extends Web3Subscription {\n  // eslint-disable-next-line\n  _buildSubscriptionParams() {\n    return ['newPendingTransactions'];\n  }\n  _processSubscriptionResult(data) {\n    this.emit('data', format({\n      format: 'string'\n    }, data, super.returnFormat));\n  }\n  _processSubscriptionError(error) {\n    this.emit('error', error);\n  }\n}\n/**\r\n * ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))\r\n *\r\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\r\n *\r\n * The structure of a returned block header is {@link BlockHeaderOutput}:\r\n * @example\r\n * ```ts\r\n * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\r\n *  'data',\r\n * console.log\r\n * );\r\n * >{\r\n * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\r\n * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\n * miner: '0x0000000000000000000000000000000000000000',\r\n * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\r\n * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\r\n * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n * difficulty: 2n,\r\n * number: 21n,\r\n * gasLimit: 11738125n,\r\n * gasUsed: 830006n,\r\n * timestamp: 1678797237n,\r\n * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\r\n * nonce: 0n\r\n * }\r\n * ```\r\n */\nexport class NewHeadsSubscription extends Web3Subscription {\n  // eslint-disable-next-line\n  _buildSubscriptionParams() {\n    return ['newHeads'];\n  }\n  _processSubscriptionResult(data) {\n    this.emit('data', format(blockHeaderSchema, data, super.returnFormat));\n  }\n  _processSubscriptionError(error) {\n    this.emit('error', error);\n  }\n}\n/**\r\n * ## subscribe('syncing')\r\n *\r\n * Subscribe to syncing events. This will return `true` when the node is syncing and when itâ€™s finished syncing will return `false`, for the `changed` event.\r\n * @example\r\n * ```ts\r\n * (await web3.eth.subscribe('syncing')).on('changed', console.log);\r\n * > `true` // when syncing\r\n *\r\n * (await web3.eth.subscribe('syncing')).on('data', console.log);\r\n * > {\r\n *      startingBlock: 0,\r\n *      currentBlock: 0,\r\n *      highestBlock: 0,\r\n *      pulledStates: 0,\r\n *      knownStates: 0\r\n *   }\r\n * ```\r\n */\nexport class SyncingSubscription extends Web3Subscription {\n  // eslint-disable-next-line\n  _buildSubscriptionParams() {\n    return ['syncing'];\n  }\n  _processSubscriptionResult(data) {\n    if (typeof data === 'boolean') {\n      this.emit('changed', data);\n    } else {\n      const mappedData = Object.fromEntries(Object.entries(data.status).map(_ref => {\n        let [key, value] = _ref;\n        return [key.charAt(0).toLowerCase() + key.substring(1), value];\n      }));\n      this.emit('changed', data.syncing);\n      this.emit('data', format(syncSchema, mappedData, super.returnFormat));\n    }\n  }\n  _processSubscriptionError(error) {\n    this.emit('error', error);\n  }\n}","map":{"version":3,"names":["format","Web3Subscription","blockHeaderSchema","logSchema","syncSchema","LogsSubscription","_buildSubscriptionParams","args","_processSubscriptionResult","data","emit","returnFormat","_processSubscriptionError","error","NewPendingTransactionsSubscription","NewHeadsSubscription","SyncingSubscription","mappedData","Object","fromEntries","entries","status","map","_ref","key","value","charAt","toLowerCase","substring","syncing"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth\\src\\web3_subscriptions.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/* eslint-disable-next-line max-classes-per-file */\r\nimport { format } from 'web3-utils';\r\n\r\nimport {\r\n\tSyncOutput,\r\n\tAddress,\r\n\tBlockNumberOrTag,\r\n\tHexString,\r\n\tTopic,\r\n\tBlockHeaderOutput,\r\n\tLogsOutput,\r\n} from 'web3-types';\r\nimport { Web3Subscription } from 'web3-core';\r\nimport { blockHeaderSchema, logSchema, syncSchema } from './schemas.js';\r\n\r\ntype CommonSubscriptionEvents = {\r\n\terror: Error;\r\n\tconnected: number;\r\n};\r\n/**\r\n * ## subscribe('logs')\r\n * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\r\n *\r\n * You can subscribe to logs matching a given filter object, which can take the following parameters:\r\n * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\r\n * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\r\n * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\r\n *\r\n */\r\nexport class LogsSubscription extends Web3Subscription<\r\n\tCommonSubscriptionEvents & {\r\n\t\tdata: LogsOutput;\r\n\t},\r\n\t{\r\n\t\treadonly fromBlock?: BlockNumberOrTag;\r\n\t\treadonly address?: Address | Address[];\r\n\t\treadonly topics?: Topic[];\r\n\t}\r\n> {\r\n\tprotected _buildSubscriptionParams() {\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n\t\treturn ['logs', this.args] as ['logs', any];\r\n\t}\r\n\r\n\tpublic _processSubscriptionResult(data: LogsOutput) {\r\n\t\tthis.emit('data', format(logSchema, data, super.returnFormat));\r\n\t}\r\n\r\n\tpublic _processSubscriptionError(error: Error) {\r\n\t\tthis.emit('error', error);\r\n\t}\r\n}\r\n\r\n/**\r\n * ## subscribe('pendingTransactions')\r\n * Subscribes to incoming pending transactions.\r\n *\r\n * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\r\n * @example\r\n * ```ts\r\n * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\r\n * ```\r\n */\r\nexport class NewPendingTransactionsSubscription extends Web3Subscription<\r\n\tCommonSubscriptionEvents & {\r\n\t\tdata: HexString;\r\n\t}\r\n> {\r\n\t// eslint-disable-next-line\r\n\tprotected _buildSubscriptionParams() {\r\n\t\treturn ['newPendingTransactions'] as ['newPendingTransactions'];\r\n\t}\r\n\r\n\tprotected _processSubscriptionResult(data: string) {\r\n\t\tthis.emit('data', format({ format: 'string' }, data, super.returnFormat));\r\n\t}\r\n\r\n\tprotected _processSubscriptionError(error: Error) {\r\n\t\tthis.emit('error', error);\r\n\t}\r\n}\r\n\r\n/**\r\n * ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))\r\n *\r\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\r\n *\r\n * The structure of a returned block header is {@link BlockHeaderOutput}:\r\n * @example\r\n * ```ts\r\n * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\r\n *  'data',\r\n * console.log\r\n * );\r\n * >{\r\n * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\r\n * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\r\n * miner: '0x0000000000000000000000000000000000000000',\r\n * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\r\n * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\r\n * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\r\n * difficulty: 2n,\r\n * number: 21n,\r\n * gasLimit: 11738125n,\r\n * gasUsed: 830006n,\r\n * timestamp: 1678797237n,\r\n * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\r\n * nonce: 0n\r\n * }\r\n * ```\r\n */\r\nexport class NewHeadsSubscription extends Web3Subscription<\r\n\tCommonSubscriptionEvents & {\r\n\t\tdata: BlockHeaderOutput;\r\n\t}\r\n> {\r\n\t// eslint-disable-next-line\r\n\tprotected _buildSubscriptionParams() {\r\n\t\treturn ['newHeads'] as ['newHeads'];\r\n\t}\r\n\r\n\tprotected _processSubscriptionResult(data: BlockHeaderOutput) {\r\n\t\tthis.emit('data', format(blockHeaderSchema, data, super.returnFormat));\r\n\t}\r\n\r\n\tprotected _processSubscriptionError(error: Error) {\r\n\t\tthis.emit('error', error);\r\n\t}\r\n}\r\n\r\n/**\r\n * ## subscribe('syncing')\r\n *\r\n * Subscribe to syncing events. This will return `true` when the node is syncing and when itâ€™s finished syncing will return `false`, for the `changed` event.\r\n * @example\r\n * ```ts\r\n * (await web3.eth.subscribe('syncing')).on('changed', console.log);\r\n * > `true` // when syncing\r\n *\r\n * (await web3.eth.subscribe('syncing')).on('data', console.log);\r\n * > {\r\n *      startingBlock: 0,\r\n *      currentBlock: 0,\r\n *      highestBlock: 0,\r\n *      pulledStates: 0,\r\n *      knownStates: 0\r\n *   }\r\n * ```\r\n */\r\nexport class SyncingSubscription extends Web3Subscription<\r\n\tCommonSubscriptionEvents & {\r\n\t\tdata: SyncOutput;\r\n\t\tchanged: boolean;\r\n\t}\r\n> {\r\n\t// eslint-disable-next-line\r\n\tprotected _buildSubscriptionParams() {\r\n\t\treturn ['syncing'] as ['syncing'];\r\n\t}\r\n\r\n\tprotected _processSubscriptionResult(\r\n\t\tdata:\r\n\t\t\t| {\r\n\t\t\t\t\tsyncing: boolean;\r\n\t\t\t\t\tstatus: SyncOutput;\r\n\t\t\t  }\r\n\t\t\t| boolean,\r\n\t) {\r\n\t\tif (typeof data === 'boolean') {\r\n\t\t\tthis.emit('changed', data);\r\n\t\t} else {\r\n\t\t\tconst mappedData: SyncOutput = Object.fromEntries(\r\n\t\t\t\tObject.entries(data.status).map(([key, value]) => [\r\n\t\t\t\t\tkey.charAt(0).toLowerCase() + key.substring(1),\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t]),\r\n\t\t\t) as SyncOutput;\r\n\r\n\t\t\tthis.emit('changed', data.syncing);\r\n\t\t\tthis.emit('data', format(syncSchema, mappedData, super.returnFormat));\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _processSubscriptionError(error: Error) {\r\n\t\tthis.emit('error', error);\r\n\t}\r\n}\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;AACA,SAASA,MAAM,QAAQ,YAAY;AAWnC,SAASC,gBAAgB,QAAQ,WAAW;AAC5C,SAASC,iBAAiB,EAAEC,SAAS,EAAEC,UAAU,QAAQ,cAAc;AAMvE;;;;;;;;;;AAUA,OAAM,MAAOC,gBAAiB,SAAQJ,gBASrC;EACUK,wBAAwBA,CAAA;IACjC;IACA,OAAO,CAAC,MAAM,EAAE,IAAI,CAACC,IAAI,CAAkB;EAC5C;EAEOC,0BAA0BA,CAACC,IAAgB;IACjD,IAAI,CAACC,IAAI,CAAC,MAAM,EAAEV,MAAM,CAACG,SAAS,EAAEM,IAAI,EAAE,KAAK,CAACE,YAAY,CAAC,CAAC;EAC/D;EAEOC,yBAAyBA,CAACC,KAAY;IAC5C,IAAI,CAACH,IAAI,CAAC,OAAO,EAAEG,KAAK,CAAC;EAC1B;;AAGD;;;;;;;;;;AAUA,OAAM,MAAOC,kCAAmC,SAAQb,gBAIvD;EACA;EACUK,wBAAwBA,CAAA;IACjC,OAAO,CAAC,wBAAwB,CAA+B;EAChE;EAEUE,0BAA0BA,CAACC,IAAY;IAChD,IAAI,CAACC,IAAI,CAAC,MAAM,EAAEV,MAAM,CAAC;MAAEA,MAAM,EAAE;IAAQ,CAAE,EAAES,IAAI,EAAE,KAAK,CAACE,YAAY,CAAC,CAAC;EAC1E;EAEUC,yBAAyBA,CAACC,KAAY;IAC/C,IAAI,CAACH,IAAI,CAAC,OAAO,EAAEG,KAAK,CAAC;EAC1B;;AAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAM,MAAOE,oBAAqB,SAAQd,gBAIzC;EACA;EACUK,wBAAwBA,CAAA;IACjC,OAAO,CAAC,UAAU,CAAiB;EACpC;EAEUE,0BAA0BA,CAACC,IAAuB;IAC3D,IAAI,CAACC,IAAI,CAAC,MAAM,EAAEV,MAAM,CAACE,iBAAiB,EAAEO,IAAI,EAAE,KAAK,CAACE,YAAY,CAAC,CAAC;EACvE;EAEUC,yBAAyBA,CAACC,KAAY;IAC/C,IAAI,CAACH,IAAI,CAAC,OAAO,EAAEG,KAAK,CAAC;EAC1B;;AAGD;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,MAAOG,mBAAoB,SAAQf,gBAKxC;EACA;EACUK,wBAAwBA,CAAA;IACjC,OAAO,CAAC,SAAS,CAAgB;EAClC;EAEUE,0BAA0BA,CACnCC,IAKU;IAEV,IAAI,OAAOA,IAAI,KAAK,SAAS,EAAE;MAC9B,IAAI,CAACC,IAAI,CAAC,SAAS,EAAED,IAAI,CAAC;KAC1B,MAAM;MACN,MAAMQ,UAAU,GAAeC,MAAM,CAACC,WAAW,CAChDD,MAAM,CAACE,OAAO,CAACX,IAAI,CAACY,MAAM,CAAC,CAACC,GAAG,CAACC,IAAA;QAAA,IAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,IAAA;QAAA,OAAK,CACjDC,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGH,GAAG,CAACI,SAAS,CAAC,CAAC,CAAC,EAC9CH,KAAK,CACL;MAAA,EAAC,CACY;MAEf,IAAI,CAACf,IAAI,CAAC,SAAS,EAAED,IAAI,CAACoB,OAAO,CAAC;MAClC,IAAI,CAACnB,IAAI,CAAC,MAAM,EAAEV,MAAM,CAACI,UAAU,EAAEa,UAAU,EAAE,KAAK,CAACN,YAAY,CAAC,CAAC;;EAEvE;EAEUC,yBAAyBA,CAACC,KAAY;IAC/C,IAAI,CAACH,IAAI,CAAC,OAAO,EAAEG,KAAK,CAAC;EAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}