{"ast":null,"code":"import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { ABI, address } from '../config';\nimport DataContext from '../DataContext';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  // static contextType = DataContext;\n  constructor(props) {\n    super(props);\n    this.handleVoterNameChange = (event, index) => {\n      const {\n        voterNames\n      } = this.state;\n      voterNames[index] = event.target.value;\n      this.setState({\n        voterNames\n      });\n    };\n    this.state = {\n      account: '',\n      voterNames: Array.from({\n        length: this.props.noOfVoters\n      }, () => '')\n    };\n  }\n  componentDidMount() {\n    this.loadBlockchainData();\n  }\n  async loadBlockchainData() {\n    try {\n      // Check if Web3 provider is available from Metamask or similar extension\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        await window.ethereum.enable(); // Request user permission to connect\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          account: accounts[0]\n        });\n        const scontract = new web3.eth.Contract(ABI, address);\n        this.setState({\n          scontract\n        });\n      } else {\n        console.log('Please install MetaMask or use a compatible browser extension.');\n      }\n    } catch (error) {\n      console.error('Error loading blockchain data:', error);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Web3","ABI","address","DataContext","Fragment","_Fragment","jsxDEV","_jsxDEV","App","constructor","props","handleVoterNameChange","event","index","voterNames","state","target","value","setState","account","Array","from","length","noOfVoters","componentDidMount","loadBlockchainData","window","ethereum","web3","enable","accounts","eth","getAccounts","scontract","Contract","console","log","error","render"],"sources":["C:/Users/lakka/OneDrive - Manipal Academy of Higher Education/FIDUCIA/voting-gui/fiducia/src/components/chairperson/candidates_input.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport { ABI, address } from '../config';\r\nimport DataContext from '../DataContext';\r\nclass App extends Component {\r\n // static contextType = DataContext;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      account: '',\r\n      voterNames: Array.from({ length: this.props.noOfVoters }, () => ''),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadBlockchainData();\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    try {\r\n      // Check if Web3 provider is available from Metamask or similar extension\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        await window.ethereum.enable(); // Request user permission to connect\r\n        const accounts = await web3.eth.getAccounts();\r\n        this.setState({ account: accounts[0] });\r\n        const scontract = new web3.eth.Contract(ABI, address)\r\n        this.setState({ scontract })\r\n      } else {\r\n        console.log('Please install MetaMask or use a compatible browser extension.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading blockchain data:', error);\r\n    }\r\n  }\r\n  handleVoterNameChange = (event, index) => {\r\n    const { voterNames } = this.state;\r\n    voterNames[index] = event.target.value;\r\n    this.setState({ voterNames });\r\n \r\n  };\r\n  \r\n  render() {\r\n    return (\r\n    <></>\r\n  \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,GAAG,EAAEC,OAAO,QAAQ,WAAW;AACxC,OAAOC,WAAW,MAAM,gBAAgB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACzC,MAAMC,GAAG,SAAST,SAAS,CAAC;EAC3B;EACCU,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KA4BfC,qBAAqB,GAAG,CAACC,KAAK,EAAEC,KAAK,KAAK;MACxC,MAAM;QAAEC;MAAW,CAAC,GAAG,IAAI,CAACC,KAAK;MACjCD,UAAU,CAACD,KAAK,CAAC,GAAGD,KAAK,CAACI,MAAM,CAACC,KAAK;MACtC,IAAI,CAACC,QAAQ,CAAC;QAAEJ;MAAW,CAAC,CAAC;IAE/B,CAAC;IAhCC,IAAI,CAACC,KAAK,GAAG;MACXI,OAAO,EAAE,EAAE;MACXL,UAAU,EAAEM,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE,IAAI,CAACZ,KAAK,CAACa;MAAW,CAAC,EAAE,MAAM,EAAE;IACpE,CAAC;EACH;EAEAC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B;EAEA,MAAMA,kBAAkBA,CAAA,EAAG;IACzB,IAAI;MACF;MACA,IAAIC,MAAM,CAACC,QAAQ,EAAE;QACnB,MAAMC,IAAI,GAAG,IAAI5B,IAAI,CAAC0B,MAAM,CAACC,QAAQ,CAAC;QACtC,MAAMD,MAAM,CAACC,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC;QAChC,MAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAG,CAACC,WAAW,CAAC,CAAC;QAC7C,IAAI,CAACd,QAAQ,CAAC;UAAEC,OAAO,EAAEW,QAAQ,CAAC,CAAC;QAAE,CAAC,CAAC;QACvC,MAAMG,SAAS,GAAG,IAAIL,IAAI,CAACG,GAAG,CAACG,QAAQ,CAACjC,GAAG,EAAEC,OAAO,CAAC;QACrD,IAAI,CAACgB,QAAQ,CAAC;UAAEe;QAAU,CAAC,CAAC;MAC9B,CAAC,MAAM;QACLE,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;MAC/E;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF;EAQAC,MAAMA,CAAA,EAAG;IACP,oBACA/B,OAAA,CAAAF,SAAA,mBAAI,CAAC;EAGP;AACF;AAEA,eAAeG,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}