{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { isHexPrefixed, isHexString } from 'web3-validator';\nimport { bytesToHex, hexToBytes, numberToHex } from 'web3-utils';\nimport { secp256k1 } from '../tx/constants.js';\nimport { Hardfork } from './enums.js';\nimport { TypeOutput } from './types.js';\n/**\r\n * Removes '0x' from a given `String` if present\r\n * @param str the string value\r\n * @returns the string without 0x prefix\r\n */\nexport const stripHexPrefix = str => {\n  if (typeof str !== 'string') throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n  return isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\r\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\r\n * @param nonce string parsed from the Geth genesis file\r\n * @returns nonce as a 0x-prefixed 8 byte string\r\n */\nfunction formatNonce(nonce) {\n  if (!nonce || nonce === '0x0') {\n    return '0x0000000000000000';\n  }\n  if (isHexPrefixed(nonce)) {\n    return `0x${stripHexPrefix(nonce).padStart(16, '0')}`;\n  }\n  return `0x${nonce.padStart(16, '0')}`;\n}\n/**\r\n * Converts a `Number` into a hex `String`\r\n * @param {Number} i\r\n * @return {String}\r\n */\nconst intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`);\n  }\n  return `0x${i.toString(16)}`;\n};\n/**\r\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\r\n * @param json object representing the Geth genesis file\r\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\r\n * hardfork, which by default is post merge as with the merged eth networks but could also come\r\n * before merge like in kiln genesis\r\n * @returns genesis parameters in a `CommonOpts` compliant object\r\n */\nfunction parseGethParams(json) {\n  let mergeForkIdPostMerge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var _a, _b;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const {\n    name,\n    config,\n    difficulty,\n    mixHash,\n    gasLimit,\n    coinbase,\n    baseFeePerGas\n  } = json;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  let {\n    extraData,\n    timestamp,\n    nonce\n  } = json;\n  const genesisTimestamp = Number(timestamp);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const {\n    chainId\n  } = config;\n  // geth is not strictly putting empty fields with a 0x prefix\n  if (extraData === '') {\n    extraData = '0x';\n  }\n  // geth may use number for timestamp\n  if (!isHexPrefixed(timestamp)) {\n    // eslint-disable-next-line radix\n    timestamp = intToHex(parseInt(timestamp));\n  }\n  // geth may not give us a nonce strictly formatted to an 8 byte hex string\n  if (nonce.length !== 18) {\n    nonce = formatNonce(nonce);\n  }\n  // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n  // but have different configuration parameters in geth genesis parameters\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (config.eip155Block !== config.eip158Block) {\n    throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');\n  }\n  const params = {\n    name,\n    chainId,\n    networkId: chainId,\n    genesis: {\n      timestamp,\n      // eslint-disable-next-line radix\n      gasLimit: parseInt(gasLimit),\n      // eslint-disable-next-line radix\n      difficulty: parseInt(difficulty),\n      nonce,\n      extraData,\n      mixHash,\n      coinbase,\n      baseFeePerGas\n    },\n    hardfork: undefined,\n    hardforks: [],\n    bootstrapNodes: [],\n    consensus:\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config.clique !== undefined ? {\n      type: 'poa',\n      algorithm: 'clique',\n      clique: {\n        // The recent geth genesis seems to be using blockperiodseconds\n        // and epochlength for clique specification\n        // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        period: (_a = config.clique.period) !== null && _a !== void 0 ? _a : config.clique.blockperiodseconds,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment\n        epoch: (_b = config.clique.epoch) !== null && _b !== void 0 ? _b : config.clique.epochlength\n      }\n    } : {\n      type: 'pow',\n      algorithm: 'ethash',\n      ethash: {}\n    }\n  };\n  const forkMap = {\n    [Hardfork.Homestead]: {\n      name: 'homesteadBlock'\n    },\n    [Hardfork.Dao]: {\n      name: 'daoForkBlock'\n    },\n    [Hardfork.TangerineWhistle]: {\n      name: 'eip150Block'\n    },\n    [Hardfork.SpuriousDragon]: {\n      name: 'eip155Block'\n    },\n    [Hardfork.Byzantium]: {\n      name: 'byzantiumBlock'\n    },\n    [Hardfork.Constantinople]: {\n      name: 'constantinopleBlock'\n    },\n    [Hardfork.Petersburg]: {\n      name: 'petersburgBlock'\n    },\n    [Hardfork.Istanbul]: {\n      name: 'istanbulBlock'\n    },\n    [Hardfork.MuirGlacier]: {\n      name: 'muirGlacierBlock'\n    },\n    [Hardfork.Berlin]: {\n      name: 'berlinBlock'\n    },\n    [Hardfork.London]: {\n      name: 'londonBlock'\n    },\n    [Hardfork.MergeForkIdTransition]: {\n      name: 'mergeForkBlock',\n      postMerge: mergeForkIdPostMerge\n    },\n    [Hardfork.Shanghai]: {\n      name: 'shanghaiTime',\n      postMerge: true,\n      isTimestamp: true\n    },\n    [Hardfork.ShardingForkDev]: {\n      name: 'shardingForkTime',\n      postMerge: true,\n      isTimestamp: true\n    }\n  };\n  // forkMapRev is the map from config field name to Hardfork\n  const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n    acc[forkMap[elem].name] = elem;\n    return acc;\n  }, {});\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const configHardforkNames = Object.keys(config).filter(\n  // eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access\n  key => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n  params.hardforks = configHardforkNames.map(nameBlock => ({\n    name: forkMapRev[nameBlock],\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    block:\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    forkMap[forkMapRev[nameBlock]].isTimestamp === true ||\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    typeof config[nameBlock] !== 'number' ?\n    // eslint-disable-next-line no-null/no-null\n    null :\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config[nameBlock],\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    timestamp:\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    forkMap[forkMapRev[nameBlock]].isTimestamp === true &&\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    typeof config[nameBlock] === 'number' ?\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config[nameBlock] : undefined\n  }))\n  // eslint-disable-next-line no-null/no-null\n  .filter(fork => fork.block !== null || fork.timestamp !== undefined);\n  params.hardforks.sort((a, b) => {\n    var _a, _b;\n    return ((_a = a.block) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b.block) !== null && _b !== void 0 ? _b : Infinity);\n  });\n  params.hardforks.sort((a, b) => {\n    var _a, _b;\n    return ((_a = a.timestamp) !== null && _a !== void 0 ? _a : genesisTimestamp) - ((_b = b.timestamp) !== null && _b !== void 0 ? _b : genesisTimestamp);\n  });\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (config.terminalTotalDifficulty !== undefined) {\n    // Following points need to be considered for placement of merge hf\n    // - Merge hardfork can't be placed at genesis\n    // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n    // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n    //   necessary for e.g. withdrawals\n    const mergeConfig = {\n      name: Hardfork.Merge,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n      ttd: config.terminalTotalDifficulty,\n      // eslint-disable-next-line no-null/no-null\n      block: null\n    };\n    // Merge hardfork has to be placed before first hardfork that is dependent on merge\n    const postMergeIndex = params.hardforks.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    hf => {\n      var _a;\n      return ((_a = forkMap[hf.name]) === null || _a === void 0 ? void 0 : _a.postMerge) === true;\n    });\n    if (postMergeIndex !== -1) {\n      params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n    } else {\n      params.hardforks.push(mergeConfig);\n    }\n  }\n  const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n  params.hardfork = latestHardfork === null || latestHardfork === void 0 ? void 0 : latestHardfork.name;\n  params.hardforks.unshift({\n    name: Hardfork.Chainstart,\n    block: 0\n  });\n  return params;\n}\n/**\r\n * Parses a genesis.json exported from Geth into parameters for Common instance\r\n * @param json representing the Geth genesis file\r\n * @param name optional chain name\r\n * @returns parsed params\r\n */\nexport function parseGethGenesis(json, name, mergeForkIdPostMerge) {\n  try {\n    if (['config', 'difficulty', 'gasLimit', 'alloc'].some(field => !(field in json))) {\n      throw new Error('Invalid format, expected geth genesis fields missing');\n    }\n    if (name !== undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign\n      json.name = name;\n    }\n    return parseGethParams(json, mergeForkIdPostMerge);\n  } catch (e) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n    throw new Error(`Error parsing parameters file: ${e.message}`);\n  }\n}\n/**\r\n * Pads a `String` to have an even length\r\n * @param value\r\n * @return output\r\n */\nexport function padToEven(value) {\n  let a = value;\n  if (typeof a !== 'string') {\n    throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n  }\n  if (a.length % 2) a = `0${a}`;\n  return a;\n}\n/**\r\n * Converts an `Number` to a `Uint8Array`\r\n * @param {Number} i\r\n * @return {Uint8Array}\r\n */\nexport const intToUint8Array = function (i) {\n  const hex = intToHex(i);\n  return hexToBytes(`0x${padToEven(hex.slice(2))}`);\n};\n/**\r\n * Attempts to turn a value into a `Uint8Array`.\r\n * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\r\n * with a `toArray()` or `toUint8Array()` method.\r\n * @param v the value\r\n */\nexport const toUint8Array = function (v) {\n  // eslint-disable-next-line no-null/no-null\n  if (v === null || v === undefined) {\n    return new Uint8Array();\n  }\n  if (v instanceof Uint8Array) {\n    return v;\n  }\n  if (Array.isArray(v)) {\n    return Uint8Array.from(v);\n  }\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`);\n    }\n    return hexToBytes(padToEven(stripHexPrefix(v)));\n  }\n  if (typeof v === 'number') {\n    return toUint8Array(numberToHex(v));\n  }\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n    }\n    let n = v.toString(16);\n    if (n.length % 2) n = `0${n}`;\n    return toUint8Array(`0x${n}`);\n  }\n  if (v.toArray) {\n    // converts a BN to a Uint8Array\n    return Uint8Array.from(v.toArray());\n  }\n  throw new Error('invalid type');\n};\n/**\r\n * Converts a {@link Uint8Array} to a {@link bigint}\r\n */\nexport function uint8ArrayToBigInt(buf) {\n  const hex = bytesToHex(buf);\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n  return BigInt(hex);\n}\n/**\r\n * Converts a {@link bigint} to a {@link Uint8Array}\r\n */\nexport function bigIntToUint8Array(num) {\n  return toUint8Array(`0x${num.toString(16)}`);\n}\n/**\r\n * Returns a Uint8Array filled with 0s.\r\n * @param bytes the number of bytes the Uint8Array should be\r\n */\nexport const zeros = function (bytes) {\n  return new Uint8Array(bytes).fill(0);\n};\n/**\r\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\r\n * Truncates the beginning or end of input if its length exceeds `length`.\r\n * @param msg the value to pad (Uint8Array)\r\n * @param length the number of bytes the output should be\r\n * @param right whether to start padding form the left or right\r\n * @return (Uint8Array)\r\n */\nconst setLength = function (msg, length, right) {\n  const buf = zeros(length);\n  if (right) {\n    if (msg.length < length) {\n      buf.set(msg);\n      return buf;\n    }\n    return msg.subarray(0, length);\n  }\n  if (msg.length < length) {\n    buf.set(msg, length - msg.length);\n    return buf;\n  }\n  return msg.subarray(-length);\n};\n/**\r\n * Throws if input is not a Uint8Array\r\n * @param {Uint8Array} input value to check\r\n */\nexport function assertIsUint8Array(input) {\n  if (!(input instanceof Uint8Array)) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const msg = `This method only supports Uint8Array but input was: ${input}`;\n    throw new Error(msg);\n  }\n}\n/**\r\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\r\n * Or it truncates the beginning if it exceeds.\r\n * @param msg the value to pad (Uint8Array)\r\n * @param length the number of bytes the output should be\r\n * @return (Uint8Array)\r\n */\nexport const setLengthLeft = function (msg, length) {\n  assertIsUint8Array(msg);\n  return setLength(msg, length, false);\n};\n/**\r\n * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.\r\n * @param a (Uint8Array|Array|String)\r\n * @return (Uint8Array|Array|String)\r\n */\nexport function stripZeros(a) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n  let first = a[0];\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n  while (a.length > 0 && first.toString() === '0') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign\n    a = a.slice(1);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access\n    first = a[0];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return a;\n}\n/**\r\n * Trims leading zeros from a `Uint8Array`.\r\n * @param a (Uint8Array)\r\n * @return (Uint8Array)\r\n */\nexport const unpadUint8Array = function (a) {\n  assertIsUint8Array(a);\n  return stripZeros(a);\n};\n/**\r\n * Converts a {@link bigint} to a `0x` prefixed hex string\r\n */\nexport const bigIntToHex = num => `0x${num.toString(16)}`;\n/**\r\n * Convert value from bigint to an unpadded Uint8Array\r\n * (useful for RLP transport)\r\n * @param value value to convert\r\n */\nexport function bigIntToUnpaddedUint8Array(value) {\n  return unpadUint8Array(bigIntToUint8Array(value));\n}\nfunction calculateSigRecovery(v, chainId) {\n  if (v === BigInt(0) || v === BigInt(1)) return v;\n  if (chainId === undefined) {\n    return v - BigInt(27);\n  }\n  return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n  return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\r\n * ECDSA public key recovery from signature.\r\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\r\n * @returns Recovered public key\r\n */\nexport const ecrecover = function (msgHash, v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const senderPubKey = new secp256k1.Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s)).addRecoveryBit(Number(recovery)).recoverPublicKey(msgHash).toRawBytes(false);\n  return senderPubKey.slice(1);\n};\nexport function toType(input, outputType) {\n  // eslint-disable-next-line no-null/no-null\n  if (input === null) {\n    // eslint-disable-next-line no-null/no-null\n    return null;\n  }\n  if (input === undefined) {\n    return undefined;\n  }\n  if (typeof input === 'string' && !isHexString(input)) {\n    throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n  const output = toUint8Array(input);\n  switch (outputType) {\n    case TypeOutput.Uint8Array:\n      return output;\n    case TypeOutput.BigInt:\n      return uint8ArrayToBigInt(output);\n    case TypeOutput.Number:\n      {\n        const bigInt = uint8ArrayToBigInt(output);\n        if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n          throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n        }\n        return Number(bigInt);\n      }\n    case TypeOutput.PrefixedHexString:\n      return bytesToHex(output);\n    default:\n      throw new Error('unknown outputType');\n  }\n}","map":{"version":3,"names":["isHexPrefixed","isHexString","bytesToHex","hexToBytes","numberToHex","secp256k1","Hardfork","TypeOutput","stripHexPrefix","str","Error","slice","formatNonce","nonce","padStart","intToHex","i","Number","isSafeInteger","toString","parseGethParams","json","mergeForkIdPostMerge","arguments","length","undefined","name","config","difficulty","mixHash","gasLimit","coinbase","baseFeePerGas","extraData","timestamp","genesisTimestamp","chainId","parseInt","eip155Block","eip158Block","params","networkId","genesis","hardfork","hardforks","bootstrapNodes","consensus","clique","type","algorithm","period","_a","blockperiodseconds","epoch","_b","epochlength","ethash","forkMap","Homestead","Dao","TangerineWhistle","SpuriousDragon","Byzantium","Constantinople","Petersburg","Istanbul","MuirGlacier","Berlin","London","MergeForkIdTransition","postMerge","Shanghai","isTimestamp","ShardingForkDev","forkMapRev","Object","keys","reduce","acc","elem","configHardforkNames","filter","key","map","nameBlock","block","fork","sort","a","b","Infinity","terminalTotalDifficulty","mergeConfig","Merge","ttd","postMergeIndex","findIndex","hf","splice","push","latestHardfork","unshift","Chainstart","parseGethGenesis","some","field","e","message","padToEven","value","intToUint8Array","hex","toUint8Array","v","Uint8Array","Array","isArray","from","BigInt","n","toArray","uint8ArrayToBigInt","buf","bigIntToUint8Array","num","zeros","bytes","fill","setLength","msg","right","set","subarray","assertIsUint8Array","input","setLengthLeft","stripZeros","first","unpadUint8Array","bigIntToHex","bigIntToUnpaddedUint8Array","calculateSigRecovery","isValidSigRecovery","recovery","ecrecover","msgHash","r","s","senderPubKey","Signature","addRecoveryBit","recoverPublicKey","toRawBytes","toType","outputType","output","bigInt","MAX_SAFE_INTEGER","PrefixedHexString"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-accounts\\src\\common\\utils.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { isHexPrefixed, isHexString } from 'web3-validator';\r\nimport { bytesToHex, hexToBytes, numberToHex } from 'web3-utils';\r\nimport { secp256k1 } from '../tx/constants.js';\r\nimport { Hardfork } from './enums.js';\r\nimport { ToBytesInputTypes, TypeOutput, TypeOutputReturnType } from './types.js';\r\n\r\ntype ConfigHardfork =\r\n\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\t| { name: string; block: null; timestamp: number }\r\n\t| { name: string; block: number; timestamp?: number };\r\n\r\n/**\r\n * Removes '0x' from a given `String` if present\r\n * @param str the string value\r\n * @returns the string without 0x prefix\r\n */\r\nexport const stripHexPrefix = (str: string): string => {\r\n\tif (typeof str !== 'string')\r\n\t\tthrow new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\r\n\r\n\treturn isHexPrefixed(str) ? str.slice(2) : str;\r\n};\r\n/**\r\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\r\n * @param nonce string parsed from the Geth genesis file\r\n * @returns nonce as a 0x-prefixed 8 byte string\r\n */\r\nfunction formatNonce(nonce: string): string {\r\n\tif (!nonce || nonce === '0x0') {\r\n\t\treturn '0x0000000000000000';\r\n\t}\r\n\tif (isHexPrefixed(nonce)) {\r\n\t\treturn `0x${stripHexPrefix(nonce).padStart(16, '0')}`;\r\n\t}\r\n\treturn `0x${nonce.padStart(16, '0')}`;\r\n}\r\n\r\n/**\r\n * Converts a `Number` into a hex `String`\r\n * @param {Number} i\r\n * @return {String}\r\n */\r\nconst intToHex = function (i: number) {\r\n\tif (!Number.isSafeInteger(i) || i < 0) {\r\n\t\tthrow new Error(`Received an invalid integer type: ${i}`);\r\n\t}\r\n\treturn `0x${i.toString(16)}`;\r\n};\r\n\r\n/**\r\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\r\n * @param json object representing the Geth genesis file\r\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\r\n * hardfork, which by default is post merge as with the merged eth networks but could also come\r\n * before merge like in kiln genesis\r\n * @returns genesis parameters in a `CommonOpts` compliant object\r\n */\r\nfunction parseGethParams(json: any, mergeForkIdPostMerge = true) {\r\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n\tconst {\r\n\t\tname,\r\n\t\tconfig,\r\n\t\tdifficulty,\r\n\t\tmixHash,\r\n\t\tgasLimit,\r\n\t\tcoinbase,\r\n\t\tbaseFeePerGas,\r\n\t}: {\r\n\t\tname: string;\r\n\t\tconfig: any;\r\n\t\tdifficulty: string;\r\n\t\tmixHash: string;\r\n\t\tgasLimit: string;\r\n\t\tcoinbase: string;\r\n\t\tbaseFeePerGas: string;\r\n\t} = json;\r\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n\tlet { extraData, timestamp, nonce }: { extraData: string; timestamp: string; nonce: string } =\r\n\t\tjson;\r\n\tconst genesisTimestamp = Number(timestamp);\r\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n\tconst { chainId }: { chainId: number } = config;\r\n\r\n\t// geth is not strictly putting empty fields with a 0x prefix\r\n\tif (extraData === '') {\r\n\t\textraData = '0x';\r\n\t}\r\n\t// geth may use number for timestamp\r\n\tif (!isHexPrefixed(timestamp)) {\r\n\t\t// eslint-disable-next-line radix\r\n\t\ttimestamp = intToHex(parseInt(timestamp));\r\n\t}\r\n\t// geth may not give us a nonce strictly formatted to an 8 byte hex string\r\n\tif (nonce.length !== 18) {\r\n\t\tnonce = formatNonce(nonce);\r\n\t}\r\n\r\n\t// EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\r\n\t// but have different configuration parameters in geth genesis parameters\r\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\tif (config.eip155Block !== config.eip158Block) {\r\n\t\tthrow new Error(\r\n\t\t\t'EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork',\r\n\t\t);\r\n\t}\r\n\r\n\tconst params = {\r\n\t\tname,\r\n\t\tchainId,\r\n\t\tnetworkId: chainId,\r\n\t\tgenesis: {\r\n\t\t\ttimestamp,\r\n\t\t\t// eslint-disable-next-line radix\r\n\t\t\tgasLimit: parseInt(gasLimit), // geth gasLimit and difficulty are hex strings while ours are `number`s\r\n\t\t\t// eslint-disable-next-line radix\r\n\t\t\tdifficulty: parseInt(difficulty),\r\n\t\t\tnonce,\r\n\t\t\textraData,\r\n\t\t\tmixHash,\r\n\t\t\tcoinbase,\r\n\t\t\tbaseFeePerGas,\r\n\t\t},\r\n\t\thardfork: undefined as string | undefined,\r\n\t\thardforks: [] as ConfigHardfork[],\r\n\t\tbootstrapNodes: [],\r\n\t\tconsensus:\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\t\t\tconfig.clique !== undefined\r\n\t\t\t\t? {\r\n\t\t\t\t\t\ttype: 'poa',\r\n\t\t\t\t\t\talgorithm: 'clique',\r\n\t\t\t\t\t\tclique: {\r\n\t\t\t\t\t\t\t// The recent geth genesis seems to be using blockperiodseconds\r\n\t\t\t\t\t\t\t// and epochlength for clique specification\r\n\t\t\t\t\t\t\t// see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\r\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\r\n\t\t\t\t\t\t\tperiod: config.clique.period ?? config.clique.blockperiodseconds,\r\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment\r\n\t\t\t\t\t\t\tepoch: config.clique.epoch ?? config.clique.epochlength,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t  }\r\n\t\t\t\t: {\r\n\t\t\t\t\t\ttype: 'pow',\r\n\t\t\t\t\t\talgorithm: 'ethash',\r\n\t\t\t\t\t\tethash: {},\r\n\t\t\t\t  },\r\n\t};\r\n\r\n\tconst forkMap: { [key: string]: { name: string; postMerge?: boolean; isTimestamp?: boolean } } =\r\n\t\t{\r\n\t\t\t[Hardfork.Homestead]: { name: 'homesteadBlock' },\r\n\t\t\t[Hardfork.Dao]: { name: 'daoForkBlock' },\r\n\t\t\t[Hardfork.TangerineWhistle]: { name: 'eip150Block' },\r\n\t\t\t[Hardfork.SpuriousDragon]: { name: 'eip155Block' },\r\n\t\t\t[Hardfork.Byzantium]: { name: 'byzantiumBlock' },\r\n\t\t\t[Hardfork.Constantinople]: { name: 'constantinopleBlock' },\r\n\t\t\t[Hardfork.Petersburg]: { name: 'petersburgBlock' },\r\n\t\t\t[Hardfork.Istanbul]: { name: 'istanbulBlock' },\r\n\t\t\t[Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\r\n\t\t\t[Hardfork.Berlin]: { name: 'berlinBlock' },\r\n\t\t\t[Hardfork.London]: { name: 'londonBlock' },\r\n\t\t\t[Hardfork.MergeForkIdTransition]: {\r\n\t\t\t\tname: 'mergeForkBlock',\r\n\t\t\t\tpostMerge: mergeForkIdPostMerge,\r\n\t\t\t},\r\n\t\t\t[Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\r\n\t\t\t[Hardfork.ShardingForkDev]: {\r\n\t\t\t\tname: 'shardingForkTime',\r\n\t\t\t\tpostMerge: true,\r\n\t\t\t\tisTimestamp: true,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t// forkMapRev is the map from config field name to Hardfork\r\n\tconst forkMapRev = Object.keys(forkMap).reduce<{ [key: string]: string }>((acc, elem) => {\r\n\t\tacc[forkMap[elem].name] = elem;\r\n\t\treturn acc;\r\n\t}, {});\r\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n\tconst configHardforkNames = Object.keys(config).filter(\r\n\t\t// eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access\r\n\t\tkey => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null,\r\n\t);\r\n\r\n\tparams.hardforks = configHardforkNames\r\n\t\t.map(nameBlock => ({\r\n\t\t\tname: forkMapRev[nameBlock],\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n\t\t\tblock:\r\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\t\t\t\tforkMap[forkMapRev[nameBlock]].isTimestamp === true ||\r\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\t\t\t\ttypeof config[nameBlock] !== 'number'\r\n\t\t\t\t\t? // eslint-disable-next-line no-null/no-null\r\n\t\t\t\t\t  null\r\n\t\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\t\t\t\t\t  config[nameBlock],\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n\t\t\ttimestamp:\r\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\t\t\t\tforkMap[forkMapRev[nameBlock]].isTimestamp === true &&\r\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\t\t\t\ttypeof config[nameBlock] === 'number'\r\n\t\t\t\t\t? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\t\t\t\t\t  config[nameBlock]\r\n\t\t\t\t\t: undefined,\r\n\t\t}))\r\n\t\t// eslint-disable-next-line no-null/no-null\r\n\t\t.filter(fork => fork.block !== null || fork.timestamp !== undefined) as ConfigHardfork[];\r\n\r\n\tparams.hardforks.sort(\r\n\t\t(a: ConfigHardfork, b: ConfigHardfork) => (a.block ?? Infinity) - (b.block ?? Infinity),\r\n\t);\r\n\r\n\tparams.hardforks.sort(\r\n\t\t(a: ConfigHardfork, b: ConfigHardfork) =>\r\n\t\t\t(a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp),\r\n\t);\r\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\tif (config.terminalTotalDifficulty !== undefined) {\r\n\t\t// Following points need to be considered for placement of merge hf\r\n\t\t// - Merge hardfork can't be placed at genesis\r\n\t\t// - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\r\n\t\t// - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\r\n\t\t//   necessary for e.g. withdrawals\r\n\t\tconst mergeConfig = {\r\n\t\t\tname: Hardfork.Merge,\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\r\n\t\t\tttd: config.terminalTotalDifficulty,\r\n\t\t\t// eslint-disable-next-line no-null/no-null\r\n\t\t\tblock: null,\r\n\t\t};\r\n\r\n\t\t// Merge hardfork has to be placed before first hardfork that is dependent on merge\r\n\t\tconst postMergeIndex = params.hardforks.findIndex(\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\t\t\t(hf: any) => forkMap[hf.name]?.postMerge === true,\r\n\t\t);\r\n\t\tif (postMergeIndex !== -1) {\r\n\t\t\tparams.hardforks.splice(postMergeIndex, 0, mergeConfig as unknown as ConfigHardfork);\r\n\t\t} else {\r\n\t\t\tparams.hardforks.push(mergeConfig as unknown as ConfigHardfork);\r\n\t\t}\r\n\t}\r\n\r\n\tconst latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\r\n\tparams.hardfork = latestHardfork?.name;\r\n\tparams.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 });\r\n\r\n\treturn params;\r\n}\r\n\r\n/**\r\n * Parses a genesis.json exported from Geth into parameters for Common instance\r\n * @param json representing the Geth genesis file\r\n * @param name optional chain name\r\n * @returns parsed params\r\n */\r\nexport function parseGethGenesis(json: any, name?: string, mergeForkIdPostMerge?: boolean) {\r\n\ttry {\r\n\t\tif (['config', 'difficulty', 'gasLimit', 'alloc'].some(field => !(field in json))) {\r\n\t\t\tthrow new Error('Invalid format, expected geth genesis fields missing');\r\n\t\t}\r\n\t\tif (name !== undefined) {\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign\r\n\t\t\tjson.name = name;\r\n\t\t}\r\n\t\treturn parseGethParams(json, mergeForkIdPostMerge);\r\n\t} catch (e: any) {\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\r\n\t\tthrow new Error(`Error parsing parameters file: ${e.message}`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Pads a `String` to have an even length\r\n * @param value\r\n * @return output\r\n */\r\nexport function padToEven(value: string): string {\r\n\tlet a = value;\r\n\r\n\tif (typeof a !== 'string') {\r\n\t\tthrow new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\r\n\t}\r\n\r\n\tif (a.length % 2) a = `0${a}`;\r\n\r\n\treturn a;\r\n}\r\n\r\n/**\r\n * Converts an `Number` to a `Uint8Array`\r\n * @param {Number} i\r\n * @return {Uint8Array}\r\n */\r\nexport const intToUint8Array = function (i: number) {\r\n\tconst hex = intToHex(i);\r\n\treturn hexToBytes(`0x${padToEven(hex.slice(2))}`);\r\n};\r\n\r\n/**\r\n * Attempts to turn a value into a `Uint8Array`.\r\n * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\r\n * with a `toArray()` or `toUint8Array()` method.\r\n * @param v the value\r\n */\r\nexport const toUint8Array = function (v: ToBytesInputTypes): Uint8Array {\r\n\t// eslint-disable-next-line no-null/no-null\r\n\tif (v === null || v === undefined) {\r\n\t\treturn new Uint8Array();\r\n\t}\r\n\r\n\tif (v instanceof Uint8Array) {\r\n\t\treturn v;\r\n\t}\r\n\r\n\tif (Array.isArray(v)) {\r\n\t\treturn Uint8Array.from(v);\r\n\t}\r\n\r\n\tif (typeof v === 'string') {\r\n\t\tif (!isHexString(v)) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`,\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn hexToBytes(padToEven(stripHexPrefix(v)));\r\n\t}\r\n\r\n\tif (typeof v === 'number') {\r\n\t\treturn toUint8Array(numberToHex(v));\r\n\t}\r\n\r\n\tif (typeof v === 'bigint') {\r\n\t\tif (v < BigInt(0)) {\r\n\t\t\tthrow new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\r\n\t\t}\r\n\t\tlet n = v.toString(16);\r\n\t\tif (n.length % 2) n = `0${n}`;\r\n\t\treturn toUint8Array(`0x${n}`);\r\n\t}\r\n\r\n\tif (v.toArray) {\r\n\t\t// converts a BN to a Uint8Array\r\n\t\treturn Uint8Array.from(v.toArray());\r\n\t}\r\n\r\n\tthrow new Error('invalid type');\r\n};\r\n\r\n/**\r\n * Converts a {@link Uint8Array} to a {@link bigint}\r\n */\r\nexport function uint8ArrayToBigInt(buf: Uint8Array) {\r\n\tconst hex = bytesToHex(buf);\r\n\tif (hex === '0x') {\r\n\t\treturn BigInt(0);\r\n\t}\r\n\treturn BigInt(hex);\r\n}\r\n\r\n/**\r\n * Converts a {@link bigint} to a {@link Uint8Array}\r\n */\r\nexport function bigIntToUint8Array(num: bigint) {\r\n\treturn toUint8Array(`0x${num.toString(16)}`);\r\n}\r\n\r\n/**\r\n * Returns a Uint8Array filled with 0s.\r\n * @param bytes the number of bytes the Uint8Array should be\r\n */\r\nexport const zeros = function (bytes: number): Uint8Array {\r\n\treturn new Uint8Array(bytes).fill(0);\r\n};\r\n\r\n/**\r\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\r\n * Truncates the beginning or end of input if its length exceeds `length`.\r\n * @param msg the value to pad (Uint8Array)\r\n * @param length the number of bytes the output should be\r\n * @param right whether to start padding form the left or right\r\n * @return (Uint8Array)\r\n */\r\nconst setLength = function (msg: Uint8Array, length: number, right: boolean) {\r\n\tconst buf = zeros(length);\r\n\tif (right) {\r\n\t\tif (msg.length < length) {\r\n\t\t\tbuf.set(msg);\r\n\t\t\treturn buf;\r\n\t\t}\r\n\t\treturn msg.subarray(0, length);\r\n\t}\r\n\tif (msg.length < length) {\r\n\t\tbuf.set(msg, length - msg.length);\r\n\t\treturn buf;\r\n\t}\r\n\treturn msg.subarray(-length);\r\n};\r\n\r\n/**\r\n * Throws if input is not a Uint8Array\r\n * @param {Uint8Array} input value to check\r\n */\r\nexport function assertIsUint8Array(input: unknown): asserts input is Uint8Array {\r\n\tif (!(input instanceof Uint8Array)) {\r\n\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\r\n\t\tconst msg = `This method only supports Uint8Array but input was: ${input}`;\r\n\t\tthrow new Error(msg);\r\n\t}\r\n}\r\n/**\r\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\r\n * Or it truncates the beginning if it exceeds.\r\n * @param msg the value to pad (Uint8Array)\r\n * @param length the number of bytes the output should be\r\n * @return (Uint8Array)\r\n */\r\nexport const setLengthLeft = function (msg: Uint8Array, length: number) {\r\n\tassertIsUint8Array(msg);\r\n\treturn setLength(msg, length, false);\r\n};\r\n\r\n/**\r\n * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.\r\n * @param a (Uint8Array|Array|String)\r\n * @return (Uint8Array|Array|String)\r\n */\r\nexport function stripZeros<T extends Uint8Array | number[] | string>(a: T): T {\r\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\r\n\tlet first = a[0];\r\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\r\n\twhile (a.length > 0 && first.toString() === '0') {\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign\r\n\t\ta = a.slice(1) as T;\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access\r\n\t\tfirst = a[0];\r\n\t}\r\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n\treturn a;\r\n}\r\n\r\n/**\r\n * Trims leading zeros from a `Uint8Array`.\r\n * @param a (Uint8Array)\r\n * @return (Uint8Array)\r\n */\r\nexport const unpadUint8Array = function (a: Uint8Array): Uint8Array {\r\n\tassertIsUint8Array(a);\r\n\treturn stripZeros(a);\r\n};\r\n\r\n/**\r\n * Converts a {@link bigint} to a `0x` prefixed hex string\r\n */\r\nexport const bigIntToHex = (num: bigint) => `0x${num.toString(16)}`;\r\n\r\n/**\r\n * Convert value from bigint to an unpadded Uint8Array\r\n * (useful for RLP transport)\r\n * @param value value to convert\r\n */\r\nexport function bigIntToUnpaddedUint8Array(value: bigint): Uint8Array {\r\n\treturn unpadUint8Array(bigIntToUint8Array(value));\r\n}\r\n\r\nfunction calculateSigRecovery(v: bigint, chainId?: bigint): bigint {\r\n\tif (v === BigInt(0) || v === BigInt(1)) return v;\r\n\r\n\tif (chainId === undefined) {\r\n\t\treturn v - BigInt(27);\r\n\t}\r\n\treturn v - (chainId * BigInt(2) + BigInt(35));\r\n}\r\n\r\nfunction isValidSigRecovery(recovery: bigint): boolean {\r\n\treturn recovery === BigInt(0) || recovery === BigInt(1);\r\n}\r\n\r\n/**\r\n * ECDSA public key recovery from signature.\r\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\r\n * @returns Recovered public key\r\n */\r\nexport const ecrecover = function (\r\n\tmsgHash: Uint8Array,\r\n\tv: bigint,\r\n\tr: Uint8Array,\r\n\ts: Uint8Array,\r\n\tchainId?: bigint,\r\n): Uint8Array {\r\n\tconst recovery = calculateSigRecovery(v, chainId);\r\n\tif (!isValidSigRecovery(recovery)) {\r\n\t\tthrow new Error('Invalid signature v value');\r\n\t}\r\n\r\n\tconst senderPubKey = new secp256k1.Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s))\r\n\t\t.addRecoveryBit(Number(recovery))\r\n\t\t.recoverPublicKey(msgHash)\r\n\t\t.toRawBytes(false);\r\n\treturn senderPubKey.slice(1);\r\n};\r\n\r\n/**\r\n * Convert an input to a specified type.\r\n * Input of null/undefined returns null/undefined regardless of the output type.\r\n * @param input value to convert\r\n * @param outputType type to output\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null;\r\nexport function toType<T extends TypeOutput>(input: undefined, outputType: T): undefined;\r\nexport function toType<T extends TypeOutput>(\r\n\tinput: ToBytesInputTypes,\r\n\toutputType: T,\r\n): TypeOutputReturnType[T];\r\nexport function toType<T extends TypeOutput>(\r\n\tinput: ToBytesInputTypes,\r\n\toutputType: T,\r\n\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n): TypeOutputReturnType[T] | undefined | null {\r\n\t// eslint-disable-next-line no-null/no-null\r\n\tif (input === null) {\r\n\t\t// eslint-disable-next-line no-null/no-null\r\n\t\treturn null;\r\n\t}\r\n\tif (input === undefined) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tif (typeof input === 'string' && !isHexString(input)) {\r\n\t\tthrow new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\r\n\t} else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\r\n\t\tthrow new Error(\r\n\t\t\t'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)',\r\n\t\t);\r\n\t}\r\n\r\n\tconst output = toUint8Array(input);\r\n\r\n\tswitch (outputType) {\r\n\t\tcase TypeOutput.Uint8Array:\r\n\t\t\treturn output as TypeOutputReturnType[T];\r\n\t\tcase TypeOutput.BigInt:\r\n\t\t\treturn uint8ArrayToBigInt(output) as TypeOutputReturnType[T];\r\n\t\tcase TypeOutput.Number: {\r\n\t\t\tconst bigInt = uint8ArrayToBigInt(output);\r\n\t\t\tif (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn Number(bigInt) as TypeOutputReturnType[T];\r\n\t\t}\r\n\t\tcase TypeOutput.PrefixedHexString:\r\n\t\t\treturn bytesToHex(output) as TypeOutputReturnType[T];\r\n\t\tdefault:\r\n\t\t\tthrow new Error('unknown outputType');\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}