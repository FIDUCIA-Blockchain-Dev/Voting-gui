{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { format, numberToHex } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { transactionReceiptSchema } from '../schemas.js';\n/**\r\n * This function watches a Transaction by subscribing to new heads.\r\n * It is used by `watchTransactionForConfirmations`, in case the provider does not support subscription.\r\n * And it is also used by `watchTransactionBySubscription`, as a fallback, if the subscription failed for any reason.\r\n */\nexport const watchTransactionByPolling = _ref => {\n  let {\n    web3Context,\n    transactionReceipt,\n    transactionPromiEvent,\n    returnFormat\n  } = _ref;\n  var _a;\n  // Having a transactionReceipt means that the transaction has already been included\n  // in at least one block, so we start with 1\n  let confirmations = 1;\n  const intervalId = setInterval(() => {\n    (() => __awaiter(void 0, void 0, void 0, function* () {\n      if (confirmations >= web3Context.transactionConfirmationBlocks) clearInterval(intervalId);\n      const nextBlock = yield ethRpcMethods.getBlockByNumber(web3Context.requestManager, numberToHex(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)), false);\n      if (nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.hash) {\n        confirmations += 1;\n        transactionPromiEvent.emit('confirmation', {\n          confirmations: format({\n            format: 'uint'\n          }, confirmations, returnFormat),\n          receipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n          latestBlockHash: format({\n            format: 'bytes32'\n          }, nextBlock.hash, returnFormat)\n        });\n      }\n    }))();\n  }, (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval);\n};","map":{"version":3,"names":["format","numberToHex","ethRpcMethods","transactionReceiptSchema","watchTransactionByPolling","_ref","web3Context","transactionReceipt","transactionPromiEvent","returnFormat","confirmations","intervalId","setInterval","__awaiter","transactionConfirmationBlocks","clearInterval","nextBlock","getBlockByNumber","requestManager","BigInt","blockNumber","hash","emit","receipt","latestBlockHash","_a","transactionReceiptPollingInterval","transactionPollingInterval"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth\\src\\utils\\watch_transaction_by_pooling.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { Bytes, EthExecutionAPI, TransactionReceipt } from 'web3-types';\r\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\r\nimport { format, numberToHex } from 'web3-utils';\r\nimport { ethRpcMethods } from 'web3-rpc-methods';\r\n\r\nimport { DataFormat } from 'web3-types';\r\nimport { SendSignedTransactionEvents, SendTransactionEvents } from '../types.js';\r\nimport { transactionReceiptSchema } from '../schemas.js';\r\n\r\nexport type Web3PromiEventEventTypeBase<ReturnFormat extends DataFormat> =\r\n\t| SendTransactionEvents<ReturnFormat>\r\n\t| SendSignedTransactionEvents<ReturnFormat>;\r\n\r\nexport type WaitProps<ReturnFormat extends DataFormat, ResolveType = TransactionReceipt> = {\r\n\tweb3Context: Web3Context<EthExecutionAPI>;\r\n\ttransactionReceipt: TransactionReceipt;\r\n\ttransactionPromiEvent: Web3PromiEvent<ResolveType, Web3PromiEventEventTypeBase<ReturnFormat>>;\r\n\treturnFormat: ReturnFormat;\r\n};\r\n\r\n/**\r\n * This function watches a Transaction by subscribing to new heads.\r\n * It is used by `watchTransactionForConfirmations`, in case the provider does not support subscription.\r\n * And it is also used by `watchTransactionBySubscription`, as a fallback, if the subscription failed for any reason.\r\n */\r\nexport const watchTransactionByPolling = <\r\n\tReturnFormat extends DataFormat,\r\n\tResolveType = TransactionReceipt,\r\n>({\r\n\tweb3Context,\r\n\ttransactionReceipt,\r\n\ttransactionPromiEvent,\r\n\treturnFormat,\r\n}: WaitProps<ReturnFormat, ResolveType>) => {\r\n\t// Having a transactionReceipt means that the transaction has already been included\r\n\t// in at least one block, so we start with 1\r\n\tlet confirmations = 1;\r\n\tconst intervalId = setInterval(() => {\r\n\t\t(async () => {\r\n\t\t\tif (confirmations >= web3Context.transactionConfirmationBlocks)\r\n\t\t\t\tclearInterval(intervalId);\r\n\r\n\t\t\tconst nextBlock = await ethRpcMethods.getBlockByNumber(\r\n\t\t\t\tweb3Context.requestManager,\r\n\t\t\t\tnumberToHex(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)),\r\n\t\t\t\tfalse,\r\n\t\t\t);\r\n\r\n\t\t\tif (nextBlock?.hash) {\r\n\t\t\t\tconfirmations += 1;\r\n\r\n\t\t\t\ttransactionPromiEvent.emit('confirmation', {\r\n\t\t\t\t\tconfirmations: format({ format: 'uint' }, confirmations, returnFormat),\r\n\t\t\t\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\r\n\t\t\t\t\tlatestBlockHash: format(\r\n\t\t\t\t\t\t{ format: 'bytes32' },\r\n\t\t\t\t\t\tnextBlock.hash as Bytes,\r\n\t\t\t\t\t\treturnFormat,\r\n\t\t\t\t\t),\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t})() as unknown;\r\n\t}, web3Context.transactionReceiptPollingInterval ?? web3Context.transactionPollingInterval);\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAASA,MAAM,EAAEC,WAAW,QAAQ,YAAY;AAChD,SAASC,aAAa,QAAQ,kBAAkB;AAIhD,SAASC,wBAAwB,QAAQ,eAAe;AAaxD;;;;;AAKA,OAAO,MAAMC,yBAAyB,GAAGC,IAAA,IAQE;EAAA,IALzC;IACDC,WAAW;IACXC,kBAAkB;IAClBC,qBAAqB;IACrBC;EAAY,CAC0B,GAAAJ,IAAA;;EACtC;EACA;EACA,IAAIK,aAAa,GAAG,CAAC;EACrB,MAAMC,UAAU,GAAGC,WAAW,CAAC,MAAK;IACnC,CAAC,MAAWC,SAAA;MACX,IAAIH,aAAa,IAAIJ,WAAW,CAACQ,6BAA6B,EAC7DC,aAAa,CAACJ,UAAU,CAAC;MAE1B,MAAMK,SAAS,GAAG,MAAMd,aAAa,CAACe,gBAAgB,CACrDX,WAAW,CAACY,cAAc,EAC1BjB,WAAW,CAACkB,MAAM,CAACZ,kBAAkB,CAACa,WAAW,CAAC,GAAGD,MAAM,CAACT,aAAa,CAAC,CAAC,EAC3E,KAAK,CACL;MAED,IAAIM,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEK,IAAI,EAAE;QACpBX,aAAa,IAAI,CAAC;QAElBF,qBAAqB,CAACc,IAAI,CAAC,cAAc,EAAE;UAC1CZ,aAAa,EAAEV,MAAM,CAAC;YAAEA,MAAM,EAAE;UAAM,CAAE,EAAEU,aAAa,EAAED,YAAY,CAAC;UACtEc,OAAO,EAAEvB,MAAM,CAACG,wBAAwB,EAAEI,kBAAkB,EAAEE,YAAY,CAAC;UAC3Ee,eAAe,EAAExB,MAAM,CACtB;YAAEA,MAAM,EAAE;UAAS,CAAE,EACrBgB,SAAS,CAACK,IAAa,EACvBZ,YAAY;SAEb,CAAC;;IAEJ,CAAC,GAAC,CAAa;EAChB,CAAC,EAAE,CAAAgB,EAAA,GAAAnB,WAAW,CAACoB,iCAAiC,cAAAD,EAAA,cAAAA,EAAA,GAAInB,WAAW,CAACqB,0BAA0B,CAAC;AAC5F,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}