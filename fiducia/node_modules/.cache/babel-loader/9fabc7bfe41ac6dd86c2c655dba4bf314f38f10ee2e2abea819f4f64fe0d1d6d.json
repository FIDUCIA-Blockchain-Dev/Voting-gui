{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Web3Context } from 'web3-core';\nimport { ENSNetworkNotSyncedError, ENSUnsupportedNetworkError } from 'web3-errors';\nimport { isSyncing } from 'web3-eth';\nimport { getId } from 'web3-net';\nimport { DEFAULT_RETURN_FORMAT, FMT_NUMBER } from 'web3-types';\nimport { networkIds, registryAddresses } from './config.js';\nimport { Registry } from './registry.js';\nimport { Resolver } from './resolver.js';\n/**\r\n * This class is designed to interact with the ENS system on the Ethereum blockchain.\r\n *\r\n */\nexport class ENS extends Web3Context {\n  /**\r\n   * Use to create an instance of ENS\r\n   * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)\r\n   * @param provider - (Optional) The provider to use for the ENS instance\r\n   * @example\r\n   * ```ts\r\n   * const ens = new ENS(\r\n   * \t\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\r\n   * \t\"http://localhost:8545\"\r\n   * );\r\n   *\r\n   * console.log( ens.defaultChain);\r\n   * > mainnet\r\n   * ```\r\n   */\n  constructor(registryAddr, provider) {\n    super(provider !== null && provider !== void 0 ? provider : '');\n    this.registryAddress = registryAddr !== null && registryAddr !== void 0 ? registryAddr : registryAddresses.main; // will default to main registry address\n    this._registry = new Registry(this.getContextObject(), registryAddr);\n    this._resolver = new Resolver(this._registry);\n  }\n  /**\r\n   * Returns the Resolver by the given address\r\n   * @param name - The name of the ENS domain\r\n   * @returns - An contract instance of the resolver\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const resolver = await ens.getResolver('resolver');\r\n   *\r\n   * console.log(resolver.options.address);\r\n   * > '0x1234567890123456789012345678901234567890'\r\n   * ```\r\n   */\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.getResolver(name);\n    });\n  }\n  /**\r\n   * Returns true if the record exists\r\n   * @param name - The ENS name\r\n   * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.\r\n   * @example\r\n   * ```ts\r\n   * const exists = await web3.eth.ens.recordExists('ethereum.eth');\r\n   * ```\r\n   */\n  recordExists(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.recordExists(name);\n    });\n  }\n  /**\r\n   * Returns the caching TTL (time-to-live) of an ENS name.\r\n   * @param name - The ENS name\r\n   * @returns - Returns the caching TTL (time-to-live) of a name.\r\n   * @example\r\n   * ```ts\r\n   * const owner = await web3.eth.ens.getTTL('ethereum.eth');\r\n   * ```\r\n   */\n  getTTL(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.getTTL(name);\n    });\n  }\n  /**\r\n   * Returns the owner by the given name and current configured or detected Registry\r\n   * @param name - The ENS name\r\n   * @returns - Returns the address of the owner of the name.\r\n   * @example\r\n   * ```ts\r\n   * const owner = await web3.eth.ens.getOwner('ethereum.eth');\r\n   * ```\r\n   */\n  getOwner(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.getOwner(name);\n    });\n  }\n  /**\r\n   * Resolves an ENS name to an Ethereum address.\r\n   * @param ENSName - The ENS name to resolve\r\n   * @param coinType - (Optional) The coin type, defaults to 60 (ETH)\r\n   * @returns - The Ethereum address of the given name\r\n   * ```ts\r\n   * const address = await web3.eth.ens.getAddress('ethereum.eth');\r\n   * console.log(address);\r\n   * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'\r\n   * ```\r\n   */\n  getAddress(ENSName) {\n    let coinType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getAddress(ENSName, coinType);\n    });\n  }\n  /**\r\n   * Returns the X and Y coordinates of the curve point for the public key.\r\n   * @param ENSName - The ENS name\r\n   * @returns - The X and Y coordinates of the curve point for the public key\r\n   * @example\r\n   * ```ts\r\n   * const key = await web3.eth.ens.getPubkey('ethereum.eth');\r\n   * console.log(key);\r\n   * > {\r\n   * \"0\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n   * \"1\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n   * \"x\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n   * \"y\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\r\n   * }\r\n   * ```\r\n   */\n  getPubkey(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getPubkey(ENSName);\n    });\n  }\n  /**\r\n   * Returns the content hash object associated with an ENS node.\r\n   * @param ENSName - The ENS name\r\n   * @returns - The content hash object associated with an ENS node\r\n   * @example\r\n   * ```ts\r\n   * const hash = await web3.eth.ens.getContenthash('ethereum.eth');\r\n   * console.log(hash);\r\n   * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'\r\n   * ```\r\n   */\n  getContenthash(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getContenthash(ENSName);\n    });\n  }\n  /**\r\n   * Checks if the current used network is synced and looks for ENS support there.\r\n   * Throws an error if not.\r\n   * @returns - The address of the ENS registry if the network has been detected successfully\r\n   * @example\r\n   * ```ts\r\n   * console.log(await web3.eth.ens.checkNetwork());\r\n   * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\r\n   * ```\r\n   */\n  checkNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const now = Date.now() / 1000;\n      if (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {\n        const syncInfo = yield isSyncing(this);\n        if (!(typeof syncInfo === 'boolean' && !syncInfo)) {\n          throw new ENSNetworkNotSyncedError();\n        }\n        this._lastSyncCheck = now;\n      }\n      if (this._detectedAddress) {\n        return this._detectedAddress;\n      }\n      const networkType = yield getId(this, Object.assign(Object.assign({}, DEFAULT_RETURN_FORMAT), {\n        number: FMT_NUMBER.HEX\n      })); // get the network from provider\n      const addr = registryAddresses[networkIds[networkType]];\n      if (typeof addr === 'undefined') {\n        throw new ENSUnsupportedNetworkError(networkType);\n      }\n      this._detectedAddress = addr;\n      return this._detectedAddress;\n    });\n  }\n  /**\r\n   * Returns true if the related Resolver does support the given signature or interfaceId.\r\n   * @param ENSName - The ENS name\r\n   * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation\r\n   * @returns - `true` if the related Resolver does support the given signature or interfaceId.\r\n   * @example\r\n   * ```ts\r\n   * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');\r\n   * console.log(supports);\r\n   * > true\r\n   * ```\r\n   */\n  supportsInterface(ENSName, interfaceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.supportsInterface(ENSName, interfaceId);\n    });\n  }\n  /**\r\n   * @returns - Returns all events that can be emitted by the ENS registry.\r\n   */\n  get events() {\n    return this._registry.events;\n  }\n}","map":{"version":3,"names":["Web3Context","ENSNetworkNotSyncedError","ENSUnsupportedNetworkError","isSyncing","getId","DEFAULT_RETURN_FORMAT","FMT_NUMBER","networkIds","registryAddresses","Registry","Resolver","ENS","constructor","registryAddr","provider","registryAddress","main","_registry","getContextObject","_resolver","getResolver","name","recordExists","getTTL","getOwner","getAddress","ENSName","coinType","arguments","length","undefined","getPubkey","getContenthash","checkNetwork","now","Date","_lastSyncCheck","syncInfo","_detectedAddress","networkType","Object","assign","number","HEX","addr","supportsInterface","interfaceId","events"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-ens\\src\\ens.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { Web3Context, Web3ContextObject } from 'web3-core';\r\nimport { ENSNetworkNotSyncedError, ENSUnsupportedNetworkError } from 'web3-errors';\r\nimport { isSyncing } from 'web3-eth';\r\nimport { Contract } from 'web3-eth-contract';\r\nimport { getId } from 'web3-net';\r\nimport {\r\n\tDEFAULT_RETURN_FORMAT,\r\n\tEthExecutionAPI,\r\n\tFMT_NUMBER,\r\n\tSupportedProviders,\r\n\tWeb3NetAPI,\r\n} from 'web3-types';\r\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\r\nimport { networkIds, registryAddresses } from './config.js';\r\nimport { Registry } from './registry.js';\r\nimport { Resolver } from './resolver.js';\r\n\r\n/**\r\n * This class is designed to interact with the ENS system on the Ethereum blockchain.\r\n *\r\n */\r\nexport class ENS extends Web3Context<EthExecutionAPI & Web3NetAPI> {\r\n\t/**\r\n\t * The registryAddress property can be used to define a custom registry address when you are connected to an unknown chain. It defaults to the main registry address.\r\n\t */\r\n\tpublic registryAddress: string;\r\n\tprivate readonly _registry: Registry;\r\n\tprivate readonly _resolver: Resolver;\r\n\tprivate _detectedAddress?: string;\r\n\tprivate _lastSyncCheck?: number;\r\n\r\n\t/**\r\n\t * Use to create an instance of ENS\r\n\t * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)\r\n\t * @param provider - (Optional) The provider to use for the ENS instance\r\n\t * @example\r\n\t * ```ts\r\n\t * const ens = new ENS(\r\n\t * \t\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\r\n\t * \t\"http://localhost:8545\"\r\n\t * );\r\n\t *\r\n\t * console.log( ens.defaultChain);\r\n\t * > mainnet\r\n\t * ```\r\n\t */\r\n\tpublic constructor(\r\n\t\tregistryAddr?: string,\r\n\t\tprovider?:\r\n\t\t\t| SupportedProviders<EthExecutionAPI & Web3NetAPI>\r\n\t\t\t| Web3ContextObject<EthExecutionAPI & Web3NetAPI>\r\n\t\t\t| string,\r\n\t) {\r\n\t\tsuper(provider ?? '');\r\n\t\tthis.registryAddress = registryAddr ?? registryAddresses.main; // will default to main registry address\r\n\t\tthis._registry = new Registry(this.getContextObject(), registryAddr);\r\n\t\tthis._resolver = new Resolver(this._registry);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Resolver by the given address\r\n\t * @param name - The name of the ENS domain\r\n\t * @returns - An contract instance of the resolver\r\n\t *\r\n\t * @example\r\n\t * ```ts\r\n\t * const resolver = await ens.getResolver('resolver');\r\n\t *\r\n\t * console.log(resolver.options.address);\r\n\t * > '0x1234567890123456789012345678901234567890'\r\n\t * ```\r\n\t */\r\n\tpublic async getResolver(name: string): Promise<Contract<typeof PublicResolverAbi>> {\r\n\t\treturn this._registry.getResolver(name);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the record exists\r\n\t * @param name - The ENS name\r\n\t * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.\r\n\t * @example\r\n\t * ```ts\r\n\t * const exists = await web3.eth.ens.recordExists('ethereum.eth');\r\n\t * ```\r\n\t */\r\n\tpublic async recordExists(name: string): Promise<unknown> {\r\n\t\treturn this._registry.recordExists(name);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the caching TTL (time-to-live) of an ENS name.\r\n\t * @param name - The ENS name\r\n\t * @returns - Returns the caching TTL (time-to-live) of a name.\r\n\t * @example\r\n\t * ```ts\r\n\t * const owner = await web3.eth.ens.getTTL('ethereum.eth');\r\n\t * ```\r\n\t */\r\n\tpublic async getTTL(name: string): Promise<unknown> {\r\n\t\treturn this._registry.getTTL(name);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the owner by the given name and current configured or detected Registry\r\n\t * @param name - The ENS name\r\n\t * @returns - Returns the address of the owner of the name.\r\n\t * @example\r\n\t * ```ts\r\n\t * const owner = await web3.eth.ens.getOwner('ethereum.eth');\r\n\t * ```\r\n\t */\r\n\tpublic async getOwner(name: string): Promise<unknown> {\r\n\t\treturn this._registry.getOwner(name);\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves an ENS name to an Ethereum address.\r\n\t * @param ENSName - The ENS name to resolve\r\n\t * @param coinType - (Optional) The coin type, defaults to 60 (ETH)\r\n\t * @returns - The Ethereum address of the given name\r\n\t * ```ts\r\n\t * const address = await web3.eth.ens.getAddress('ethereum.eth');\r\n\t * console.log(address);\r\n\t * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'\r\n\t * ```\r\n\t */\r\n\tpublic async getAddress(ENSName: string, coinType = 60) {\r\n\t\treturn this._resolver.getAddress(ENSName, coinType);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X and Y coordinates of the curve point for the public key.\r\n\t * @param ENSName - The ENS name\r\n\t * @returns - The X and Y coordinates of the curve point for the public key\r\n\t * @example\r\n\t * ```ts\r\n\t * const key = await web3.eth.ens.getPubkey('ethereum.eth');\r\n\t * console.log(key);\r\n\t * > {\r\n\t * \"0\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n\t * \"1\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n\t * \"x\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n\t * \"y\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tpublic async getPubkey(ENSName: string) {\r\n\t\treturn this._resolver.getPubkey(ENSName);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the content hash object associated with an ENS node.\r\n\t * @param ENSName - The ENS name\r\n\t * @returns - The content hash object associated with an ENS node\r\n\t * @example\r\n\t * ```ts\r\n\t * const hash = await web3.eth.ens.getContenthash('ethereum.eth');\r\n\t * console.log(hash);\r\n\t * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'\r\n\t * ```\r\n\t */\r\n\tpublic async getContenthash(ENSName: string) {\r\n\t\treturn this._resolver.getContenthash(ENSName);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the current used network is synced and looks for ENS support there.\r\n\t * Throws an error if not.\r\n\t * @returns - The address of the ENS registry if the network has been detected successfully\r\n\t * @example\r\n\t * ```ts\r\n\t * console.log(await web3.eth.ens.checkNetwork());\r\n\t * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\r\n\t * ```\r\n\t */\r\n\tpublic async checkNetwork() {\r\n\t\tconst now = Date.now() / 1000;\r\n\t\tif (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {\r\n\t\t\tconst syncInfo = await isSyncing(this);\r\n\r\n\t\t\tif (!(typeof syncInfo === 'boolean' && !syncInfo)) {\r\n\t\t\t\tthrow new ENSNetworkNotSyncedError();\r\n\t\t\t}\r\n\r\n\t\t\tthis._lastSyncCheck = now;\r\n\t\t}\r\n\r\n\t\tif (this._detectedAddress) {\r\n\t\t\treturn this._detectedAddress;\r\n\t\t}\r\n\t\tconst networkType = await getId(this, {\r\n\t\t\t...DEFAULT_RETURN_FORMAT,\r\n\t\t\tnumber: FMT_NUMBER.HEX,\r\n\t\t}); // get the network from provider\r\n\t\tconst addr = registryAddresses[networkIds[networkType]];\r\n\r\n\t\tif (typeof addr === 'undefined') {\r\n\t\t\tthrow new ENSUnsupportedNetworkError(networkType);\r\n\t\t}\r\n\r\n\t\tthis._detectedAddress = addr;\r\n\t\treturn this._detectedAddress;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the related Resolver does support the given signature or interfaceId.\r\n\t * @param ENSName - The ENS name\r\n\t * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation\r\n\t * @returns - `true` if the related Resolver does support the given signature or interfaceId.\r\n\t * @example\r\n\t * ```ts\r\n\t * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');\r\n\t * console.log(supports);\r\n\t * > true\r\n\t * ```\r\n\t */\r\n\tpublic async supportsInterface(ENSName: string, interfaceId: string) {\r\n\t\treturn this._resolver.supportsInterface(ENSName, interfaceId);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns - Returns all events that can be emitted by the ENS registry.\r\n\t */\r\n\tpublic get events() {\r\n\t\treturn this._registry.events;\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}