{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport { getAccessListData, verifyAccessList, getAccessListJSON, getDataFeeEIP2930 } from './utils.js';\nimport { bigIntToHex, toUint8Array, ecrecover, uint8ArrayToBigInt, bigIntToUnpaddedUint8Array } from '../common/utils.js';\nimport { BaseTransaction } from './baseTransaction.js';\nconst TRANSACTION_TYPE = 1;\nconst TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n/**\r\n * Typed transaction with optional access lists\r\n *\r\n * - TransactionType: 1\r\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\r\n */\n// eslint-disable-next-line no-use-before-define\nexport class AccessListEIP2930Transaction extends BaseTransaction {\n  /**\r\n   * This constructor takes the values, validates them, assigns them and freezes the object.\r\n   *\r\n   * It is not recommended to use this constructor directly. Instead use\r\n   * the static factory methods to assist in creating a Transaction object from\r\n   * varying data types.\r\n   */\n  constructor(txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a;\n    super(Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    /**\r\n     * The default HF if the tx type is active on that HF\r\n     * or the first greater HF where the tx is active.\r\n     *\r\n     * @hidden\r\n     */\n    this.DEFAULT_HARDFORK = 'berlin';\n    const {\n      chainId,\n      accessList,\n      gasPrice\n    } = txData;\n    this.common = this._getCommon(opts.common, chainId);\n    this.chainId = this.common.chainId();\n    // EIP-2718 check is done in Common\n    if (!this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common');\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n    // Populate the access list fields\n    const accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    this.accessList = accessListData.accessList;\n    this.AccessListJSON = accessListData.AccessListJSON;\n    // Verify the access list format.\n    verifyAccessList(this.accessList);\n    this.gasPrice = uint8ArrayToBigInt(toUint8Array(gasPrice === '' ? '0x' : gasPrice));\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice\n    });\n    BaseTransaction._validateNotArray(txData);\n    if (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n      const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n      throw new Error(msg);\n    }\n    this._validateYParity();\n    this._validateHighS();\n    const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\r\n   * Instantiate a transaction from a data dictionary.\r\n   *\r\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n   * v, r, s }\r\n   *\r\n   * Notes:\r\n   * - `chainId` will be set automatically if not provided\r\n   * - All parameters are optional and have some basic default values\r\n   */\n  static fromTxData(txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new AccessListEIP2930Transaction(txData, opts);\n  }\n  /**\r\n   * Instantiate a transaction from the serialized tx.\r\n   *\r\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\r\n   */\n  static fromSerializedTx(serialized) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n      throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${bytesToHex(serialized.subarray(0, 1))}`);\n    }\n    const values = RLP.decode(Uint8Array.from(serialized.subarray(1)));\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n  }\n  /**\r\n   * Create a transaction from a values array.\r\n   *\r\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\r\n   */\n  static fromValuesArray(values) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n    }\n    const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n    this._validateNotArray({\n      chainId,\n      v\n    });\n    validateNoLeadingZeroes({\n      nonce,\n      gasPrice,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    const emptyAccessList = [];\n    return new AccessListEIP2930Transaction({\n      chainId: uint8ArrayToBigInt(chainId),\n      nonce,\n      gasPrice,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n      v: v !== undefined ? uint8ArrayToBigInt(v) : undefined,\n      r,\n      s\n    }, opts);\n  }\n  /**\r\n   * The amount of gas paid for the data in this tx\r\n   */\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    let cost = super.getDataFee();\n    cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n    return cost;\n  }\n  /**\r\n   * The up front amount that an account must have for this transaction to be valid\r\n   */\n  getUpfrontCost() {\n    return this.gasLimit * this.gasPrice + this.value;\n  }\n  /**\r\n   * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.\r\n   *\r\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\r\n   *\r\n   * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\r\n   * with {@link Block.fromValuesArray}.\r\n   *\r\n   * For an unsigned tx this method uses the empty UINT8ARRAY values for the\r\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\r\n   * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\r\n   */\n  raw() {\n    return [bigIntToUnpaddedUint8Array(this.chainId), bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.gasPrice), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data, this.accessList, this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]), this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]), this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])];\n  }\n  /**\r\n   * Returns the serialized encoding of the EIP-2930 transaction.\r\n   *\r\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\r\n   *\r\n   * Note that in contrast to the legacy tx serialization format this is not\r\n   * valid RLP any more due to the raw tx type preceding and concatenated to\r\n   * the RLP encoding of the values.\r\n   */\n  serialize() {\n    const base = this.raw();\n    return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n  }\n  /**\r\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\r\n   * to sign the transaction (e.g. for sending to a hardware wallet).\r\n   *\r\n   * Note: in contrast to the legacy tx the raw message format is already\r\n   * serialized and doesn't need to be RLP encoded any more.\r\n   *\r\n   * ```javascript\r\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\r\n   * ```\r\n   *\r\n   * @param hashMessage - Return hashed message if set to true (default: true)\r\n   */\n  getMessageToSign() {\n    let hashMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const base = this.raw().slice(0, 8);\n    const message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n    if (hashMessage) {\n      return keccak256(message);\n    }\n    return message;\n  }\n  /**\r\n   * Computes a sha3-256 hash of the serialized tx.\r\n   *\r\n   * This method can only be used for signed txs (it throws otherwise).\r\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\r\n   */\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(this.serialize());\n      }\n      return this.cache.hash;\n    }\n    return keccak256(this.serialize());\n  }\n  /**\r\n   * Computes a sha3-256 hash which can be used to verify the signature\r\n   */\n  getMessageToVerifySignature() {\n    return this.getMessageToSign();\n  }\n  /**\r\n   * Returns the public key of the sender\r\n   */\n  getSenderPublicKey() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n      throw new Error(msg);\n    }\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n    this._validateHighS();\n    try {\n      return ecrecover(msgHash, v + BigInt(27),\n      // Recover the 27 which was stripped from ecsign\n      bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s));\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  }\n  _processSignature(v, r, s) {\n    const opts = Object.assign(Object.assign({}, this.txOptions), {\n      common: this.common\n    });\n    return AccessListEIP2930Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: v - BigInt(27),\n      r: uint8ArrayToBigInt(r),\n      s: uint8ArrayToBigInt(s)\n    }, opts);\n  }\n  /**\r\n   * Returns an object with the JSON representation of the transaction\r\n   */\n  toJSON() {\n    const accessListJSON = getAccessListJSON(this.accessList);\n    return {\n      chainId: bigIntToHex(this.chainId),\n      nonce: bigIntToHex(this.nonce),\n      gasPrice: bigIntToHex(this.gasPrice),\n      gasLimit: bigIntToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bigIntToHex(this.value),\n      data: bytesToHex(this.data),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n      r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n      s: this.s !== undefined ? bigIntToHex(this.s) : undefined\n    };\n  }\n  /**\r\n   * Return a compact error string representation of the object\r\n   */\n  errorStr() {\n    var _a, _b;\n    let errorStr = this._getSharedErrorPostfix();\n    // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n    errorStr += ` gasPrice=${this.gasPrice} accessListCount=${(_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0}`;\n    return errorStr;\n  }\n  /**\r\n   * Internal helper function to create an annotated error message\r\n   *\r\n   * @param msg Base error message\r\n   * @hidden\r\n   */\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n}","map":{"version":3,"names":["keccak256","validateNoLeadingZeroes","RLP","bytesToHex","hexToBytes","uint8ArrayConcat","uint8ArrayEquals","MAX_INTEGER","getAccessListData","verifyAccessList","getAccessListJSON","getDataFeeEIP2930","bigIntToHex","toUint8Array","ecrecover","uint8ArrayToBigInt","bigIntToUnpaddedUint8Array","BaseTransaction","TRANSACTION_TYPE","TRANSACTION_TYPE_UINT8ARRAY","toString","padStart","AccessListEIP2930Transaction","constructor","txData","opts","arguments","length","undefined","Object","assign","type","DEFAULT_HARDFORK","chainId","accessList","gasPrice","common","_getCommon","isActivatedEIP","Error","activeCapabilities","concat","accessListData","AccessListJSON","_validateCannotExceedMaxInteger","_validateNotArray","gasLimit","msg","_errorMsg","_validateYParity","_validateHighS","freeze","_a","fromTxData","fromSerializedTx","serialized","subarray","values","decode","Uint8Array","from","Array","isArray","fromValuesArray","nonce","to","value","data","v","r","s","emptyAccessList","getDataFee","cache","dataFee","hardfork","cost","BigInt","isFrozen","getUpfrontCost","raw","buf","serialize","base","encode","getMessageToSign","hashMessage","slice","message","hash","isSigned","getMessageToVerifySignature","getSenderPublicKey","msgHash","e","_processSignature","txOptions","toJSON","accessListJSON","errorStr","_getSharedErrorPostfix","_b"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-accounts\\src\\tx\\eip2930Transaction.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\r\nimport { validateNoLeadingZeroes } from 'web3-validator';\r\nimport { RLP } from '@ethereumjs/rlp';\r\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\r\nimport { MAX_INTEGER } from './constants.js';\r\nimport {\r\n\tgetAccessListData,\r\n\tverifyAccessList,\r\n\tgetAccessListJSON,\r\n\tgetDataFeeEIP2930,\r\n} from './utils.js';\r\nimport {\r\n\tbigIntToHex,\r\n\ttoUint8Array,\r\n\tecrecover,\r\n\tuint8ArrayToBigInt,\r\n\tbigIntToUnpaddedUint8Array,\r\n} from '../common/utils.js';\r\nimport { BaseTransaction } from './baseTransaction.js';\r\nimport type {\r\n\tAccessList,\r\n\tAccessListUint8Array,\r\n\tAccessListEIP2930TxData,\r\n\tAccessListEIP2930ValuesArray,\r\n\tJsonTx,\r\n\tTxOptions,\r\n} from './types.js';\r\nimport type { Common } from '../common/common.js';\r\n\r\nconst TRANSACTION_TYPE = 1;\r\nconst TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\r\n\r\n/**\r\n * Typed transaction with optional access lists\r\n *\r\n * - TransactionType: 1\r\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\r\n */\r\n// eslint-disable-next-line no-use-before-define\r\nexport class AccessListEIP2930Transaction extends BaseTransaction<AccessListEIP2930Transaction> {\r\n\tpublic readonly chainId: bigint;\r\n\tpublic readonly accessList: AccessListUint8Array;\r\n\tpublic readonly AccessListJSON: AccessList;\r\n\tpublic readonly gasPrice: bigint;\r\n\r\n\tpublic readonly common: Common;\r\n\r\n\t/**\r\n\t * The default HF if the tx type is active on that HF\r\n\t * or the first greater HF where the tx is active.\r\n\t *\r\n\t * @hidden\r\n\t */\r\n\tprotected DEFAULT_HARDFORK = 'berlin';\r\n\r\n\t/**\r\n\t * Instantiate a transaction from a data dictionary.\r\n\t *\r\n\t * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n\t * v, r, s }\r\n\t *\r\n\t * Notes:\r\n\t * - `chainId` will be set automatically if not provided\r\n\t * - All parameters are optional and have some basic default values\r\n\t */\r\n\tpublic static fromTxData(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\r\n\t\treturn new AccessListEIP2930Transaction(txData, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiate a transaction from the serialized tx.\r\n\t *\r\n\t * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n\t * signatureYParity (v), signatureR (r), signatureS (s)])`\r\n\t */\r\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\r\n\t\tif (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${bytesToHex(\r\n\t\t\t\t\tserialized.subarray(0, 1),\r\n\t\t\t\t)}`,\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst values = RLP.decode(Uint8Array.from(serialized.subarray(1)));\r\n\r\n\t\tif (!Array.isArray(values)) {\r\n\t\t\tthrow new Error('Invalid serialized tx input: must be array');\r\n\t\t}\r\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n\t\treturn AccessListEIP2930Transaction.fromValuesArray(values as any, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * Create a transaction from a values array.\r\n\t *\r\n\t * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n\t * signatureYParity (v), signatureR (r), signatureS (s)]`\r\n\t */\r\n\tpublic static fromValuesArray(values: AccessListEIP2930ValuesArray, opts: TxOptions = {}) {\r\n\t\tif (values.length !== 8 && values.length !== 11) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).',\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\r\n\r\n\t\tthis._validateNotArray({ chainId, v });\r\n\t\tvalidateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });\r\n\r\n\t\tconst emptyAccessList: AccessList = [];\r\n\r\n\t\treturn new AccessListEIP2930Transaction(\r\n\t\t\t{\r\n\t\t\t\tchainId: uint8ArrayToBigInt(chainId),\r\n\t\t\t\tnonce,\r\n\t\t\t\tgasPrice,\r\n\t\t\t\tgasLimit,\r\n\t\t\t\tto,\r\n\t\t\t\tvalue,\r\n\t\t\t\tdata,\r\n\t\t\t\taccessList: accessList ?? emptyAccessList,\r\n\t\t\t\tv: v !== undefined ? uint8ArrayToBigInt(v) : undefined, // EIP2930 supports v's with value 0 (empty Uint8Array)\r\n\t\t\t\tr,\r\n\t\t\t\ts,\r\n\t\t\t},\r\n\t\t\topts,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\r\n\t *\r\n\t * It is not recommended to use this constructor directly. Instead use\r\n\t * the static factory methods to assist in creating a Transaction object from\r\n\t * varying data types.\r\n\t */\r\n\tpublic constructor(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\r\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\r\n\t\tconst { chainId, accessList, gasPrice } = txData;\r\n\r\n\t\tthis.common = this._getCommon(opts.common, chainId);\r\n\t\tthis.chainId = this.common.chainId();\r\n\r\n\t\t// EIP-2718 check is done in Common\r\n\t\tif (!this.common.isActivatedEIP(2930)) {\r\n\t\t\tthrow new Error('EIP-2930 not enabled on Common');\r\n\t\t}\r\n\t\tthis.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\r\n\r\n\t\t// Populate the access list fields\r\n\t\tconst accessListData = getAccessListData(accessList ?? []);\r\n\t\tthis.accessList = accessListData.accessList;\r\n\t\tthis.AccessListJSON = accessListData.AccessListJSON;\r\n\t\t// Verify the access list format.\r\n\t\tverifyAccessList(this.accessList);\r\n\r\n\t\tthis.gasPrice = uint8ArrayToBigInt(toUint8Array(gasPrice === '' ? '0x' : gasPrice));\r\n\r\n\t\tthis._validateCannotExceedMaxInteger({\r\n\t\t\tgasPrice: this.gasPrice,\r\n\t\t});\r\n\r\n\t\tBaseTransaction._validateNotArray(txData);\r\n\r\n\t\tif (this.gasPrice * this.gasLimit > MAX_INTEGER) {\r\n\t\t\tconst msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\r\n\t\t\tthrow new Error(msg);\r\n\t\t}\r\n\r\n\t\tthis._validateYParity();\r\n\t\tthis._validateHighS();\r\n\r\n\t\tconst freeze = opts?.freeze ?? true;\r\n\t\tif (freeze) {\r\n\t\t\tObject.freeze(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The amount of gas paid for the data in this tx\r\n\t */\r\n\tpublic getDataFee(): bigint {\r\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\r\n\t\t\treturn this.cache.dataFee.value;\r\n\t\t}\r\n\r\n\t\tlet cost = super.getDataFee();\r\n\t\tcost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\r\n\r\n\t\tif (Object.isFrozen(this)) {\r\n\t\t\tthis.cache.dataFee = {\r\n\t\t\t\tvalue: cost,\r\n\t\t\t\thardfork: this.common.hardfork(),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn cost;\r\n\t}\r\n\r\n\t/**\r\n\t * The up front amount that an account must have for this transaction to be valid\r\n\t */\r\n\tpublic getUpfrontCost(): bigint {\r\n\t\treturn this.gasLimit * this.gasPrice + this.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.\r\n\t *\r\n\t * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n\t * signatureYParity (v), signatureR (r), signatureS (s)]`\r\n\t *\r\n\t * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\r\n\t * with {@link Block.fromValuesArray}.\r\n\t *\r\n\t * For an unsigned tx this method uses the empty UINT8ARRAY values for the\r\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\r\n\t * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\r\n\t */\r\n\tpublic raw(): AccessListEIP2930ValuesArray {\r\n\t\treturn [\r\n\t\t\tbigIntToUnpaddedUint8Array(this.chainId),\r\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\r\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\r\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\r\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\r\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\r\n\t\t\tthis.data,\r\n\t\t\tthis.accessList,\r\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\r\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\r\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\r\n\t\t];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the serialized encoding of the EIP-2930 transaction.\r\n\t *\r\n\t * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n\t * signatureYParity (v), signatureR (r), signatureS (s)])`\r\n\t *\r\n\t * Note that in contrast to the legacy tx serialization format this is not\r\n\t * valid RLP any more due to the raw tx type preceding and concatenated to\r\n\t * the RLP encoding of the values.\r\n\t */\r\n\tpublic serialize(): Uint8Array {\r\n\t\tconst base = this.raw();\r\n\t\treturn uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the serialized unsigned tx (hashed or raw), which can be used\r\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\r\n\t *\r\n\t * Note: in contrast to the legacy tx the raw message format is already\r\n\t * serialized and doesn't need to be RLP encoded any more.\r\n\t *\r\n\t * ```javascript\r\n\t * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\r\n\t * ```\r\n\t *\r\n\t * @param hashMessage - Return hashed message if set to true (default: true)\r\n\t */\r\n\tpublic getMessageToSign(hashMessage = true): Uint8Array {\r\n\t\tconst base = this.raw().slice(0, 8);\r\n\t\tconst message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\r\n\t\tif (hashMessage) {\r\n\t\t\treturn keccak256(message);\r\n\t\t}\r\n\t\treturn message;\r\n\t}\r\n\r\n\t/**\r\n\t * Computes a sha3-256 hash of the serialized tx.\r\n\t *\r\n\t * This method can only be used for signed txs (it throws otherwise).\r\n\t * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\r\n\t */\r\n\tpublic hash(): Uint8Array {\r\n\t\tif (!this.isSigned()) {\r\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\r\n\t\t\tthrow new Error(msg);\r\n\t\t}\r\n\r\n\t\tif (Object.isFrozen(this)) {\r\n\t\t\tif (!this.cache.hash) {\r\n\t\t\t\tthis.cache.hash = keccak256(this.serialize());\r\n\t\t\t}\r\n\t\t\treturn this.cache.hash;\r\n\t\t}\r\n\r\n\t\treturn keccak256(this.serialize());\r\n\t}\r\n\r\n\t/**\r\n\t * Computes a sha3-256 hash which can be used to verify the signature\r\n\t */\r\n\tpublic getMessageToVerifySignature(): Uint8Array {\r\n\t\treturn this.getMessageToSign();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the public key of the sender\r\n\t */\r\n\tpublic getSenderPublicKey(): Uint8Array {\r\n\t\tif (!this.isSigned()) {\r\n\t\t\tconst msg = this._errorMsg('Cannot call this method if transaction is not signed');\r\n\t\t\tthrow new Error(msg);\r\n\t\t}\r\n\r\n\t\tconst msgHash = this.getMessageToVerifySignature();\r\n\t\tconst { v, r, s } = this;\r\n\r\n\t\tthis._validateHighS();\r\n\r\n\t\ttry {\r\n\t\t\treturn ecrecover(\r\n\t\t\t\tmsgHash,\r\n\t\t\t\tv! + BigInt(27), // Recover the 27 which was stripped from ecsign\r\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\r\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\r\n\t\t\t);\r\n\t\t} catch (e: any) {\r\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\r\n\t\t\tthrow new Error(msg);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _processSignature(v: bigint, r: Uint8Array, s: Uint8Array) {\r\n\t\tconst opts = { ...this.txOptions, common: this.common };\r\n\r\n\t\treturn AccessListEIP2930Transaction.fromTxData(\r\n\t\t\t{\r\n\t\t\t\tchainId: this.chainId,\r\n\t\t\t\tnonce: this.nonce,\r\n\t\t\t\tgasPrice: this.gasPrice,\r\n\t\t\t\tgasLimit: this.gasLimit,\r\n\t\t\t\tto: this.to,\r\n\t\t\t\tvalue: this.value,\r\n\t\t\t\tdata: this.data,\r\n\t\t\t\taccessList: this.accessList,\r\n\t\t\t\tv: v - BigInt(27), // This looks extremely hacky: /util actually adds 27 to the value, the recovery bit is either 0 or 1.\r\n\t\t\t\tr: uint8ArrayToBigInt(r),\r\n\t\t\t\ts: uint8ArrayToBigInt(s),\r\n\t\t\t},\r\n\t\t\topts,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an object with the JSON representation of the transaction\r\n\t */\r\n\tpublic toJSON(): JsonTx {\r\n\t\tconst accessListJSON = getAccessListJSON(this.accessList);\r\n\r\n\t\treturn {\r\n\t\t\tchainId: bigIntToHex(this.chainId),\r\n\t\t\tnonce: bigIntToHex(this.nonce),\r\n\t\t\tgasPrice: bigIntToHex(this.gasPrice),\r\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\r\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\r\n\t\t\tvalue: bigIntToHex(this.value),\r\n\t\t\tdata: bytesToHex(this.data),\r\n\t\t\taccessList: accessListJSON,\r\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\r\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\r\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Return a compact error string representation of the object\r\n\t */\r\n\tpublic errorStr() {\r\n\t\tlet errorStr = this._getSharedErrorPostfix();\r\n\t\t// Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\r\n\t\terrorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;\r\n\t\treturn errorStr;\r\n\t}\r\n\r\n\t/**\r\n\t * Internal helper function to create an annotated error message\r\n\t *\r\n\t * @param msg Base error message\r\n\t * @hidden\r\n\t */\r\n\tprotected _errorMsg(msg: string) {\r\n\t\treturn `${msg} (${this.errorStr()})`;\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}