{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lakka\\\\OneDrive - Manipal Academy of Higher Education\\\\FIDUCIA\\\\voting-gui\\\\fiducia\\\\src\\\\components\\\\voter\\\\answer_feedback.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { ABI, address } from '../config_feedback.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      no_of_q: 0,\n      questions_array: [],\n      type_of_ans: '',\n      option_array: []\n    };\n  }\n  componentDidMount() {\n    this.loadBlockchainData();\n  }\n  async loadBlockchainData() {\n    try {\n      // Check if Web3 provider is available from Metamask or similar extension\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        await window.ethereum.enable(); // Request user permission to connect\n        const accounts = await web3.eth.getAccounts();\n        this.setState({\n          account: accounts[0]\n        });\n        const scontract = new web3.eth.Contract(ABI, address);\n        this.setState({\n          scontract\n        }, async () => {\n          // First, get the number of questions\n          await this.no_of_questions();\n          // Then, fetch the questions\n          await this.questions();\n          await this.type_of_answers();\n          console.log(this.state.type_of_ans);\n        });\n      } else {\n        console.log('Please install MetaMask or use a compatible browser extension.');\n      }\n    } catch (error) {\n      console.error('Error loading blockchain data:', error);\n    }\n  }\n  async no_of_questions() {\n    const {\n      scontract\n    } = this.state;\n    const a = await scontract.methods.no_of_q().call();\n    this.setState({\n      no_of_q: a\n    });\n  }\n  async questions() {\n    const {\n      scontract,\n      no_of_q\n    } = this.state;\n    const q = [];\n    for (let i = 0; i < no_of_q; i++) {\n      const b = await scontract.methods.get_Questions(i).call();\n      q.push(b);\n    }\n    this.setState({\n      questions_array: q\n    });\n    console.log(this.state.no_of_q);\n    this.setState({\n      option_array: Array.from({\n        length: this.state.no_of_q\n      }, () => Array.from({\n        length: 4\n      }, () => ''))\n    });\n  }\n  async type_of_answers() {\n    const {\n      scontract\n    } = this.state;\n    this.setState({\n      type_of_ans: await scontract.methods.get_type(0).call()\n    });\n  }\n  async options() {\n    const {\n      scontract\n    } = this.state;\n  }\n  render() {\n    const {\n      questions_array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Answer feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: questions_array.map((name, index) => /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [index + 1, \":\", name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 45\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Web3","ABI","address","jsxDEV","_jsxDEV","Fragment","_Fragment","App","constructor","props","state","account","no_of_q","questions_array","type_of_ans","option_array","componentDidMount","loadBlockchainData","window","ethereum","web3","enable","accounts","eth","getAccounts","setState","scontract","Contract","no_of_questions","questions","type_of_answers","console","log","error","a","methods","call","q","i","b","get_Questions","push","Array","from","length","get_type","options","render","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","name","index"],"sources":["C:/Users/lakka/OneDrive - Manipal Academy of Higher Education/FIDUCIA/voting-gui/fiducia/src/components/voter/answer_feedback.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\n\r\nimport {ABI,address} from '../config_feedback.js';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      account: '',\r\n      no_of_q:0,\r\n      questions_array:[],\r\n      type_of_ans:'',\r\n     option_array:[],\r\n      \r\n      \r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadBlockchainData();\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    try {\r\n      // Check if Web3 provider is available from Metamask or similar extension\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        await window.ethereum.enable(); // Request user permission to connect\r\n        const accounts = await web3.eth.getAccounts();\r\n        this.setState({ account: accounts[0] });\r\n        const scontract = new web3.eth.Contract(ABI,address);\r\n        this.setState({ scontract }, async () => {\r\n          // First, get the number of questions\r\n          await this.no_of_questions();\r\n          // Then, fetch the questions\r\n          await this.questions();\r\n\r\n          await this.type_of_answers();\r\n\r\n          console.log(this.state.type_of_ans);\r\n        });\r\n        \r\n      } else {\r\n        console.log('Please install MetaMask or use a compatible browser extension.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading blockchain data:', error);\r\n    }\r\n  }\r\n  async no_of_questions() {\r\n    const {scontract} = this.state;\r\n    const a = await scontract.methods.no_of_q().call();\r\n    this.setState({no_of_q:a});\r\n  }\r\n  async questions() {\r\n    const {scontract,no_of_q} = this.state;\r\n    const q = [];\r\n    for(let i=0;i<no_of_q;i++)\r\n    { const b = await scontract.methods.get_Questions(i).call();\r\n      q.push(b);\r\n    }\r\n    this.setState({questions_array:q});\r\n    console.log(this.state.no_of_q);\r\n    this.setState({option_array:Array.from({ length: this.state.no_of_q }, () =>\r\n    Array.from({ length: 4 }, () => '')\r\n  )})\r\n  }\r\n  async type_of_answers(){\r\n    const {scontract} = this.state;\r\n    this.setState({type_of_ans:await scontract.methods.get_type(0).call()});\r\n  }\r\n  async options(){\r\n    const {scontract} = this.state;\r\n\r\n\r\n  }\r\n \r\n  render() {\r\n   \r\n    const {questions_array} = this.state;\r\n    return (\r\n      <>\r\n    <h3>Answer feedback</h3>\r\n    <div className='container'>\r\n      {questions_array.map((name,index) => (<h5>{index+1}:{name}</h5>))}\r\n    </div>\r\n    </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}