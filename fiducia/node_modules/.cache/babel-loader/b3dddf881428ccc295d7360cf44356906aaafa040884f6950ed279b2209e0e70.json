{"ast":null,"code":"var _a;\n/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n// eslint-disable-next-line import/extensions\nimport * as ethereumCryptography from 'ethereum-cryptography/secp256k1.js';\nexport const secp256k1 = (_a = ethereumCryptography.secp256k1) !== null && _a !== void 0 ? _a : ethereumCryptography;\n/**\r\n * 2^64-1\r\n */\nexport const MAX_UINT64 = BigInt('0xffffffffffffffff');\n/**\r\n * The max integer that the evm can handle (2^256-1)\r\n */\nexport const MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nexport const SECP256K1_ORDER = secp256k1.CURVE.n;\nexport const SECP256K1_ORDER_DIV_2 = SECP256K1_ORDER / BigInt(2);","map":{"version":3,"names":["ethereumCryptography","secp256k1","_a","MAX_UINT64","BigInt","MAX_INTEGER","SECP256K1_ORDER","CURVE","n","SECP256K1_ORDER_DIV_2"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-accounts\\src\\tx\\constants.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n// eslint-disable-next-line import/extensions\r\nimport * as ethereumCryptography from 'ethereum-cryptography/secp256k1.js';\r\n\r\nexport const secp256k1 = ethereumCryptography.secp256k1 ?? ethereumCryptography;\r\n/**\r\n * 2^64-1\r\n */\r\nexport const MAX_UINT64 = BigInt('0xffffffffffffffff');\r\n\r\n/**\r\n * The max integer that the evm can handle (2^256-1)\r\n */\r\nexport const MAX_INTEGER = BigInt(\r\n\t'0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\r\n);\r\n\r\nexport const SECP256K1_ORDER = secp256k1.CURVE.n;\r\nexport const SECP256K1_ORDER_DIV_2 = SECP256K1_ORDER / BigInt(2);\r\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAgBA;AACA,OAAO,KAAKA,oBAAoB,MAAM,oCAAoC;AAE1E,OAAO,MAAMC,SAAS,GAAG,CAAAC,EAAA,GAAAF,oBAAoB,CAACC,SAAS,cAAAC,EAAA,cAAAA,EAAA,GAAIF,oBAAoB;AAC/E;;;AAGA,OAAO,MAAMG,UAAU,GAAGC,MAAM,CAAC,oBAAoB,CAAC;AAEtD;;;AAGA,OAAO,MAAMC,WAAW,GAAGD,MAAM,CAChC,oEAAoE,CACpE;AAED,OAAO,MAAME,eAAe,GAAGL,SAAS,CAACM,KAAK,CAACC,CAAC;AAChD,OAAO,MAAMC,qBAAqB,GAAGH,eAAe,GAAGF,MAAM,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}