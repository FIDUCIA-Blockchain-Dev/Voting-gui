{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport WebSocket from 'isomorphic-ws';\nimport { isNullish, SocketProvider } from 'web3-utils';\nimport { ConnectionNotOpenError } from 'web3-errors';\n/**\r\n * Use WebSocketProvider to connect to a Node using a WebSocket connection, i.e. over the `ws` or `wss` protocol.\r\n *\r\n * @example\r\n * ```ts\r\n * const provider = new WebSocketProvider(\r\n * \t\t`ws://localhost:8545`,\r\n * \t\t{\r\n * \t\t\theaders: {\r\n * \t\t\t\t// to provide the API key if the Node requires the key to be inside the `headers` for example:\r\n * \t\t\t\t'x-api-key': '<Api key>',\r\n * \t\t\t},\r\n * \t\t},\r\n * \t\t{\r\n * \t\t\tdelay: 500,\r\n * \t\t\tautoReconnect: true,\r\n * \t\t\tmaxAttempts: 10,\r\n * \t\t},\r\n * \t);\r\n * ```\r\n *\r\n * The second and the third parameters are both optional. And you can for example, the second parameter could be an empty object or undefined.\r\n *  * @example\r\n * ```ts\r\n * const provider = new WebSocketProvider(\r\n * \t\t`ws://localhost:8545`,\r\n * \t\t{},\r\n * \t\t{\r\n * \t\t\tdelay: 500,\r\n * \t\t\tautoReconnect: true,\r\n * \t\t\tmaxAttempts: 10,\r\n * \t\t},\r\n * \t);\r\n * ```\r\n */\nexport default class WebSocketProvider extends SocketProvider {\n  /**\r\n   * This is a class used for Web Socket connections. It extends the abstract class SocketProvider {@link SocketProvider} that extends the EIP-1193 provider {@link EIP1193Provider}.\r\n   * @param socketPath - The path to the Web Socket.\r\n   * @param socketOptions - The options for the Web Socket client.\r\n   * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\r\n   */\n  // this constructor is to specify the type for `socketOptions` for a better intellisense.\n  // eslint-disable-next-line no-useless-constructor\n  constructor(socketPath, socketOptions, reconnectOptions) {\n    super(socketPath, socketOptions, reconnectOptions);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _validateProviderPath(providerUrl) {\n    return typeof providerUrl === 'string' ? /^ws(s)?:\\/\\//i.test(providerUrl) : false;\n  }\n  getStatus() {\n    if (this._socketConnection && !isNullish(this._socketConnection)) {\n      switch (this._socketConnection.readyState) {\n        case this._socketConnection.CONNECTING:\n          {\n            return 'connecting';\n          }\n        case this._socketConnection.OPEN:\n          {\n            return 'connected';\n          }\n        default:\n          {\n            return 'disconnected';\n          }\n      }\n    }\n    return 'disconnected';\n  }\n  _openSocketConnection() {\n    this._socketConnection = new WebSocket(this._socketPath, undefined, this._socketOptions && Object.keys(this._socketOptions).length === 0 ? undefined : this._socketOptions);\n  }\n  _closeSocketConnection(code, data) {\n    var _a;\n    (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.close(code, data);\n  }\n  _sendToSocket(payload) {\n    var _a;\n    if (this.getStatus() === 'disconnected') {\n      throw new ConnectionNotOpenError();\n    }\n    (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(payload));\n  }\n  _parseResponses(event) {\n    return this.chunkResponseParser.parseResponse(event.data);\n  }\n  _addSocketListeners() {\n    var _a, _b, _c, _d;\n    (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.addEventListener('open', this._onOpenHandler);\n    (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.addEventListener('message', this._onMessageHandler);\n    (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.addEventListener('close', e => this._onCloseHandler(e));\n    (_d = this._socketConnection) === null || _d === void 0 ? void 0 : _d.addEventListener('error', this._onErrorHandler);\n  }\n  _removeSocketListeners() {\n    var _a, _b, _c;\n    (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.removeEventListener('message', this._onMessageHandler);\n    (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.removeEventListener('open', this._onOpenHandler);\n    (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.removeEventListener('close', this._onCloseHandler);\n    // note: we intentionally keep the error event listener to be able to emit it in case an error happens when closing the connection\n  }\n\n  _onCloseEvent(event) {\n    var _a;\n    if (this._reconnectOptions.autoReconnect && (![1000, 1001].includes(event.code) || !event.wasClean)) {\n      this._reconnect();\n      return;\n    }\n    this._clearQueues(event);\n    this._removeSocketListeners();\n    this._onDisconnect(event.code, event.reason);\n    // disconnect was successful and can safely remove error listener\n    (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.removeEventListener('error', this._onErrorHandler);\n  }\n}\nexport { WebSocketProvider };","map":{"version":3,"names":["WebSocket","isNullish","SocketProvider","ConnectionNotOpenError","WebSocketProvider","constructor","socketPath","socketOptions","reconnectOptions","_validateProviderPath","providerUrl","test","getStatus","_socketConnection","readyState","CONNECTING","OPEN","_openSocketConnection","_socketPath","undefined","_socketOptions","Object","keys","length","_closeSocketConnection","code","data","_a","close","_sendToSocket","payload","send","JSON","stringify","_parseResponses","event","chunkResponseParser","parseResponse","_addSocketListeners","addEventListener","_onOpenHandler","_b","_onMessageHandler","_c","e","_onCloseHandler","_d","_onErrorHandler","_removeSocketListeners","removeEventListener","_onCloseEvent","_reconnectOptions","autoReconnect","includes","wasClean","_reconnect","_clearQueues","_onDisconnect","reason"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-providers-ws\\src\\index.ts"],"sourcesContent":["ï»¿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { ClientRequestArgs } from 'http';\r\nimport WebSocket, { ClientOptions, CloseEvent } from 'isomorphic-ws';\r\nimport {\r\n\tEthExecutionAPI,\r\n\tWeb3APIMethod,\r\n\tWeb3APIPayload,\r\n\tWeb3APISpec,\r\n\tWeb3ProviderStatus,\r\n} from 'web3-types';\r\nimport { isNullish, ReconnectOptions, SocketProvider } from 'web3-utils';\r\nimport { ConnectionNotOpenError } from 'web3-errors';\r\n\r\nexport { ClientRequestArgs } from 'http';\r\n\r\nexport { ClientOptions } from 'isomorphic-ws';\r\n\r\n/**\r\n * Use WebSocketProvider to connect to a Node using a WebSocket connection, i.e. over the `ws` or `wss` protocol.\r\n *\r\n * @example\r\n * ```ts\r\n * const provider = new WebSocketProvider(\r\n * \t\t`ws://localhost:8545`,\r\n * \t\t{\r\n * \t\t\theaders: {\r\n * \t\t\t\t// to provide the API key if the Node requires the key to be inside the `headers` for example:\r\n * \t\t\t\t'x-api-key': '<Api key>',\r\n * \t\t\t},\r\n * \t\t},\r\n * \t\t{\r\n * \t\t\tdelay: 500,\r\n * \t\t\tautoReconnect: true,\r\n * \t\t\tmaxAttempts: 10,\r\n * \t\t},\r\n * \t);\r\n * ```\r\n *\r\n * The second and the third parameters are both optional. And you can for example, the second parameter could be an empty object or undefined.\r\n *  * @example\r\n * ```ts\r\n * const provider = new WebSocketProvider(\r\n * \t\t`ws://localhost:8545`,\r\n * \t\t{},\r\n * \t\t{\r\n * \t\t\tdelay: 500,\r\n * \t\t\tautoReconnect: true,\r\n * \t\t\tmaxAttempts: 10,\r\n * \t\t},\r\n * \t);\r\n * ```\r\n */\r\nexport default class WebSocketProvider<\r\n\tAPI extends Web3APISpec = EthExecutionAPI,\r\n> extends SocketProvider<WebSocket.MessageEvent, WebSocket.CloseEvent, WebSocket.ErrorEvent, API> {\r\n\tprotected readonly _socketOptions?: ClientOptions | ClientRequestArgs;\r\n\r\n\tprotected _socketConnection?: WebSocket;\r\n\r\n\t// eslint-disable-next-line class-methods-use-this\r\n\tprotected _validateProviderPath(providerUrl: string): boolean {\r\n\t\treturn typeof providerUrl === 'string' ? /^ws(s)?:\\/\\//i.test(providerUrl) : false;\r\n\t}\r\n\r\n\t/**\r\n\t * This is a class used for Web Socket connections. It extends the abstract class SocketProvider {@link SocketProvider} that extends the EIP-1193 provider {@link EIP1193Provider}.\r\n\t * @param socketPath - The path to the Web Socket.\r\n\t * @param socketOptions - The options for the Web Socket client.\r\n\t * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\r\n\t */\r\n\t// this constructor is to specify the type for `socketOptions` for a better intellisense.\r\n\t// eslint-disable-next-line no-useless-constructor\r\n\tpublic constructor(\r\n\t\tsocketPath: string,\r\n\t\tsocketOptions?: ClientOptions | ClientRequestArgs,\r\n\t\treconnectOptions?: Partial<ReconnectOptions>,\r\n\t) {\r\n\t\tsuper(socketPath, socketOptions, reconnectOptions);\r\n\t}\r\n\r\n\tpublic getStatus(): Web3ProviderStatus {\r\n\t\tif (this._socketConnection && !isNullish(this._socketConnection)) {\r\n\t\t\tswitch (this._socketConnection.readyState) {\r\n\t\t\t\tcase this._socketConnection.CONNECTING: {\r\n\t\t\t\t\treturn 'connecting';\r\n\t\t\t\t}\r\n\t\t\t\tcase this._socketConnection.OPEN: {\r\n\t\t\t\t\treturn 'connected';\r\n\t\t\t\t}\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\treturn 'disconnected';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 'disconnected';\r\n\t}\r\n\r\n\tprotected _openSocketConnection() {\r\n\t\tthis._socketConnection = new WebSocket(\r\n\t\t\tthis._socketPath,\r\n\t\t\tundefined,\r\n\t\t\tthis._socketOptions && Object.keys(this._socketOptions).length === 0\r\n\t\t\t\t? undefined\r\n\t\t\t\t: this._socketOptions,\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _closeSocketConnection(code?: number, data?: string) {\r\n\t\tthis._socketConnection?.close(code, data);\r\n\t}\r\n\r\n\tprotected _sendToSocket<Method extends Web3APIMethod<API>>(\r\n\t\tpayload: Web3APIPayload<API, Method>,\r\n\t): void {\r\n\t\tif (this.getStatus() === 'disconnected') {\r\n\t\t\tthrow new ConnectionNotOpenError();\r\n\t\t}\r\n\t\tthis._socketConnection?.send(JSON.stringify(payload));\r\n\t}\r\n\r\n\tprotected _parseResponses(event: WebSocket.MessageEvent) {\r\n\t\treturn this.chunkResponseParser.parseResponse(event.data as string);\r\n\t}\r\n\r\n\tprotected _addSocketListeners(): void {\r\n\t\tthis._socketConnection?.addEventListener('open', this._onOpenHandler);\r\n\t\tthis._socketConnection?.addEventListener('message', this._onMessageHandler);\r\n\t\tthis._socketConnection?.addEventListener('close', e => this._onCloseHandler(e));\r\n\t\tthis._socketConnection?.addEventListener('error', this._onErrorHandler);\r\n\t}\r\n\r\n\tprotected _removeSocketListeners(): void {\r\n\t\tthis._socketConnection?.removeEventListener('message', this._onMessageHandler);\r\n\t\tthis._socketConnection?.removeEventListener('open', this._onOpenHandler);\r\n\t\tthis._socketConnection?.removeEventListener('close', this._onCloseHandler);\r\n\t\t// note: we intentionally keep the error event listener to be able to emit it in case an error happens when closing the connection\r\n\t}\r\n\r\n\tprotected _onCloseEvent(event: CloseEvent): void {\r\n\t\tif (\r\n\t\t\tthis._reconnectOptions.autoReconnect &&\r\n\t\t\t(![1000, 1001].includes(event.code) || !event.wasClean)\r\n\t\t) {\r\n\t\t\tthis._reconnect();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._clearQueues(event);\r\n\t\tthis._removeSocketListeners();\r\n\t\tthis._onDisconnect(event.code, event.reason);\r\n\t\t// disconnect was successful and can safely remove error listener\r\n\t\tthis._socketConnection?.removeEventListener('error', this._onErrorHandler);\r\n\t}\r\n}\r\n\r\nexport { WebSocketProvider };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}