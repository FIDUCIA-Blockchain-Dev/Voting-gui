{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { format, toHex } from 'web3-utils';\nimport { HardforksOrdered, ETH_DATA_FORMAT } from 'web3-types';\nimport { Web3ValidatorError, isNullish, validator } from 'web3-validator';\nimport { InvalidPropertiesForTransactionTypeError } from 'web3-errors';\n// undefined is treated as null for JSON schema validator\nconst transactionType0x0Schema = {\n  type: 'object',\n  properties: {\n    accessList: {\n      type: 'null'\n    },\n    maxFeePerGas: {\n      type: 'null'\n    },\n    maxPriorityFeePerGas: {\n      type: 'null'\n    }\n  }\n};\nconst transactionType0x1Schema = {\n  type: 'object',\n  properties: {\n    maxFeePerGas: {\n      type: 'null'\n    },\n    maxPriorityFeePerGas: {\n      type: 'null'\n    }\n  }\n};\nconst transactionType0x2Schema = {\n  type: 'object',\n  properties: {\n    gasPrice: {\n      type: 'null'\n    }\n  }\n};\nconst validateTxTypeAndHandleErrors = (txSchema, tx, txType) => {\n  try {\n    validator.validateJSONSchema(txSchema, tx);\n  } catch (error) {\n    if (error instanceof Web3ValidatorError)\n      // Erroneously reported error\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      throw new InvalidPropertiesForTransactionTypeError(error.errors, txType);\n    throw error;\n  }\n};\nexport const defaultTransactionTypeParser = transaction => {\n  var _a, _b;\n  const tx = transaction;\n  if (!isNullish(tx.type)) {\n    let txSchema;\n    switch (tx.type) {\n      case '0x0':\n        txSchema = transactionType0x0Schema;\n        break;\n      case '0x1':\n        txSchema = transactionType0x1Schema;\n        break;\n      case '0x2':\n        txSchema = transactionType0x2Schema;\n        break;\n      default:\n        return format({\n          format: 'uint'\n        }, tx.type, ETH_DATA_FORMAT);\n    }\n    validateTxTypeAndHandleErrors(txSchema, tx, tx.type);\n    return format({\n      format: 'uint'\n    }, tx.type, ETH_DATA_FORMAT);\n  }\n  if (!isNullish(tx.maxFeePerGas) || !isNullish(tx.maxPriorityFeePerGas)) {\n    validateTxTypeAndHandleErrors(transactionType0x2Schema, tx, '0x2');\n    return '0x2';\n  }\n  if (!isNullish(tx.accessList)) {\n    validateTxTypeAndHandleErrors(transactionType0x1Schema, tx, '0x1');\n    return '0x1';\n  }\n  // We don't return 0x0 here, because if gasPrice is not\n  // undefined, we still don't know if the network\n  // supports EIP-2718 (https://eips.ethereum.org/EIPS/eip-2718)\n  // and whether we should return undefined for legacy txs,\n  // or type 0x0 for legacy txs post EIP-2718\n  if (!isNullish(tx.gasPrice)) {\n    validateTxTypeAndHandleErrors(transactionType0x0Schema, tx, '0x0');\n  }\n  const givenHardfork = (_a = tx.hardfork) !== null && _a !== void 0 ? _a : (_b = tx.common) === null || _b === void 0 ? void 0 : _b.hardfork;\n  // If we don't have a hardfork, then we can't be sure we're post\n  // EIP-2718 where transaction types are available\n  if (givenHardfork === undefined) return undefined;\n  const hardforkIndex = Object.keys(HardforksOrdered).indexOf(givenHardfork);\n  // Unknown hardfork\n  if (hardforkIndex === undefined) return undefined;\n  // givenHardfork is London or later, so EIP-2718 is supported\n  if (hardforkIndex >= Object.keys(HardforksOrdered).indexOf('london')) return !isNullish(tx.gasPrice) ? '0x0' : '0x2';\n  // givenHardfork is Berlin, tx.accessList is undefined, assume type is 0x0\n  if (hardforkIndex === Object.keys(HardforksOrdered).indexOf('berlin')) return '0x0';\n  // For all pre-Berlin hardforks, return undefined since EIP-2718\n  // isn't supported\n  return undefined;\n};\nexport const detectTransactionType = (transaction, web3Context) => {\n  var _a;\n  return ((_a = web3Context === null || web3Context === void 0 ? void 0 : web3Context.transactionTypeParser) !== null && _a !== void 0 ? _a : defaultTransactionTypeParser)(transaction);\n};\nexport const detectRawTransactionType = transaction => transaction[0] > 0x7f ? '0x0' : toHex(transaction[0]);","map":{"version":3,"names":["format","toHex","HardforksOrdered","ETH_DATA_FORMAT","Web3ValidatorError","isNullish","validator","InvalidPropertiesForTransactionTypeError","transactionType0x0Schema","type","properties","accessList","maxFeePerGas","maxPriorityFeePerGas","transactionType0x1Schema","transactionType0x2Schema","gasPrice","validateTxTypeAndHandleErrors","txSchema","tx","txType","validateJSONSchema","error","errors","defaultTransactionTypeParser","transaction","givenHardfork","_a","hardfork","_b","common","undefined","hardforkIndex","Object","keys","indexOf","detectTransactionType","web3Context","transactionTypeParser","detectRawTransactionType"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth\\src\\utils\\detect_transaction_type.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { format, toHex } from 'web3-utils';\r\nimport { TransactionTypeParser, Web3Context } from 'web3-core';\r\nimport { EthExecutionAPI, HardforksOrdered, Transaction, ETH_DATA_FORMAT } from 'web3-types';\r\nimport { Web3ValidatorError, isNullish, validator } from 'web3-validator';\r\nimport { InvalidPropertiesForTransactionTypeError } from 'web3-errors';\r\n\r\nimport { InternalTransaction } from '../types.js';\r\n\r\n// undefined is treated as null for JSON schema validator\r\nconst transactionType0x0Schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\taccessList: {\r\n\t\t\ttype: 'null',\r\n\t\t},\r\n\t\tmaxFeePerGas: {\r\n\t\t\ttype: 'null',\r\n\t\t},\r\n\t\tmaxPriorityFeePerGas: {\r\n\t\t\ttype: 'null',\r\n\t\t},\r\n\t},\r\n};\r\nconst transactionType0x1Schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tmaxFeePerGas: {\r\n\t\t\ttype: 'null',\r\n\t\t},\r\n\t\tmaxPriorityFeePerGas: {\r\n\t\t\ttype: 'null',\r\n\t\t},\r\n\t},\r\n};\r\nconst transactionType0x2Schema = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tgasPrice: {\r\n\t\t\ttype: 'null',\r\n\t\t},\r\n\t},\r\n};\r\n\r\nconst validateTxTypeAndHandleErrors = (\r\n\ttxSchema: object,\r\n\ttx: Transaction,\r\n\ttxType: '0x0' | '0x1' | '0x2',\r\n) => {\r\n\ttry {\r\n\t\tvalidator.validateJSONSchema(txSchema, tx);\r\n\t} catch (error) {\r\n\t\tif (error instanceof Web3ValidatorError)\r\n\t\t\t// Erroneously reported error\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n\t\t\tthrow new InvalidPropertiesForTransactionTypeError(error.errors, txType);\r\n\r\n\t\tthrow error;\r\n\t}\r\n};\r\n\r\nexport const defaultTransactionTypeParser: TransactionTypeParser = transaction => {\r\n\tconst tx = transaction as unknown as Transaction;\r\n\r\n\tif (!isNullish(tx.type)) {\r\n\t\tlet txSchema;\r\n\t\tswitch (tx.type) {\r\n\t\t\tcase '0x0':\r\n\t\t\t\ttxSchema = transactionType0x0Schema;\r\n\t\t\t\tbreak;\r\n\t\t\tcase '0x1':\r\n\t\t\t\ttxSchema = transactionType0x1Schema;\r\n\t\t\t\tbreak;\r\n\t\t\tcase '0x2':\r\n\t\t\t\ttxSchema = transactionType0x2Schema;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn format({ format: 'uint' }, tx.type, ETH_DATA_FORMAT);\r\n\t\t}\r\n\r\n\t\tvalidateTxTypeAndHandleErrors(txSchema, tx, tx.type);\r\n\r\n\t\treturn format({ format: 'uint' }, tx.type, ETH_DATA_FORMAT);\r\n\t}\r\n\r\n\tif (!isNullish(tx.maxFeePerGas) || !isNullish(tx.maxPriorityFeePerGas)) {\r\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x2Schema, tx, '0x2');\r\n\t\treturn '0x2';\r\n\t}\r\n\r\n\tif (!isNullish(tx.accessList)) {\r\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x1Schema, tx, '0x1');\r\n\t\treturn '0x1';\r\n\t}\r\n\r\n\t// We don't return 0x0 here, because if gasPrice is not\r\n\t// undefined, we still don't know if the network\r\n\t// supports EIP-2718 (https://eips.ethereum.org/EIPS/eip-2718)\r\n\t// and whether we should return undefined for legacy txs,\r\n\t// or type 0x0 for legacy txs post EIP-2718\r\n\tif (!isNullish(tx.gasPrice)) {\r\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x0Schema, tx, '0x0');\r\n\t}\r\n\r\n\tconst givenHardfork = tx.hardfork ?? tx.common?.hardfork;\r\n\t// If we don't have a hardfork, then we can't be sure we're post\r\n\t// EIP-2718 where transaction types are available\r\n\tif (givenHardfork === undefined) return undefined;\r\n\r\n\tconst hardforkIndex = Object.keys(HardforksOrdered).indexOf(givenHardfork);\r\n\r\n\t// Unknown hardfork\r\n\tif (hardforkIndex === undefined) return undefined;\r\n\r\n\t// givenHardfork is London or later, so EIP-2718 is supported\r\n\tif (hardforkIndex >= Object.keys(HardforksOrdered).indexOf('london'))\r\n\t\treturn !isNullish(tx.gasPrice) ? '0x0' : '0x2';\r\n\r\n\t// givenHardfork is Berlin, tx.accessList is undefined, assume type is 0x0\r\n\tif (hardforkIndex === Object.keys(HardforksOrdered).indexOf('berlin')) return '0x0';\r\n\r\n\t// For all pre-Berlin hardforks, return undefined since EIP-2718\r\n\t// isn't supported\r\n\treturn undefined;\r\n};\r\n\r\nexport const detectTransactionType = (\r\n\ttransaction: InternalTransaction,\r\n\tweb3Context?: Web3Context<EthExecutionAPI>,\r\n) =>\r\n\t(web3Context?.transactionTypeParser ?? defaultTransactionTypeParser)(\r\n\t\ttransaction as unknown as Record<string, unknown>,\r\n\t);\r\n\r\nexport const detectRawTransactionType = (transaction: Uint8Array) =>\r\n\ttransaction[0] > 0x7f ? '0x0' : toHex(transaction[0]);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}