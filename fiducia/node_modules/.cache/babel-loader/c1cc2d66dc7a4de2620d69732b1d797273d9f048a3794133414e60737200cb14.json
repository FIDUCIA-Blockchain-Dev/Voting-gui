{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { RLP } from '@ethereumjs/rlp';\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex } from 'web3-utils';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { bigIntToHex, bigIntToUnpaddedUint8Array, ecrecover, toUint8Array, uint8ArrayToBigInt, unpadUint8Array } from '../common/utils.js';\nimport { MAX_INTEGER } from './constants.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport { Capability } from './types.js';\nconst TRANSACTION_TYPE = 0;\nfunction meetsEIP155(_v, chainId) {\n  const v = Number(_v);\n  const chainIdDoubled = Number(chainId) * 2;\n  return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\r\n * An Ethereum non-typed (legacy) transaction\r\n */\n// eslint-disable-next-line no-use-before-define\nexport class Transaction extends BaseTransaction {\n  /**\r\n   * This constructor takes the values, validates them, assigns them and freezes the object.\r\n   *\r\n   * It is not recommended to use this constructor directly. Instead use\r\n   * the static factory methods to assist in creating a Transaction object from\r\n   * varying data types.\r\n   */\n  constructor(txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a;\n    super(Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    this.common = this._validateTxV(this.v, opts.common);\n    this.gasPrice = uint8ArrayToBigInt(toUint8Array(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n    if (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice\n    });\n    BaseTransaction._validateNotArray(txData);\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        // v and chain ID meet EIP-155 conditions\n        // eslint-disable-next-line no-lonely-if\n        if (meetsEIP155(this.v, this.common.chainId())) {\n          this.activeCapabilities.push(Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n    const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\r\n   * Instantiate a transaction from a data dictionary.\r\n   *\r\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\r\n   *\r\n   * Notes:\r\n   * - All parameters are optional and have some basic default values\r\n   */\n  static fromTxData(txData) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Transaction(txData, opts);\n  }\n  /**\r\n   * Instantiate a transaction from the serialized tx.\r\n   *\r\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\r\n   */\n  static fromSerializedTx(serialized) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const values = RLP.decode(serialized);\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n    return this.fromValuesArray(values, opts);\n  }\n  /**\r\n   * Create a transaction from a values array.\r\n   *\r\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\r\n   */\n  static fromValuesArray(values) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n    validateNoLeadingZeroes({\n      nonce,\n      gasPrice,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    return new Transaction({\n      nonce,\n      gasPrice,\n      gasLimit,\n      to,\n      value,\n      data,\n      v,\n      r,\n      s\n    }, opts);\n  }\n  /**\r\n   * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\r\n   *\r\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\r\n   *\r\n   * For legacy txs this is also the correct format to add transactions\r\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\r\n   * for typed txs).\r\n   *\r\n   * For an unsigned tx this method returns the empty Uint8Array values\r\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\r\n   * representation have a look at {@link Transaction.getMessageToSign}.\r\n   */\n  raw() {\n    return [bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.gasPrice), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data, this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]), this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]), this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])];\n  }\n  /**\r\n   * Returns the serialized encoding of the legacy transaction.\r\n   *\r\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\r\n   *\r\n   * For an unsigned tx this method uses the empty Uint8Array values for the\r\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\r\n   * representation for external signing use {@link Transaction.getMessageToSign}.\r\n   */\n  serialize() {\n    return RLP.encode(this.raw());\n  }\n  _getMessageToSign() {\n    const values = [bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.gasPrice), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data];\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      values.push(toUint8Array(this.common.chainId()));\n      values.push(unpadUint8Array(toUint8Array(0)));\n      values.push(unpadUint8Array(toUint8Array(0)));\n    }\n    return values;\n  }\n  getMessageToSign() {\n    let hashMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const message = this._getMessageToSign();\n    if (hashMessage) {\n      return keccak256(RLP.encode(message));\n    }\n    return message;\n  }\n  /**\r\n   * The amount of gas paid for the data in this tx\r\n   */\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork()\n      };\n    }\n    return super.getDataFee();\n  }\n  /**\r\n   * The up front amount that an account must have for this transaction to be valid\r\n   */\n  getUpfrontCost() {\n    return this.gasLimit * this.gasPrice + this.value;\n  }\n  /**\r\n   * Computes a sha3-256 hash of the serialized tx.\r\n   *\r\n   * This method can only be used for signed txs (it throws otherwise).\r\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\r\n   */\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(RLP.encode(this.raw()));\n      }\n      return this.cache.hash;\n    }\n    return keccak256(RLP.encode(this.raw()));\n  }\n  /**\r\n   * Computes a sha3-256 hash which can be used to verify the signature\r\n   */\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed');\n      throw new Error(msg);\n    }\n    const message = this._getMessageToSign();\n    return keccak256(RLP.encode(message));\n  }\n  /**\r\n   * Returns the public key of the sender\r\n   */\n  getSenderPublicKey() {\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n    this._validateHighS();\n    try {\n      return ecrecover(msgHash, v, bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s), this.supports(Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  }\n  /**\r\n   * Process the v, r, s values from the `sign` method of the base transaction.\r\n   */\n  _processSignature(_v, r, s) {\n    let v = _v;\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      v += this.common.chainId() * BigInt(2) + BigInt(8);\n    }\n    const opts = Object.assign(Object.assign({}, this.txOptions), {\n      common: this.common\n    });\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v,\n      r: uint8ArrayToBigInt(r),\n      s: uint8ArrayToBigInt(s)\n    }, opts);\n  }\n  /**\r\n   * Returns an object with the JSON representation of the transaction.\r\n   */\n  toJSON() {\n    return {\n      nonce: bigIntToHex(this.nonce),\n      gasPrice: bigIntToHex(this.gasPrice),\n      gasLimit: bigIntToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bigIntToHex(this.value),\n      data: bytesToHex(this.data),\n      v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n      r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n      s: this.s !== undefined ? bigIntToHex(this.s) : undefined\n    };\n  }\n  /**\r\n   * Validates tx's `v` value\r\n   */\n  _validateTxV(_v, common) {\n    let chainIdBigInt;\n    const v = _v !== undefined ? Number(_v) : undefined;\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v < 37 && v !== 27 && v !== 28) {\n        throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n      }\n    }\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (v !== undefined && v !== 0 && (!common || common.gteHardfork('spuriousDragon')) && v !== 27 && v !== 28) {\n      if (common) {\n        if (!meetsEIP155(BigInt(v), common.chainId())) {\n          throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub;\n        if ((v - 35) % 2 === 0) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n      }\n    }\n    return this._getCommon(common, chainIdBigInt);\n  }\n  /**\r\n   * Return a compact error string representation of the object\r\n   */\n  errorStr() {\n    let errorStr = this._getSharedErrorPostfix();\n    errorStr += ` gasPrice=${this.gasPrice}`;\n    return errorStr;\n  }\n  /**\r\n   * Internal helper function to create an annotated error message\r\n   *\r\n   * @param msg Base error message\r\n   * @hidden\r\n   */\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n}","map":{"version":3,"names":["RLP","keccak256","bytesToHex","validateNoLeadingZeroes","bigIntToHex","bigIntToUnpaddedUint8Array","ecrecover","toUint8Array","uint8ArrayToBigInt","unpadUint8Array","MAX_INTEGER","BaseTransaction","Capability","TRANSACTION_TYPE","meetsEIP155","_v","chainId","v","Number","chainIdDoubled","Transaction","constructor","txData","opts","arguments","length","undefined","Object","assign","type","common","_validateTxV","gasPrice","gasLimit","msg","_errorMsg","Error","_validateCannotExceedMaxInteger","_validateNotArray","gteHardfork","isSigned","activeCapabilities","push","EIP155ReplayProtection","freeze","_a","fromTxData","fromSerializedTx","serialized","values","decode","Array","isArray","fromValuesArray","nonce","to","value","data","r","s","raw","buf","Uint8Array","from","serialize","encode","_getMessageToSign","supports","getMessageToSign","hashMessage","message","getDataFee","cache","dataFee","hardfork","isFrozen","getUpfrontCost","hash","getMessageToVerifySignature","getSenderPublicKey","msgHash","_validateHighS","e","_processSignature","BigInt","txOptions","toJSON","toString","chainIdBigInt","numSub","_getCommon","errorStr","_getSharedErrorPostfix"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-accounts\\src\\tx\\legacyTransaction.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { RLP } from '@ethereumjs/rlp';\r\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\r\nimport { bytesToHex } from 'web3-utils';\r\nimport { validateNoLeadingZeroes } from 'web3-validator';\r\nimport {\r\n\tbigIntToHex,\r\n\tbigIntToUnpaddedUint8Array,\r\n\tecrecover,\r\n\ttoUint8Array,\r\n\tuint8ArrayToBigInt,\r\n\tunpadUint8Array,\r\n} from '../common/utils.js';\r\nimport { MAX_INTEGER } from './constants.js';\r\n\r\nimport { BaseTransaction } from './baseTransaction.js';\r\n\r\nimport type { Common } from '../common/common.js';\r\nimport type { JsonTx, TxData, TxOptions, TxValuesArray } from './types.js';\r\nimport { Capability } from './types.js';\r\n\r\nconst TRANSACTION_TYPE = 0;\r\n\r\nfunction meetsEIP155(_v: bigint, chainId: bigint) {\r\n\tconst v = Number(_v);\r\n\tconst chainIdDoubled = Number(chainId) * 2;\r\n\treturn v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\r\n}\r\n\r\n/**\r\n * An Ethereum non-typed (legacy) transaction\r\n */\r\n// eslint-disable-next-line no-use-before-define\r\nexport class Transaction extends BaseTransaction<Transaction> {\r\n\tpublic readonly gasPrice: bigint;\r\n\r\n\tpublic readonly common: Common;\r\n\r\n\t/**\r\n\t * Instantiate a transaction from a data dictionary.\r\n\t *\r\n\t * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\r\n\t *\r\n\t * Notes:\r\n\t * - All parameters are optional and have some basic default values\r\n\t */\r\n\tpublic static fromTxData(txData: TxData, opts: TxOptions = {}) {\r\n\t\treturn new Transaction(txData, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiate a transaction from the serialized tx.\r\n\t *\r\n\t * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\r\n\t */\r\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\r\n\t\tconst values = RLP.decode(serialized);\r\n\r\n\t\tif (!Array.isArray(values)) {\r\n\t\t\tthrow new Error('Invalid serialized tx input. Must be array');\r\n\t\t}\r\n\r\n\t\treturn this.fromValuesArray(values as Uint8Array[], opts);\r\n\t}\r\n\r\n\t/**\r\n\t * Create a transaction from a values array.\r\n\t *\r\n\t * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\r\n\t */\r\n\tpublic static fromValuesArray(values: TxValuesArray, opts: TxOptions = {}) {\r\n\t\t// If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\r\n\t\t// This happens if you get the RLP data from `raw()`\r\n\t\tif (values.length !== 6 && values.length !== 9) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).',\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\r\n\r\n\t\tvalidateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });\r\n\r\n\t\treturn new Transaction(\r\n\t\t\t{\r\n\t\t\t\tnonce,\r\n\t\t\t\tgasPrice,\r\n\t\t\t\tgasLimit,\r\n\t\t\t\tto,\r\n\t\t\t\tvalue,\r\n\t\t\t\tdata,\r\n\t\t\t\tv,\r\n\t\t\t\tr,\r\n\t\t\t\ts,\r\n\t\t\t},\r\n\t\t\topts,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\r\n\t *\r\n\t * It is not recommended to use this constructor directly. Instead use\r\n\t * the static factory methods to assist in creating a Transaction object from\r\n\t * varying data types.\r\n\t */\r\n\tpublic constructor(txData: TxData, opts: TxOptions = {}) {\r\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\r\n\r\n\t\tthis.common = this._validateTxV(this.v, opts.common);\r\n\r\n\t\tthis.gasPrice = uint8ArrayToBigInt(\r\n\t\t\ttoUint8Array(txData.gasPrice === '' ? '0x' : txData.gasPrice),\r\n\t\t);\r\n\r\n\t\tif (this.gasPrice * this.gasLimit > MAX_INTEGER) {\r\n\t\t\tconst msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\r\n\t\t\tthrow new Error(msg);\r\n\t\t}\r\n\t\tthis._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });\r\n\t\tBaseTransaction._validateNotArray(txData);\r\n\r\n\t\tif (this.common.gteHardfork('spuriousDragon')) {\r\n\t\t\tif (!this.isSigned()) {\r\n\t\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\r\n\t\t\t} else {\r\n\t\t\t\t// EIP155 spec:\r\n\t\t\t\t// If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\r\n\t\t\t\t// then when computing the hash of a transaction for purposes of signing or recovering\r\n\t\t\t\t// instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\r\n\t\t\t\t// hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\r\n\t\t\t\t// v and chain ID meet EIP-155 conditions\r\n\t\t\t\t// eslint-disable-next-line no-lonely-if\r\n\t\t\t\tif (meetsEIP155(this.v!, this.common.chainId())) {\r\n\t\t\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst freeze = opts?.freeze ?? true;\r\n\t\tif (freeze) {\r\n\t\t\tObject.freeze(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\r\n\t *\r\n\t * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\r\n\t *\r\n\t * For legacy txs this is also the correct format to add transactions\r\n\t * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\r\n\t * for typed txs).\r\n\t *\r\n\t * For an unsigned tx this method returns the empty Uint8Array values\r\n\t * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\r\n\t * representation have a look at {@link Transaction.getMessageToSign}.\r\n\t */\r\n\tpublic raw(): TxValuesArray {\r\n\t\treturn [\r\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\r\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\r\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\r\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\r\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\r\n\t\t\tthis.data,\r\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\r\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\r\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\r\n\t\t];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the serialized encoding of the legacy transaction.\r\n\t *\r\n\t * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\r\n\t *\r\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\r\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\r\n\t * representation for external signing use {@link Transaction.getMessageToSign}.\r\n\t */\r\n\tpublic serialize(): Uint8Array {\r\n\t\treturn RLP.encode(this.raw());\r\n\t}\r\n\r\n\tprivate _getMessageToSign() {\r\n\t\tconst values = [\r\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\r\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\r\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\r\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\r\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\r\n\t\t\tthis.data,\r\n\t\t];\r\n\r\n\t\tif (this.supports(Capability.EIP155ReplayProtection)) {\r\n\t\t\tvalues.push(toUint8Array(this.common.chainId()));\r\n\t\t\tvalues.push(unpadUint8Array(toUint8Array(0)));\r\n\t\t\tvalues.push(unpadUint8Array(toUint8Array(0)));\r\n\t\t}\r\n\r\n\t\treturn values;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the unsigned tx (hashed or raw), which can be used\r\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\r\n\t *\r\n\t * Note: the raw message message format for the legacy tx is not RLP encoded\r\n\t * and you might need to do yourself with:\r\n\t *\r\n\t * ```javascript\r\n\t * import { bufArrToArr } from '../util'\r\n\t * import { RLP } from '../rlp'\r\n\t * const message = tx.getMessageToSign(false)\r\n\t * const serializedMessage = RLP.encode(message) // use this for the HW wallet input\r\n\t * ```\r\n\t *\r\n\t * @param hashMessage - Return hashed message if set to true (default: true)\r\n\t */\r\n\tpublic getMessageToSign(hashMessage: false): Uint8Array[];\r\n\tpublic getMessageToSign(hashMessage?: true): Uint8Array;\r\n\tpublic getMessageToSign(hashMessage = true) {\r\n\t\tconst message = this._getMessageToSign();\r\n\t\tif (hashMessage) {\r\n\t\t\treturn keccak256(RLP.encode(message));\r\n\t\t}\r\n\t\treturn message;\r\n\t}\r\n\r\n\t/**\r\n\t * The amount of gas paid for the data in this tx\r\n\t */\r\n\tpublic getDataFee(): bigint {\r\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\r\n\t\t\treturn this.cache.dataFee.value;\r\n\t\t}\r\n\r\n\t\tif (Object.isFrozen(this)) {\r\n\t\t\tthis.cache.dataFee = {\r\n\t\t\t\tvalue: super.getDataFee(),\r\n\t\t\t\thardfork: this.common.hardfork(),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn super.getDataFee();\r\n\t}\r\n\r\n\t/**\r\n\t * The up front amount that an account must have for this transaction to be valid\r\n\t */\r\n\tpublic getUpfrontCost(): bigint {\r\n\t\treturn this.gasLimit * this.gasPrice + this.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Computes a sha3-256 hash of the serialized tx.\r\n\t *\r\n\t * This method can only be used for signed txs (it throws otherwise).\r\n\t * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\r\n\t */\r\n\tpublic hash(): Uint8Array {\r\n\t\tif (!this.isSigned()) {\r\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\r\n\t\t\tthrow new Error(msg);\r\n\t\t}\r\n\r\n\t\tif (Object.isFrozen(this)) {\r\n\t\t\tif (!this.cache.hash) {\r\n\t\t\t\tthis.cache.hash = keccak256(RLP.encode(this.raw()));\r\n\t\t\t}\r\n\t\t\treturn this.cache.hash;\r\n\t\t}\r\n\r\n\t\treturn keccak256(RLP.encode(this.raw()));\r\n\t}\r\n\r\n\t/**\r\n\t * Computes a sha3-256 hash which can be used to verify the signature\r\n\t */\r\n\tpublic getMessageToVerifySignature() {\r\n\t\tif (!this.isSigned()) {\r\n\t\t\tconst msg = this._errorMsg('This transaction is not signed');\r\n\t\t\tthrow new Error(msg);\r\n\t\t}\r\n\t\tconst message = this._getMessageToSign();\r\n\t\treturn keccak256(RLP.encode(message));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the public key of the sender\r\n\t */\r\n\tpublic getSenderPublicKey(): Uint8Array {\r\n\t\tconst msgHash = this.getMessageToVerifySignature();\r\n\r\n\t\tconst { v, r, s } = this;\r\n\r\n\t\tthis._validateHighS();\r\n\r\n\t\ttry {\r\n\t\t\treturn ecrecover(\r\n\t\t\t\tmsgHash,\r\n\t\t\t\tv!,\r\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\r\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\r\n\t\t\t\tthis.supports(Capability.EIP155ReplayProtection)\r\n\t\t\t\t\t? this.common.chainId()\r\n\t\t\t\t\t: undefined,\r\n\t\t\t);\r\n\t\t} catch (e: any) {\r\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\r\n\t\t\tthrow new Error(msg);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process the v, r, s values from the `sign` method of the base transaction.\r\n\t */\r\n\tprotected _processSignature(_v: bigint, r: Uint8Array, s: Uint8Array) {\r\n\t\tlet v = _v;\r\n\t\tif (this.supports(Capability.EIP155ReplayProtection)) {\r\n\t\t\tv += this.common.chainId() * BigInt(2) + BigInt(8);\r\n\t\t}\r\n\r\n\t\tconst opts = { ...this.txOptions, common: this.common };\r\n\r\n\t\treturn Transaction.fromTxData(\r\n\t\t\t{\r\n\t\t\t\tnonce: this.nonce,\r\n\t\t\t\tgasPrice: this.gasPrice,\r\n\t\t\t\tgasLimit: this.gasLimit,\r\n\t\t\t\tto: this.to,\r\n\t\t\t\tvalue: this.value,\r\n\t\t\t\tdata: this.data,\r\n\t\t\t\tv,\r\n\t\t\t\tr: uint8ArrayToBigInt(r),\r\n\t\t\t\ts: uint8ArrayToBigInt(s),\r\n\t\t\t},\r\n\t\t\topts,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an object with the JSON representation of the transaction.\r\n\t */\r\n\tpublic toJSON(): JsonTx {\r\n\t\treturn {\r\n\t\t\tnonce: bigIntToHex(this.nonce),\r\n\t\t\tgasPrice: bigIntToHex(this.gasPrice),\r\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\r\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\r\n\t\t\tvalue: bigIntToHex(this.value),\r\n\t\t\tdata: bytesToHex(this.data),\r\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\r\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\r\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Validates tx's `v` value\r\n\t */\r\n\tprivate _validateTxV(_v?: bigint, common?: Common): Common {\r\n\t\tlet chainIdBigInt;\r\n\t\tconst v = _v !== undefined ? Number(_v) : undefined;\r\n\t\t// Check for valid v values in the scope of a signed legacy tx\r\n\t\tif (v !== undefined) {\r\n\t\t\t// v is 1. not matching the EIP-155 chainId included case and...\r\n\t\t\t// v is 2. not matching the classic v=27 or v=28 case\r\n\t\t\tif (v < 37 && v !== 27 && v !== 28) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// No unsigned tx and EIP-155 activated and chain ID included\r\n\t\tif (\r\n\t\t\tv !== undefined &&\r\n\t\t\tv !== 0 &&\r\n\t\t\t(!common || common.gteHardfork('spuriousDragon')) &&\r\n\t\t\tv !== 27 &&\r\n\t\t\tv !== 28\r\n\t\t) {\r\n\t\t\tif (common) {\r\n\t\t\t\tif (!meetsEIP155(BigInt(v), common.chainId())) {\r\n\t\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`,\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Derive the original chain ID\r\n\t\t\t\tlet numSub;\r\n\t\t\t\tif ((v - 35) % 2 === 0) {\r\n\t\t\t\t\tnumSub = 35;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnumSub = 36;\r\n\t\t\t\t}\r\n\t\t\t\t// Use derived chain ID to create a proper Common\r\n\t\t\t\tchainIdBigInt = BigInt(v - numSub) / BigInt(2);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._getCommon(common, chainIdBigInt);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a compact error string representation of the object\r\n\t */\r\n\tpublic errorStr() {\r\n\t\tlet errorStr = this._getSharedErrorPostfix();\r\n\t\terrorStr += ` gasPrice=${this.gasPrice}`;\r\n\t\treturn errorStr;\r\n\t}\r\n\r\n\t/**\r\n\t * Internal helper function to create an annotated error message\r\n\t *\r\n\t * @param msg Base error message\r\n\t * @hidden\r\n\t */\r\n\tprotected _errorMsg(msg: string) {\r\n\t\treturn `${msg} (${this.errorStr()})`;\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}