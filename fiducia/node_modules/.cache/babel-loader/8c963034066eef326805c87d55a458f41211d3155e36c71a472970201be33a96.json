{"ast":null,"code":"/**\r\n * Type output options\r\n */\nexport var TypeOutput;\n(function (TypeOutput) {\n  TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n  TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n  TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n  TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput || (TypeOutput = {}));","map":{"version":3,"names":["TypeOutput"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-accounts\\src\\common\\types.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport type { Chain, ConsensusAlgorithm, ConsensusType, Hardfork } from './enums.js';\r\n\r\nexport interface ChainName {\r\n\t[chainId: string]: string;\r\n}\r\n\r\nexport type CliqueConfig = {\r\n\tperiod: number;\r\n\tepoch: number;\r\n};\r\n\r\nexport type EthashConfig = Record<string, unknown>;\r\n\r\nexport type CasperConfig = Record<string, unknown>;\r\n\r\nexport interface GenesisBlockConfig {\r\n\ttimestamp?: string;\r\n\tgasLimit: number;\r\n\tdifficulty: number;\r\n\tnonce: string;\r\n\textraData: string;\r\n\tbaseFeePerGas?: string;\r\n}\r\n\r\nexport interface HardforkConfig {\r\n\tname: Hardfork | string;\r\n\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\tblock: number | null; // null is used for hardforks that should not be applied -- since `undefined` isn't a valid value in JSON\r\n\tttd?: bigint | string;\r\n\ttimestamp?: number | string;\r\n\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\tforkHash?: string | null;\r\n}\r\n\r\nexport interface BootstrapNodeConfig {\r\n\tip: string;\r\n\tport: number | string;\r\n\tnetwork?: string;\r\n\tchainId?: number;\r\n\tid: string;\r\n\tlocation: string;\r\n\tcomment: string;\r\n}\r\n\r\nexport interface ChainConfig {\r\n\tname: string;\r\n\tchainId: number | bigint;\r\n\tnetworkId: number | bigint;\r\n\tdefaultHardfork?: string;\r\n\tcomment?: string;\r\n\turl?: string;\r\n\tgenesis: GenesisBlockConfig;\r\n\thardforks: HardforkConfig[];\r\n\tbootstrapNodes?: BootstrapNodeConfig[];\r\n\tdnsNetworks?: string[];\r\n\tconsensus: {\r\n\t\ttype: ConsensusType | string;\r\n\t\talgorithm: ConsensusAlgorithm | string;\r\n\t\tclique?: CliqueConfig;\r\n\t\tethash?: EthashConfig;\r\n\t\tcasper?: CasperConfig;\r\n\t};\r\n}\r\nexport interface ChainsConfig {\r\n\t[key: string]: ChainConfig | ChainName;\r\n}\r\n\r\ninterface BaseOpts {\r\n\t/**\r\n\t * String identifier ('byzantium') for hardfork or {@link Hardfork} enum.\r\n\t *\r\n\t * Default: Hardfork.London\r\n\t */\r\n\thardfork?: string | Hardfork;\r\n\t/**\r\n\t * Selected EIPs which can be activated, please use an array for instantiation\r\n\t * (e.g. `eips: [ 2537, ]`)\r\n\t *\r\n\t * Currently supported:\r\n\t *\r\n\t * - [EIP-2537](https://eips.ethereum.org/EIPS/eip-2537) - BLS12-381 precompiles\r\n\t */\r\n\teips?: number[];\r\n}\r\n\r\n/**\r\n * Options for instantiating a {@link Common} instance.\r\n */\r\nexport interface CommonOpts extends BaseOpts {\r\n\t/**\r\n\t * Chain name ('mainnet'), id (1), or {@link Chain} enum,\r\n\t * either from a chain directly supported or a custom chain\r\n\t * passed in via {@link CommonOpts.customChains}.\r\n\t */\r\n\tchain: string | number | Chain | bigint | object;\r\n\t/**\r\n\t * Initialize (in addition to the supported chains) with the selected\r\n\t * custom chains. Custom genesis state should be passed to the Blockchain class if used.\r\n\t *\r\n\t * Usage (directly with the respective chain initialization via the {@link CommonOpts.chain} option):\r\n\t *\r\n\t * ```javascript\r\n\t * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\r\n\t * const common = new Common({ chain: 'myCustomChain1', customChains: [ myCustomChain1 ]})\r\n\t * ```\r\n\t */\r\n\tcustomChains?: ChainConfig[];\r\n}\r\n\r\n/**\r\n * Options to be used with the {@link Common.custom} static constructor.\r\n */\r\nexport interface CustomCommonOpts extends BaseOpts {\r\n\t/**\r\n\t * The name (`mainnet`), id (`1`), or {@link Chain} enum of\r\n\t * a standard chain used to base the custom chain params on.\r\n\t */\r\n\tbaseChain?: string | number | Chain | bigint;\r\n}\r\n\r\nexport interface GethConfigOpts extends BaseOpts {\r\n\tchain?: string;\r\n\tgenesisHash?: Uint8Array;\r\n\tmergeForkIdPostMerge?: boolean;\r\n}\r\n\r\n/*\r\n * A type that represents a `0x`-prefixed hex string.\r\n */\r\nexport type PrefixedHexString = string;\r\n\r\n/*\r\n * A type that represents an input that can be converted to a Buffer.\r\n */\r\nexport type Uint8ArrayLike = Uint8Array | number[] | number | bigint | PrefixedHexString;\r\n\r\n/*\r\n * A type that represents an input that can be converted to a BigInt.\r\n */\r\nexport type BigIntLike = bigint | PrefixedHexString | number | Uint8Array;\r\n\r\n/*\r\n * A type that represents an object that has a `toArray()` method.\r\n */\r\nexport interface TransformableToArray {\r\n\ttoArray(): Uint8Array;\r\n}\r\n\r\nexport type NestedUint8Array = Array<Uint8Array | NestedUint8Array>;\r\n/**\r\n * Type output options\r\n */\r\nexport enum TypeOutput {\r\n\tNumber,\r\n\tBigInt,\r\n\tUint8Array,\r\n\tPrefixedHexString,\r\n}\r\n\r\nexport type TypeOutputReturnType = {\r\n\t[TypeOutput.Number]: number;\r\n\t[TypeOutput.BigInt]: bigint;\r\n\t[TypeOutput.Uint8Array]: Uint8Array;\r\n\t[TypeOutput.PrefixedHexString]: PrefixedHexString;\r\n};\r\nexport type ToBytesInputTypes =\r\n\t| PrefixedHexString\r\n\t| number\r\n\t| bigint\r\n\t| Uint8Array\r\n\t| number[]\r\n\t| TransformableToArray\r\n\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\t| null\r\n\t| undefined;\r\n"],"mappings":"AAqKA;;;AAGA,WAAYA,UAKX;AALD,WAAYA,UAAU;EACrBA,UAAA,CAAAA,UAAA,0BAAM;EACNA,UAAA,CAAAA,UAAA,0BAAM;EACNA,UAAA,CAAAA,UAAA,kCAAU;EACVA,UAAA,CAAAA,UAAA,gDAAiB;AAClB,CAAC,EALWA,UAAU,KAAVA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}