{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-validator\\src\\types.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { AbiParameter } from 'web3-types';\r\nimport { ValidationError } from 'is-my-json-valid';\r\n\r\nexport type ValidInputTypes = Uint8Array | bigint | string | number | boolean;\r\nexport type EthBaseTypes = 'bool' | 'bytes' | 'string' | 'uint' | 'int' | 'address' | 'tuple';\r\nexport type EthBaseTypesWithMeta =\r\n\t| `string${string}`\r\n\t| `string${string}[${number}]`\r\n\t| `bytes${string}`\r\n\t| `bytes${string}[${number}]`\r\n\t| `address[${number}]`\r\n\t| `bool[${number}]`\r\n\t| `int${string}`\r\n\t| `int${string}[${number}]`\r\n\t| `uint${string}`\r\n\t| `uint${string}[${number}]`\r\n\t| `tuple[]`\r\n\t| `tuple[${number}]`;\r\n\r\nexport type EthExtendedTypes =\r\n\t| 'hex'\r\n\t| 'number'\r\n\t| 'blockNumber'\r\n\t| 'blockNumberOrTag'\r\n\t| 'filter'\r\n\t| 'bloom';\r\n\r\nexport type FullValidationSchema = ReadonlyArray<AbiParameter>;\r\nexport type ShortValidationSchema = ReadonlyArray<\r\n\t| string\r\n\t| EthBaseTypes\r\n\t| EthExtendedTypes\r\n\t| EthBaseTypesWithMeta\r\n\t| EthBaseTypesWithMeta\r\n\t| ShortValidationSchema\r\n>;\r\nexport type ValidationSchemaInput = FullValidationSchema | ShortValidationSchema;\r\n\r\nexport type Web3ValidationOptions = {\r\n\treadonly silent: boolean;\r\n};\r\n\r\n// is-my-json-valid types\r\nexport type Json = string | number | boolean | Array<Json> | { [id: string]: Json };\r\n\r\nexport type Schema = {\r\n\t// version\r\n\t$schema?: string;\r\n\t$vocabulary?: string;\r\n\t// pointers\r\n\tid?: string;\r\n\t$id?: string;\r\n\t$anchor?: string;\r\n\t$ref?: string;\r\n\tdefinitions?: { [id: string]: Schema };\r\n\t$defs?: { [id: string]: Schema };\r\n\t$recursiveRef?: string;\r\n\t$recursiveAnchor?: boolean;\r\n\t// generic\r\n\ttype?: string | Array<string>;\r\n\trequired?: Array<string> | boolean;\r\n\tdefault?: Json;\r\n\t// constant values\r\n\tenum?: Array<Json>;\r\n\tconst?: Json;\r\n\t// logical checks\r\n\tnot?: Schema;\r\n\tallOf?: Array<Schema>;\r\n\tanyOf?: Array<Schema>;\r\n\toneOf?: Array<Schema>;\r\n\tif?: Schema;\r\n\tthen?: Schema;\r\n\telse?: Schema;\r\n\t// numbers\r\n\tmaximum?: number;\r\n\tminimum?: number;\r\n\texclusiveMaximum?: number | boolean;\r\n\texclusiveMinimum?: number | boolean;\r\n\tmultipleOf?: number;\r\n\tdivisibleBy?: number;\r\n\t// arrays, basic\r\n\tmaxItems?: number;\r\n\tminItems?: number;\r\n\tadditionalItems?: Schema;\r\n\t// arrays, complex\r\n\tcontains?: Schema;\r\n\tminContains?: number;\r\n\tmaxContains?: number;\r\n\tuniqueItems?: boolean;\r\n\t// strings\r\n\tmaxLength?: number;\r\n\tminLength?: number;\r\n\tformat?: string;\r\n\tpattern?: string;\r\n\t// strings content\r\n\tcontentEncoding?: string;\r\n\tcontentMediaType?: string;\r\n\tcontentSchema?: Schema;\r\n\t// objects\r\n\tproperties?: { [id: string]: Schema };\r\n\tmaxProperties?: number;\r\n\tminProperties?: number;\r\n\tadditionalProperties?: Schema;\r\n\tpatternProperties?: { [pattern: string]: Schema };\r\n\tpropertyNames?: Schema;\r\n\tdependencies?: { [id: string]: Array<string> | Schema };\r\n\tdependentRequired?: { [id: string]: Array<string> };\r\n\tdependentSchemas?: { [id: string]: Schema };\r\n\t// see-through\r\n\tunevaluatedProperties?: Schema;\r\n\tunevaluatedItems?: Schema;\r\n\t// Unused meta keywords not affecting validation (annotations and comments)\r\n\t// https://json-schema.org/understanding-json-schema/reference/generic.html\r\n\t// https://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.section.9\r\n\ttitle?: string;\r\n\tdescription?: string;\r\n\tdeprecated?: boolean;\r\n\treadOnly?: boolean;\r\n\twriteOnly?: boolean;\r\n\texamples?: Array<Json>;\r\n\t$comment?: string;\r\n\t// optimization hint and error filtering only, does not affect validation result\r\n\tdiscriminator?: { propertyName: string; mapping?: { [value: string]: string } };\r\n\treadonly eth?: string;\r\n\titems?: Schema | Schema[];\r\n};\r\nexport interface Validate {\r\n\t(value: Json): boolean;\r\n\terrors?: ValidationError[];\r\n}\r\nexport type RawValidationError = ValidationError & {\r\n\tschemaPath: string[];\r\n};\r\n\r\nexport type JsonSchema = Schema;\r\n"],"mappings":"AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}