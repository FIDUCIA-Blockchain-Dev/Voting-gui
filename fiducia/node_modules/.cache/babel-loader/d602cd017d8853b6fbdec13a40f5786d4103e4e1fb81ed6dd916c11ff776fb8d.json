{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nimport { AbiError } from 'web3-errors';\nimport { sha3Raw } from 'web3-utils';\nimport { isAbiFunctionFragment, jsonInterfaceMethodToString } from '../utils.js';\nimport { encodeParameters } from './parameters_api.js';\n// todo Add link to JSON interface documentation\n/**\r\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\r\n * @param functionName - The function name to encode or the `JSON interface` object of the function.\r\n * If the passed parameter is a string, it has to be in the form of `functionName(param1Type,param2Type,...)`. eg: myFunction(uint256,uint32[],bytes10,bytes)\r\n * @returns - The ABI signature of the function.\r\n * @example\r\n * ```ts\r\n * const signature = web3.eth.abi.encodeFunctionSignature({\r\n *   name: \"myMethod\",\r\n *   type: \"function\",\r\n *   inputs: [\r\n *     {\r\n *       type: \"uint256\",\r\n *       name: \"myNumber\",\r\n *     },\r\n *     {\r\n *       type: \"string\",\r\n *       name: \"myString\",\r\n *     },\r\n *   ],\r\n * });\r\n * console.log(signature);\r\n * > 0x24ee0097\r\n *\r\n * const signature = web3.eth.abi.encodeFunctionSignature('myMethod(uint256,string)')\r\n * console.log(signature);\r\n * > 0x24ee0097\r\n *\r\n * const signature = web3.eth.abi.encodeFunctionSignature('safeTransferFrom(address,address,uint256,bytes)');\r\n * console.log(signature);\r\n * > 0xb88d4fde\r\n * ```\r\n */\nexport const encodeFunctionSignature = functionName => {\n  if (typeof functionName !== 'string' && !isAbiFunctionFragment(functionName)) {\n    throw new AbiError('Invalid parameter value in encodeFunctionSignature');\n  }\n  let name;\n  if (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {\n    name = jsonInterfaceMethodToString(functionName);\n  } else {\n    name = functionName;\n  }\n  return sha3Raw(name).slice(0, 10);\n};\n// todo Add link to JSON interface documentation\n/**\r\n * Encodes a function call using its `JSON interface` object and given parameters.\r\n * @param jsonInterface - The `JSON interface` object of the function.\r\n * @param params - The parameters to encode\r\n * @returns - The ABI encoded function call, which, means the function signature and the parameters passed.\r\n * @example\r\n * ```ts\r\n * const sig = web3.eth.abi.encodeFunctionCall(\r\n *   {\r\n *     name: \"myMethod\",\r\n *     type: \"function\",\r\n *     inputs: [\r\n *       {\r\n *         type: \"uint256\",\r\n *         name: \"myNumber\",\r\n *       },\r\n *       {\r\n *         type: \"string\",\r\n *         name: \"myString\",\r\n *       },\r\n *     ],\r\n *   },\r\n *   [\"2345675643\", \"Hello!%\"]\r\n * );\r\n * console.log(sig);\r\n * > 0x24ee0097000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\r\n *\r\n *\r\n *\r\n * const sig = web3.eth.abi.encodeFunctionCall(\r\n *   {\r\n *     inputs: [\r\n *       {\r\n *         name: \"account\",\r\n *         type: \"address\",\r\n *       },\r\n *     ],\r\n *     name: \"balanceOf\",\r\n *     outputs: [\r\n *       {\r\n *         name: \"\",\r\n *         type: \"uint256\",\r\n *       },\r\n *     ],\r\n *     stateMutability: \"view\",\r\n *     type: \"function\",\r\n *   },\r\n *   [\"0x1234567890123456789012345678901234567890\"]\r\n * );\r\n *\r\n * console.log(sig);\r\n * > 0x70a082310000000000000000000000001234567890123456789012345678901234567890\r\n * ```\r\n */\nexport const encodeFunctionCall = (jsonInterface, params) => {\n  var _a;\n  if (!isAbiFunctionFragment(jsonInterface)) {\n    throw new AbiError('Invalid parameter value in encodeFunctionCall');\n  }\n  return `${encodeFunctionSignature(jsonInterface)}${encodeParameters((_a = jsonInterface.inputs) !== null && _a !== void 0 ? _a : [], params !== null && params !== void 0 ? params : []).replace('0x', '')}`;\n};","map":{"version":3,"names":["AbiError","sha3Raw","isAbiFunctionFragment","jsonInterfaceMethodToString","encodeParameters","encodeFunctionSignature","functionName","name","slice","encodeFunctionCall","jsonInterface","params","_a","inputs","replace"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-abi\\src\\api\\functions_api.ts"],"sourcesContent":["ï»¿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { AbiError } from 'web3-errors';\r\nimport { sha3Raw } from 'web3-utils';\r\nimport { AbiFunctionFragment } from 'web3-types';\r\nimport { isAbiFunctionFragment, jsonInterfaceMethodToString } from '../utils.js';\r\nimport { encodeParameters } from './parameters_api.js';\r\n\r\n// todo Add link to JSON interface documentation\r\n/**\r\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\r\n * @param functionName - The function name to encode or the `JSON interface` object of the function.\r\n * If the passed parameter is a string, it has to be in the form of `functionName(param1Type,param2Type,...)`. eg: myFunction(uint256,uint32[],bytes10,bytes)\r\n * @returns - The ABI signature of the function.\r\n * @example\r\n * ```ts\r\n * const signature = web3.eth.abi.encodeFunctionSignature({\r\n *   name: \"myMethod\",\r\n *   type: \"function\",\r\n *   inputs: [\r\n *     {\r\n *       type: \"uint256\",\r\n *       name: \"myNumber\",\r\n *     },\r\n *     {\r\n *       type: \"string\",\r\n *       name: \"myString\",\r\n *     },\r\n *   ],\r\n * });\r\n * console.log(signature);\r\n * > 0x24ee0097\r\n *\r\n * const signature = web3.eth.abi.encodeFunctionSignature('myMethod(uint256,string)')\r\n * console.log(signature);\r\n * > 0x24ee0097\r\n *\r\n * const signature = web3.eth.abi.encodeFunctionSignature('safeTransferFrom(address,address,uint256,bytes)');\r\n * console.log(signature);\r\n * > 0xb88d4fde\r\n * ```\r\n */\r\nexport const encodeFunctionSignature = (functionName: string | AbiFunctionFragment): string => {\r\n\tif (typeof functionName !== 'string' && !isAbiFunctionFragment(functionName)) {\r\n\t\tthrow new AbiError('Invalid parameter value in encodeFunctionSignature');\r\n\t}\r\n\r\n\tlet name: string;\r\n\r\n\tif (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {\r\n\t\tname = jsonInterfaceMethodToString(functionName);\r\n\t} else {\r\n\t\tname = functionName;\r\n\t}\r\n\r\n\treturn sha3Raw(name).slice(0, 10);\r\n};\r\n\r\n// todo Add link to JSON interface documentation\r\n/**\r\n * Encodes a function call using its `JSON interface` object and given parameters.\r\n * @param jsonInterface - The `JSON interface` object of the function.\r\n * @param params - The parameters to encode\r\n * @returns - The ABI encoded function call, which, means the function signature and the parameters passed.\r\n * @example\r\n * ```ts\r\n * const sig = web3.eth.abi.encodeFunctionCall(\r\n *   {\r\n *     name: \"myMethod\",\r\n *     type: \"function\",\r\n *     inputs: [\r\n *       {\r\n *         type: \"uint256\",\r\n *         name: \"myNumber\",\r\n *       },\r\n *       {\r\n *         type: \"string\",\r\n *         name: \"myString\",\r\n *       },\r\n *     ],\r\n *   },\r\n *   [\"2345675643\", \"Hello!%\"]\r\n * );\r\n * console.log(sig);\r\n * > 0x24ee0097000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\r\n *\r\n *\r\n *\r\n * const sig = web3.eth.abi.encodeFunctionCall(\r\n *   {\r\n *     inputs: [\r\n *       {\r\n *         name: \"account\",\r\n *         type: \"address\",\r\n *       },\r\n *     ],\r\n *     name: \"balanceOf\",\r\n *     outputs: [\r\n *       {\r\n *         name: \"\",\r\n *         type: \"uint256\",\r\n *       },\r\n *     ],\r\n *     stateMutability: \"view\",\r\n *     type: \"function\",\r\n *   },\r\n *   [\"0x1234567890123456789012345678901234567890\"]\r\n * );\r\n *\r\n * console.log(sig);\r\n * > 0x70a082310000000000000000000000001234567890123456789012345678901234567890\r\n * ```\r\n */\r\nexport const encodeFunctionCall = (\r\n\tjsonInterface: AbiFunctionFragment,\r\n\tparams: unknown[],\r\n): string => {\r\n\tif (!isAbiFunctionFragment(jsonInterface)) {\r\n\t\tthrow new AbiError('Invalid parameter value in encodeFunctionCall');\r\n\t}\r\n\r\n\treturn `${encodeFunctionSignature(jsonInterface)}${encodeParameters(\r\n\t\tjsonInterface.inputs ?? [],\r\n\t\tparams ?? [],\r\n\t).replace('0x', '')}`;\r\n};\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,OAAO,QAAQ,YAAY;AAEpC,SAASC,qBAAqB,EAAEC,2BAA2B,QAAQ,aAAa;AAChF,SAASC,gBAAgB,QAAQ,qBAAqB;AAEtD;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,OAAO,MAAMC,uBAAuB,GAAIC,YAA0C,IAAY;EAC7F,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAAI,CAACJ,qBAAqB,CAACI,YAAY,CAAC,EAAE;IAC7E,MAAM,IAAIN,QAAQ,CAAC,oDAAoD,CAAC;;EAGzE,IAAIO,IAAY;EAEhB,IAAID,YAAY,KAAK,OAAOA,YAAY,KAAK,UAAU,IAAI,OAAOA,YAAY,KAAK,QAAQ,CAAC,EAAE;IAC7FC,IAAI,GAAGJ,2BAA2B,CAACG,YAAY,CAAC;GAChD,MAAM;IACNC,IAAI,GAAGD,YAAY;;EAGpB,OAAOL,OAAO,CAACM,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AAClC,CAAC;AAED;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,OAAO,MAAMC,kBAAkB,GAAGA,CACjCC,aAAkC,EAClCC,MAAiB,KACN;;EACX,IAAI,CAACT,qBAAqB,CAACQ,aAAa,CAAC,EAAE;IAC1C,MAAM,IAAIV,QAAQ,CAAC,+CAA+C,CAAC;;EAGpE,OAAO,GAAGK,uBAAuB,CAACK,aAAa,CAAC,GAAGN,gBAAgB,CAClE,CAAAQ,EAAA,GAAAF,aAAa,CAACG,MAAM,cAAAD,EAAA,cAAAA,EAAA,GAAI,EAAE,EAC1BD,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,EAAE,CACZ,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}