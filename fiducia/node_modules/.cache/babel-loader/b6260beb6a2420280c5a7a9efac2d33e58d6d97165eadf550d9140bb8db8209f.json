{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Web3BaseWallet } from 'web3-types';\nimport { isNullish } from 'web3-validator';\n/**\r\n * Wallet is an in memory `wallet` that can hold multiple accounts.\r\n * These accounts can be used when using web3.eth.sendTransaction().\r\n *\r\n * ### Parameters\r\n *  Web3AccountProvider - AccountProvider for the wallet\r\n *\r\n * ```ts\r\n * import Web3 from 'web3';\r\n * const web3 = new Web3(\"https://localhost:8454\")\r\n * web3.eth.accounts.wallet\r\n * > Wallet(0) [\r\n *   _accountProvider: {\r\n *     create: [Function: create],\r\n *     privateKeyToAccount: [Function: privateKeyToAccount],\r\n *     decrypt: [Function: decrypt]\r\n *   },\r\n *   _addressMap: Map(0) {},\r\n *   _defaultKeyName: 'web3js_wallet'\r\n * ]\r\n * ```\r\n */\nexport class Wallet extends Web3BaseWallet {\n  constructor() {\n    super(...arguments);\n    this._addressMap = new Map();\n    this._defaultKeyName = 'web3js_wallet';\n  }\n  /**\r\n   * Get the storage object of the browser\r\n   *\r\n   * @returns the storage\r\n   */\n  static getStorage() {\n    let storage;\n    try {\n      storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return storage;\n    } catch (e) {\n      return e && (\n      // everything except Firefox\n      e.code === 22 ||\n      // Firefox\n      e.code === 1014 ||\n      // test name field too, because code might not be present\n      // everything except Firefox\n      e.name === 'QuotaExceededError' ||\n      // Firefox\n      e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      !isNullish(storage) && storage.length !== 0 ? storage : undefined;\n    }\n  }\n  /**\r\n   * Generates one or more accounts in the wallet. If wallets already exist they will not be overridden.\r\n   *\r\n   * @param numberOfAccounts - Number of accounts to create. Leave empty to create an empty wallet.\r\n   * @returns The wallet\r\n   * ```ts\r\n   * web3.eth.accounts.wallet.create(2)\r\n   * > Wallet(2) [\r\n   *   {\r\n   *     address: '0xde38310a42B751AE57d30cFFF4a0A3c52A442fCE',\r\n   *     privateKey: '0x6422c9d28efdcbee93c1d32a5fc6fd6fa081b985487885296cf8c9bbb5872600',\r\n   *     signTransaction: [Function: signTransaction],\r\n   *     sign: [Function: sign],\r\n   *     encrypt: [Function: encrypt]\r\n   *   },\r\n   *   {\r\n   *     address: '0x766BF755246d924B1d017Fdb5390f38a60166691',\r\n   *     privateKey: '0x756530f13c0eb636ebdda655335f5dea9921e3362e2e588b0ad59e556f7751f0',\r\n   *     signTransaction: [Function: signTransaction],\r\n   *     sign: [Function: sign],\r\n   *     encrypt: [Function: encrypt]\r\n   *   },\r\n   *   _accountProvider: {\r\n   *     create: [Function: create],\r\n   *     privateKeyToAccount: [Function: privateKeyToAccount],\r\n   *     decrypt: [Function: decrypt]\r\n   *   },\r\n   *   _addressMap: Map(2) {\r\n   *     '0xde38310a42b751ae57d30cfff4a0a3c52a442fce' => 0,\r\n   *     '0x766bf755246d924b1d017fdb5390f38a60166691' => 1\r\n   *   },\r\n   *   _defaultKeyName: 'web3js_wallet'\r\n   * ]\r\n   *\r\n   * ```\r\n   */\n  create(numberOfAccounts) {\n    for (let i = 0; i < numberOfAccounts; i += 1) {\n      this.add(this._accountProvider.create());\n    }\n    return this;\n  }\n  /**\r\n   * Adds an account using a private key or account object to the wallet.\r\n   *\r\n   * @param account - A private key or account object\r\n   * @returns The wallet\r\n   *\r\n   * ```ts\r\n   * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');\r\n   * > Wallet(1) [\r\n   *   {\r\n   *     address: '0x85D70633b90e03e0276B98880286D0D055685ed7',\r\n   *     privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',\r\n   *     signTransaction: [Function: signTransaction],\r\n   *     sign: [Function: sign],\r\n   *     encrypt: [Function: encrypt]\r\n   *   },\r\n   *   _accountProvider: {\r\n   *     create: [Function: create],\r\n   *     privateKeyToAccount: [Function: privateKeyToAccount],\r\n   *     decrypt: [Function: decrypt]\r\n   *   },\r\n   *   _addressMap: Map(1) { '0x85d70633b90e03e0276b98880286d0d055685ed7' => 0 },\r\n   *   _defaultKeyName: 'web3js_wallet'\r\n   * ]\r\n   * ```\r\n   */\n  add(account) {\n    var _a;\n    if (typeof account === 'string') {\n      return this.add(this._accountProvider.privateKeyToAccount(account));\n    }\n    let index = this.length;\n    const existAccount = this.get(account.address);\n    if (existAccount) {\n      console.warn(`Account ${account.address.toLowerCase()} already exists.`);\n      index = (_a = this._addressMap.get(account.address.toLowerCase())) !== null && _a !== void 0 ? _a : index;\n    }\n    this._addressMap.set(account.address.toLowerCase(), index);\n    this[index] = account;\n    return this;\n  }\n  /**\r\n   * Get the account of the wallet with either the index or public address.\r\n   *\r\n   * @param addressOrIndex - A string of the address or number index within the wallet.\r\n   * @returns The account object or undefined if the account doesn't exist\r\n   */\n  get(addressOrIndex) {\n    if (typeof addressOrIndex === 'string') {\n      const index = this._addressMap.get(addressOrIndex.toLowerCase());\n      if (!isNullish(index)) {\n        return this[index];\n      }\n      return undefined;\n    }\n    return this[addressOrIndex];\n  }\n  /**\r\n   * Removes an account from the wallet.\r\n   *\r\n   * @param addressOrIndex - The account address, or index in the wallet.\r\n   * @returns true if the wallet was removed. false if it couldn't be found.\r\n   * ```ts\r\n   * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');\r\n   *\r\n   * web3.eth.accounts.wallet.remove('0x85D70633b90e03e0276B98880286D0D055685ed7');\r\n   * > true\r\n   * web3.eth.accounts.wallet\r\n   * > Wallet(0) [\r\n   * _accountProvider: {\r\n   *   create: [Function: create],\r\n   *   privateKeyToAccount: [Function: privateKeyToAccount],\r\n   *   decrypt: [Function: decrypt]\r\n   * },\r\n   * _addressMap: Map(0) {},\r\n   * _defaultKeyName: 'web3js_wallet'\r\n   * ]\r\n   * ```\r\n   */\n  remove(addressOrIndex) {\n    if (typeof addressOrIndex === 'string') {\n      const index = this._addressMap.get(addressOrIndex.toLowerCase());\n      if (isNullish(index)) {\n        return false;\n      }\n      this._addressMap.delete(addressOrIndex.toLowerCase());\n      this.splice(index, 1);\n      return true;\n    }\n    if (this[addressOrIndex]) {\n      this.splice(addressOrIndex, 1);\n      return true;\n    }\n    return false;\n  }\n  /**\r\n   * Securely empties the wallet and removes all its accounts.\r\n   * Use this with *caution as it will remove all accounts stored in local wallet.\r\n   *\r\n   * @returns The wallet object\r\n   * ```ts\r\n   *\r\n   * web3.eth.accounts.wallet.clear();\r\n   * > Wallet(0) [\r\n   * _accountProvider: {\r\n   *   create: [Function: create],\r\n   *   privateKeyToAccount: [Function: privateKeyToAccount],\r\n   *   decrypt: [Function: decrypt]\r\n   * },\r\n   * _addressMap: Map(0) {},\r\n   * _defaultKeyName: 'web3js_wallet'\r\n   * ]\r\n   * ```\r\n   */\n  clear() {\n    this._addressMap.clear();\n    // Setting length clears the Array in JS.\n    this.length = 0;\n    return this;\n  }\n  /**\r\n   * Encrypts all wallet accounts to an array of encrypted keystore v3 objects.\r\n   *\r\n   * @param password - The password which will be used for encryption\r\n   * @param options - encryption options\r\n   * @returns An array of the encrypted keystore v3.\r\n   *\r\n   * ```ts\r\n   * web3.eth.accounts.wallet.create(1)\r\n   * web3.eth.accounts.wallet.encrypt(\"abc\").then(console.log);\r\n   * > [\r\n   * '{\"version\":3,\"id\":\"fa46e213-a7c3-4844-b903-dd14d39cc7db\",\r\n   * \"address\":\"fa3e41a401609103c241431cbdee8623ae2a321a\",\"crypto\":\r\n   * {\"ciphertext\":\"8d179a911d6146ad2924e86bf493ed89b8ff3596ffec0816e761c542016ab13c\",\r\n   * \"cipherparams\":{\"iv\":\"acc888c6cf4a19b86846cef0185a7164\"},\"cipher\":\"aes-128-ctr\",\r\n   * \"kdf\":\"scrypt\",\"kdfparams\":{\"n\":8192,\"r\":8,\"p\":1,\"dklen\":32,\"salt\":\"6a743c9b367d15f4758e4f3f3378ff0fd443708d1c64854e07588ea5331823ae\"},\r\n   * \"mac\":\"410544c8307e3691fda305eb3722d82c3431f212a87daa119a21587d96698b57\"}}'\r\n   * ]\r\n   * ```\r\n   */\n  encrypt(password, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.all(this.map(account => __awaiter(this, void 0, void 0, function* () {\n        return account.encrypt(password, options);\n      })));\n    });\n  }\n  /**\r\n   * Decrypts keystore v3 objects.\r\n   *\r\n   * @param encryptedWallets - An array of encrypted keystore v3 objects to decrypt\r\n   * @param password - The password to encrypt with\r\n   * @param options - decrypt options for the wallets\r\n   * @returns The decrypted wallet object\r\n   *\r\n   * ```ts\r\n   * web3.eth.accounts.wallet.decrypt([\r\n   * { version: 3,\r\n   * id: '83191a81-aaca-451f-b63d-0c5f3b849289',\r\n   * address: '06f702337909c06c82b09b7a22f0a2f0855d1f68',\r\n   * crypto:\r\n   * { ciphertext: '7d34deae112841fba86e3e6cf08f5398dda323a8e4d29332621534e2c4069e8d',\r\n   *   cipherparams: { iv: '497f4d26997a84d570778eae874b2333' },\r\n   *   cipher: 'aes-128-ctr',\r\n   *   kdf: 'scrypt',\r\n   *   kdfparams:\r\n   *    { dklen: 32,\r\n   *      salt: '208dd732a27aa4803bb760228dff18515d5313fd085bbce60594a3919ae2d88d',\r\n   *      n: 262144,\r\n   *      r: 8,\r\n   *      p: 1 },\r\n   *   mac: '0062a853de302513c57bfe3108ab493733034bf3cb313326f42cf26ea2619cf9' } },\r\n   * { version: 3,\r\n   * id: '7d6b91fa-3611-407b-b16b-396efb28f97e',\r\n   * address: 'b5d89661b59a9af0b34f58d19138baa2de48baaf',\r\n   * crypto:\r\n   * { ciphertext: 'cb9712d1982ff89f571fa5dbef447f14b7e5f142232bd2a913aac833730eeb43',\r\n   *   cipherparams: { iv: '8cccb91cb84e435437f7282ec2ffd2db' },\r\n   *   cipher: 'aes-128-ctr',\r\n   *   kdf: 'scrypt',\r\n   *   kdfparams:\r\n   *    { dklen: 32,\r\n   *      salt: '08ba6736363c5586434cd5b895e6fe41ea7db4785bd9b901dedce77a1514e8b8',\r\n   *      n: 262144,\r\n   *      r: 8,\r\n   *      p: 1 },\r\n   *   mac: 'd2eb068b37e2df55f56fa97a2bf4f55e072bef0dd703bfd917717d9dc54510f0' } }\r\n   * ], 'test').then(console.log)\r\n   * > Wallet {\r\n   *   _accountProvider: {\r\n   *     create: [Function: create],\r\n   *     privateKeyToAccount: [Function: privateKeyToAccount],\r\n   *     decrypt: [Function: decrypt]\r\n   *   },\r\n   *   _defaultKeyName: 'web3js_wallet',\r\n   *   _accounts: {\r\n   *     '0x85d70633b90e03e0276b98880286d0d055685ed7': {\r\n   *       address: '0x85D70633b90e03e0276B98880286D0D055685ed7',\r\n   *       privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',\r\n   *       signTransaction: [Function: signTransaction],\r\n   *       sign: [Function: sign],\r\n   *       encrypt: [Function: encrypt]\r\n   *     },\r\n   *     '0x06f702337909c06c82b09b7a22f0a2f0855d1f68': {\r\n   *       address: '0x06F702337909C06C82B09B7A22F0a2f0855d1F68',\r\n   *       privateKey: '87a51da18900da7398b3bab03996833138f269f8f66dd1237b98df6b9ce14573',\r\n   *       signTransaction: [Function: signTransaction],\r\n   *       sign: [Function: sign],\r\n   *       encrypt: [Function: encrypt]\r\n   *     },\r\n   *     '0xb5d89661b59a9af0b34f58d19138baa2de48baaf': {\r\n   *       address: '0xB5d89661B59a9aF0b34f58D19138bAa2de48BAaf',\r\n   *       privateKey: '7ee61c5282979aae9dd795bb6a54e8bdc2bfe009acb64eb9a67322eec3b3da6e',\r\n   *       signTransaction: [Function: signTransaction],\r\n   *       sign: [Function: sign],\r\n   *       encrypt: [Function: encrypt]\r\n   *     }\r\n   *   }\r\n   * }\r\n   * ```\r\n   */\n  decrypt(encryptedWallets, password, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const results = yield Promise.all(encryptedWallets.map(wallet => __awaiter(this, void 0, void 0, function* () {\n        return this._accountProvider.decrypt(wallet, password, options);\n      })));\n      for (const res of results) {\n        this.add(res);\n      }\n      return this;\n    });\n  }\n  /**\r\n   * Stores the wallet encrypted and as string in local storage.\r\n   * **__NOTE:__** Browser only\r\n   *\r\n   * @param password - The password to encrypt the wallet\r\n   * @param keyName - (optional) The key used for the local storage position, defaults to `\"web3js_wallet\"`.\r\n   * @returns Will return boolean value true if saved properly\r\n   * ```ts\r\n   * web3.eth.accounts.wallet.save('test#!$');\r\n   * >true\r\n   * ```\r\n   */\n  save(password, keyName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storage = Wallet.getStorage();\n      if (!storage) {\n        throw new Error('Local storage not available.');\n      }\n      storage.setItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName, JSON.stringify(yield this.encrypt(password)));\n      return true;\n    });\n  }\n  /**\r\n   * Loads a wallet from local storage and decrypts it.\r\n   * **__NOTE:__** Browser only\r\n   *\r\n   * @param password - The password to decrypt the wallet.\r\n   * @param keyName - (optional)The key used for local storage position, defaults to `web3js_wallet\"`\r\n   * @returns Returns the wallet object\r\n   *\r\n   * ```ts\r\n   * web3.eth.accounts.wallet.save('test#!$');\r\n   * > true\r\n   * web3.eth.accounts.wallet.load('test#!$');\r\n   * { defaultKeyName: \"web3js_wallet\",\r\n   *   length: 0,\r\n   *   _accounts: Accounts {_requestManager: RequestManager, givenProvider: Proxy, providers: {…}, _provider: WebsocketProvider, …},\r\n   *   [[Prototype]]: Object\r\n   * }\r\n   * ```\r\n   */\n  load(password, keyName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storage = Wallet.getStorage();\n      if (!storage) {\n        throw new Error('Local storage not available.');\n      }\n      const keystore = storage.getItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName);\n      if (keystore) {\n        yield this.decrypt(JSON.parse(keystore) || [], password);\n      }\n      return this;\n    });\n  }\n}","map":{"version":3,"names":["Web3BaseWallet","isNullish","Wallet","constructor","_addressMap","Map","_defaultKeyName","getStorage","storage","window","localStorage","x","setItem","removeItem","e","code","name","length","undefined","create","numberOfAccounts","i","add","_accountProvider","account","privateKeyToAccount","index","existAccount","get","address","console","warn","toLowerCase","_a","set","addressOrIndex","remove","delete","splice","clear","encrypt","password","options","Promise","all","map","__awaiter","decrypt","encryptedWallets","results","wallet","res","save","keyName","Error","JSON","stringify","load","keystore","getItem","parse"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth-accounts\\src\\wallet.ts"],"sourcesContent":["﻿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { Web3BaseWallet, Web3BaseWalletAccount, KeyStore } from 'web3-types';\r\nimport { isNullish } from 'web3-validator';\r\nimport { WebStorage } from './types.js';\r\n\r\ntype BrowserError = { code: number; name: string };\r\n\r\n/**\r\n * Wallet is an in memory `wallet` that can hold multiple accounts.\r\n * These accounts can be used when using web3.eth.sendTransaction().\r\n *\r\n * ### Parameters\r\n *  Web3AccountProvider - AccountProvider for the wallet\r\n *\r\n * ```ts\r\n * import Web3 from 'web3';\r\n * const web3 = new Web3(\"https://localhost:8454\")\r\n * web3.eth.accounts.wallet\r\n * > Wallet(0) [\r\n *   _accountProvider: {\r\n *     create: [Function: create],\r\n *     privateKeyToAccount: [Function: privateKeyToAccount],\r\n *     decrypt: [Function: decrypt]\r\n *   },\r\n *   _addressMap: Map(0) {},\r\n *   _defaultKeyName: 'web3js_wallet'\r\n * ]\r\n * ```\r\n */\r\nexport class Wallet<\r\n\tT extends Web3BaseWalletAccount = Web3BaseWalletAccount,\r\n> extends Web3BaseWallet<T> {\r\n\tprivate readonly _addressMap = new Map<string, number>();\r\n\tprivate readonly _defaultKeyName = 'web3js_wallet';\r\n\r\n\t/**\r\n\t * Get the storage object of the browser\r\n\t *\r\n\t * @returns the storage\r\n\t */\r\n\tpublic static getStorage(): WebStorage | undefined {\r\n\t\tlet storage: WebStorage | undefined;\r\n\r\n\t\ttry {\r\n\t\t\tstorage = window.localStorage;\r\n\t\t\tconst x = '__storage_test__';\r\n\t\t\tstorage.setItem(x, x);\r\n\t\t\tstorage.removeItem(x);\r\n\r\n\t\t\treturn storage;\r\n\t\t} catch (e: unknown) {\r\n\t\t\treturn (e as BrowserError) &&\r\n\t\t\t\t// everything except Firefox\r\n\t\t\t\t((e as BrowserError).code === 22 ||\r\n\t\t\t\t\t// Firefox\r\n\t\t\t\t\t(e as BrowserError).code === 1014 ||\r\n\t\t\t\t\t// test name field too, because code might not be present\r\n\t\t\t\t\t// everything except Firefox\r\n\t\t\t\t\t(e as BrowserError).name === 'QuotaExceededError' ||\r\n\t\t\t\t\t// Firefox\r\n\t\t\t\t\t(e as BrowserError).name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n\t\t\t\t// acknowledge QuotaExceededError only if there's something already stored\r\n\t\t\t\t!isNullish(storage) &&\r\n\t\t\t\tstorage.length !== 0\r\n\t\t\t\t? storage\r\n\t\t\t\t: undefined;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Generates one or more accounts in the wallet. If wallets already exist they will not be overridden.\r\n\t *\r\n\t * @param numberOfAccounts - Number of accounts to create. Leave empty to create an empty wallet.\r\n\t * @returns The wallet\r\n\t * ```ts\r\n\t * web3.eth.accounts.wallet.create(2)\r\n\t * > Wallet(2) [\r\n\t *   {\r\n\t *     address: '0xde38310a42B751AE57d30cFFF4a0A3c52A442fCE',\r\n\t *     privateKey: '0x6422c9d28efdcbee93c1d32a5fc6fd6fa081b985487885296cf8c9bbb5872600',\r\n\t *     signTransaction: [Function: signTransaction],\r\n\t *     sign: [Function: sign],\r\n\t *     encrypt: [Function: encrypt]\r\n\t *   },\r\n\t *   {\r\n\t *     address: '0x766BF755246d924B1d017Fdb5390f38a60166691',\r\n\t *     privateKey: '0x756530f13c0eb636ebdda655335f5dea9921e3362e2e588b0ad59e556f7751f0',\r\n\t *     signTransaction: [Function: signTransaction],\r\n\t *     sign: [Function: sign],\r\n\t *     encrypt: [Function: encrypt]\r\n\t *   },\r\n\t *   _accountProvider: {\r\n\t *     create: [Function: create],\r\n\t *     privateKeyToAccount: [Function: privateKeyToAccount],\r\n\t *     decrypt: [Function: decrypt]\r\n\t *   },\r\n\t *   _addressMap: Map(2) {\r\n\t *     '0xde38310a42b751ae57d30cfff4a0a3c52a442fce' => 0,\r\n\t *     '0x766bf755246d924b1d017fdb5390f38a60166691' => 1\r\n\t *   },\r\n\t *   _defaultKeyName: 'web3js_wallet'\r\n\t * ]\r\n\t *\r\n\t * ```\r\n\t */\r\n\r\n\tpublic create(numberOfAccounts: number) {\r\n\t\tfor (let i = 0; i < numberOfAccounts; i += 1) {\r\n\t\t\tthis.add(this._accountProvider.create());\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an account using a private key or account object to the wallet.\r\n\t *\r\n\t * @param account - A private key or account object\r\n\t * @returns The wallet\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');\r\n\t * > Wallet(1) [\r\n\t *   {\r\n\t *     address: '0x85D70633b90e03e0276B98880286D0D055685ed7',\r\n\t *     privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',\r\n\t *     signTransaction: [Function: signTransaction],\r\n\t *     sign: [Function: sign],\r\n\t *     encrypt: [Function: encrypt]\r\n\t *   },\r\n\t *   _accountProvider: {\r\n\t *     create: [Function: create],\r\n\t *     privateKeyToAccount: [Function: privateKeyToAccount],\r\n\t *     decrypt: [Function: decrypt]\r\n\t *   },\r\n\t *   _addressMap: Map(1) { '0x85d70633b90e03e0276b98880286d0d055685ed7' => 0 },\r\n\t *   _defaultKeyName: 'web3js_wallet'\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic add(account: T | string): this {\r\n\t\tif (typeof account === 'string') {\r\n\t\t\treturn this.add(this._accountProvider.privateKeyToAccount(account));\r\n\t\t}\r\n\t\tlet index = this.length;\r\n\t\tconst existAccount = this.get(account.address);\r\n\t\tif (existAccount) {\r\n\t\t\tconsole.warn(`Account ${account.address.toLowerCase()} already exists.`);\r\n\t\t\tindex = this._addressMap.get(account.address.toLowerCase()) ?? index;\r\n\t\t}\r\n\t\tthis._addressMap.set(account.address.toLowerCase(), index);\r\n\t\tthis[index] = account;\r\n\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t * Get the account of the wallet with either the index or public address.\r\n\t *\r\n\t * @param addressOrIndex - A string of the address or number index within the wallet.\r\n\t * @returns The account object or undefined if the account doesn't exist\r\n\t */\r\n\r\n\tpublic get(addressOrIndex: string | number): T | undefined {\r\n\t\tif (typeof addressOrIndex === 'string') {\r\n\t\t\tconst index = this._addressMap.get(addressOrIndex.toLowerCase());\r\n\r\n\t\t\tif (!isNullish(index)) {\r\n\t\t\t\treturn this[index];\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\treturn this[addressOrIndex];\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an account from the wallet.\r\n\t *\r\n\t * @param addressOrIndex - The account address, or index in the wallet.\r\n\t * @returns true if the wallet was removed. false if it couldn't be found.\r\n\t * ```ts\r\n\t * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');\r\n\t *\r\n\t * web3.eth.accounts.wallet.remove('0x85D70633b90e03e0276B98880286D0D055685ed7');\r\n\t * > true\r\n\t * web3.eth.accounts.wallet\r\n\t * > Wallet(0) [\r\n\t * _accountProvider: {\r\n\t *   create: [Function: create],\r\n\t *   privateKeyToAccount: [Function: privateKeyToAccount],\r\n\t *   decrypt: [Function: decrypt]\r\n\t * },\r\n\t * _addressMap: Map(0) {},\r\n\t * _defaultKeyName: 'web3js_wallet'\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic remove(addressOrIndex: string | number): boolean {\r\n\t\tif (typeof addressOrIndex === 'string') {\r\n\t\t\tconst index = this._addressMap.get(addressOrIndex.toLowerCase());\r\n\t\t\tif (isNullish(index)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tthis._addressMap.delete(addressOrIndex.toLowerCase());\r\n\t\t\tthis.splice(index, 1);\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (this[addressOrIndex]) {\r\n\t\t\tthis.splice(addressOrIndex, 1);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Securely empties the wallet and removes all its accounts.\r\n\t * Use this with *caution as it will remove all accounts stored in local wallet.\r\n\t *\r\n\t * @returns The wallet object\r\n\t * ```ts\r\n\t *\r\n\t * web3.eth.accounts.wallet.clear();\r\n\t * > Wallet(0) [\r\n\t * _accountProvider: {\r\n\t *   create: [Function: create],\r\n\t *   privateKeyToAccount: [Function: privateKeyToAccount],\r\n\t *   decrypt: [Function: decrypt]\r\n\t * },\r\n\t * _addressMap: Map(0) {},\r\n\t * _defaultKeyName: 'web3js_wallet'\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic clear() {\r\n\t\tthis._addressMap.clear();\r\n\r\n\t\t// Setting length clears the Array in JS.\r\n\t\tthis.length = 0;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Encrypts all wallet accounts to an array of encrypted keystore v3 objects.\r\n\t *\r\n\t * @param password - The password which will be used for encryption\r\n\t * @param options - encryption options\r\n\t * @returns An array of the encrypted keystore v3.\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.accounts.wallet.create(1)\r\n\t * web3.eth.accounts.wallet.encrypt(\"abc\").then(console.log);\r\n\t * > [\r\n\t * '{\"version\":3,\"id\":\"fa46e213-a7c3-4844-b903-dd14d39cc7db\",\r\n\t * \"address\":\"fa3e41a401609103c241431cbdee8623ae2a321a\",\"crypto\":\r\n\t * {\"ciphertext\":\"8d179a911d6146ad2924e86bf493ed89b8ff3596ffec0816e761c542016ab13c\",\r\n\t * \"cipherparams\":{\"iv\":\"acc888c6cf4a19b86846cef0185a7164\"},\"cipher\":\"aes-128-ctr\",\r\n\t * \"kdf\":\"scrypt\",\"kdfparams\":{\"n\":8192,\"r\":8,\"p\":1,\"dklen\":32,\"salt\":\"6a743c9b367d15f4758e4f3f3378ff0fd443708d1c64854e07588ea5331823ae\"},\r\n\t * \"mac\":\"410544c8307e3691fda305eb3722d82c3431f212a87daa119a21587d96698b57\"}}'\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic async encrypt(\r\n\t\tpassword: string,\r\n\t\toptions?: Record<string, unknown> | undefined,\r\n\t): Promise<KeyStore[]> {\r\n\t\treturn Promise.all(this.map(async (account: T) => account.encrypt(password, options)));\r\n\t}\r\n\r\n\t/**\r\n\t * Decrypts keystore v3 objects.\r\n\t *\r\n\t * @param encryptedWallets - An array of encrypted keystore v3 objects to decrypt\r\n\t * @param password - The password to encrypt with\r\n\t * @param options - decrypt options for the wallets\r\n\t * @returns The decrypted wallet object\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.accounts.wallet.decrypt([\r\n\t * { version: 3,\r\n\t * id: '83191a81-aaca-451f-b63d-0c5f3b849289',\r\n\t * address: '06f702337909c06c82b09b7a22f0a2f0855d1f68',\r\n\t * crypto:\r\n\t * { ciphertext: '7d34deae112841fba86e3e6cf08f5398dda323a8e4d29332621534e2c4069e8d',\r\n\t *   cipherparams: { iv: '497f4d26997a84d570778eae874b2333' },\r\n\t *   cipher: 'aes-128-ctr',\r\n\t *   kdf: 'scrypt',\r\n\t *   kdfparams:\r\n\t *    { dklen: 32,\r\n\t *      salt: '208dd732a27aa4803bb760228dff18515d5313fd085bbce60594a3919ae2d88d',\r\n\t *      n: 262144,\r\n\t *      r: 8,\r\n\t *      p: 1 },\r\n\t *   mac: '0062a853de302513c57bfe3108ab493733034bf3cb313326f42cf26ea2619cf9' } },\r\n\t * { version: 3,\r\n\t * id: '7d6b91fa-3611-407b-b16b-396efb28f97e',\r\n\t * address: 'b5d89661b59a9af0b34f58d19138baa2de48baaf',\r\n\t * crypto:\r\n\t * { ciphertext: 'cb9712d1982ff89f571fa5dbef447f14b7e5f142232bd2a913aac833730eeb43',\r\n\t *   cipherparams: { iv: '8cccb91cb84e435437f7282ec2ffd2db' },\r\n\t *   cipher: 'aes-128-ctr',\r\n\t *   kdf: 'scrypt',\r\n\t *   kdfparams:\r\n\t *    { dklen: 32,\r\n\t *      salt: '08ba6736363c5586434cd5b895e6fe41ea7db4785bd9b901dedce77a1514e8b8',\r\n\t *      n: 262144,\r\n\t *      r: 8,\r\n\t *      p: 1 },\r\n\t *   mac: 'd2eb068b37e2df55f56fa97a2bf4f55e072bef0dd703bfd917717d9dc54510f0' } }\r\n\t * ], 'test').then(console.log)\r\n\t * > Wallet {\r\n\t *   _accountProvider: {\r\n\t *     create: [Function: create],\r\n\t *     privateKeyToAccount: [Function: privateKeyToAccount],\r\n\t *     decrypt: [Function: decrypt]\r\n\t *   },\r\n\t *   _defaultKeyName: 'web3js_wallet',\r\n\t *   _accounts: {\r\n\t *     '0x85d70633b90e03e0276b98880286d0d055685ed7': {\r\n\t *       address: '0x85D70633b90e03e0276B98880286D0D055685ed7',\r\n\t *       privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',\r\n\t *       signTransaction: [Function: signTransaction],\r\n\t *       sign: [Function: sign],\r\n\t *       encrypt: [Function: encrypt]\r\n\t *     },\r\n\t *     '0x06f702337909c06c82b09b7a22f0a2f0855d1f68': {\r\n\t *       address: '0x06F702337909C06C82B09B7A22F0a2f0855d1F68',\r\n\t *       privateKey: '87a51da18900da7398b3bab03996833138f269f8f66dd1237b98df6b9ce14573',\r\n\t *       signTransaction: [Function: signTransaction],\r\n\t *       sign: [Function: sign],\r\n\t *       encrypt: [Function: encrypt]\r\n\t *     },\r\n\t *     '0xb5d89661b59a9af0b34f58d19138baa2de48baaf': {\r\n\t *       address: '0xB5d89661B59a9aF0b34f58D19138bAa2de48BAaf',\r\n\t *       privateKey: '7ee61c5282979aae9dd795bb6a54e8bdc2bfe009acb64eb9a67322eec3b3da6e',\r\n\t *       signTransaction: [Function: signTransaction],\r\n\t *       sign: [Function: sign],\r\n\t *       encrypt: [Function: encrypt]\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tpublic async decrypt(\r\n\t\tencryptedWallets: KeyStore[],\r\n\t\tpassword: string,\r\n\t\toptions?: Record<string, unknown> | undefined,\r\n\t) {\r\n\t\tconst results = await Promise.all(\r\n\t\t\tencryptedWallets.map(async (wallet: KeyStore) =>\r\n\t\t\t\tthis._accountProvider.decrypt(wallet, password, options),\r\n\t\t\t),\r\n\t\t);\r\n\t\tfor (const res of results) {\r\n\t\t\tthis.add(res);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Stores the wallet encrypted and as string in local storage.\r\n\t * **__NOTE:__** Browser only\r\n\t *\r\n\t * @param password - The password to encrypt the wallet\r\n\t * @param keyName - (optional) The key used for the local storage position, defaults to `\"web3js_wallet\"`.\r\n\t * @returns Will return boolean value true if saved properly\r\n\t * ```ts\r\n\t * web3.eth.accounts.wallet.save('test#!$');\r\n\t * >true\r\n\t * ```\r\n\t */\r\n\tpublic async save(password: string, keyName?: string) {\r\n\t\tconst storage = Wallet.getStorage();\r\n\r\n\t\tif (!storage) {\r\n\t\t\tthrow new Error('Local storage not available.');\r\n\t\t}\r\n\r\n\t\tstorage.setItem(\r\n\t\t\tkeyName ?? this._defaultKeyName,\r\n\t\t\tJSON.stringify(await this.encrypt(password)),\r\n\t\t);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads a wallet from local storage and decrypts it.\r\n\t * **__NOTE:__** Browser only\r\n\t *\r\n\t * @param password - The password to decrypt the wallet.\r\n\t * @param keyName - (optional)The key used for local storage position, defaults to `web3js_wallet\"`\r\n\t * @returns Returns the wallet object\r\n\t *\r\n\t * ```ts\r\n\t * web3.eth.accounts.wallet.save('test#!$');\r\n\t * > true\r\n\t * web3.eth.accounts.wallet.load('test#!$');\r\n\t * { defaultKeyName: \"web3js_wallet\",\r\n\t *   length: 0,\r\n\t *   _accounts: Accounts {_requestManager: RequestManager, givenProvider: Proxy, providers: {…}, _provider: WebsocketProvider, …},\r\n\t *   [[Prototype]]: Object\r\n\t * }\r\n\t * ```\r\n\t */\r\n\tpublic async load(password: string, keyName?: string) {\r\n\t\tconst storage = Wallet.getStorage();\r\n\r\n\t\tif (!storage) {\r\n\t\t\tthrow new Error('Local storage not available.');\r\n\t\t}\r\n\r\n\t\tconst keystore = storage.getItem(keyName ?? this._defaultKeyName);\r\n\r\n\t\tif (keystore) {\r\n\t\t\tawait this.decrypt((JSON.parse(keystore) as KeyStore[]) || [], password);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}