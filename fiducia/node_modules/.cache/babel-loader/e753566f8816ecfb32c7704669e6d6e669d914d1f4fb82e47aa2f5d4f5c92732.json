{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nconst symbol = Symbol.for('web3/base-provider');\n// Provider interface compatible with EIP-1193\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\nexport class Web3BaseProvider {\n  static isWeb3Provider(provider) {\n    return provider instanceof Web3BaseProvider || Boolean(provider && provider[symbol]);\n  }\n  // To match an object \"instanceof\" does not work if\n  // matcher class and object is using different package versions\n  // to overcome this bottleneck used this approach.\n  // The symbol value for one string will always remain same regardless of package versions\n  // eslint-disable-next-line class-methods-use-this\n  get [symbol]() {\n    return true;\n  }\n  /**\r\n   * @deprecated Please use `.request` instead.\r\n   * @param payload - Request Payload\r\n   * @param callback - Callback\r\n   */\n  send(payload,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback) {\n    this.request(payload).then(response => {\n      // eslint-disable-next-line no-null/no-null\n      callback(null, response);\n    }).catch(err => {\n      callback(err);\n    });\n  }\n  /**\r\n   * @deprecated Please use `.request` instead.\r\n   * @param payload - Request Payload\r\n   */\n  sendAsync(payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.request(payload);\n    });\n  }\n}","map":{"version":3,"names":["symbol","Symbol","for","Web3BaseProvider","isWeb3Provider","provider","Boolean","send","payload","callback","request","then","response","catch","err","sendAsync"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-types\\src\\web3_base_provider.ts"],"sourcesContent":["ï»¿/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { Socket } from 'net';\r\n\r\nimport { Web3Error } from './error_types.js';\r\nimport { EthExecutionAPI } from './apis/eth_execution_api.js';\r\nimport {\r\n\tJsonRpcNotification,\r\n\tJsonRpcPayload,\r\n\tJsonRpcResponse,\r\n\tJsonRpcResponseWithError,\r\n\tJsonRpcResponseWithResult,\r\n\tJsonRpcResult,\r\n\tJsonRpcSubscriptionResult,\r\n} from './json_rpc_types';\r\nimport {\r\n\tWeb3APISpec,\r\n\tWeb3APIMethod,\r\n\tWeb3APIReturnType,\r\n\tWeb3APIPayload,\r\n\tProviderConnectInfo,\r\n\tProviderRpcError,\r\n\tProviderMessage,\r\n} from './web3_api_types';\r\nimport { Web3EthExecutionAPI } from './apis/web3_eth_execution_api';\r\nimport { Web3DeferredPromiseInterface } from './web3_deferred_promise_type';\r\n\r\nconst symbol = Symbol.for('web3/base-provider');\r\n\r\nexport interface SocketRequestItem<\r\n\tAPI extends Web3APISpec,\r\n\tMethod extends Web3APIMethod<API>,\r\n\tResponseType,\r\n> {\r\n\tpayload: Web3APIPayload<API, Method>;\r\n\tdeferredPromise: Web3DeferredPromiseInterface<ResponseType>;\r\n}\r\n\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#connectivity\r\nexport type Web3ProviderStatus = 'connecting' | 'connected' | 'disconnected';\r\n\r\nexport type Web3ProviderEventCallback<T = JsonRpcResult> = (\r\n\terror: Error | ProviderRpcError | undefined,\r\n\tresult?: JsonRpcSubscriptionResult | JsonRpcNotification<T>,\r\n) => void;\r\n\r\nexport type Web3ProviderMessageEventCallback<T = JsonRpcResult> = (\r\n\tresult?: JsonRpcSubscriptionResult | JsonRpcNotification<T>,\r\n) => void;\r\n\r\nexport type Web3Eip1193ProviderEventCallback<T> = (data: T) => void;\r\n\r\nexport type Web3ProviderRequestCallback<ResultType = unknown> = (\r\n\t// Used \"null\" value to match the legacy version\r\n\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\terr?: Error | Web3Error | null | JsonRpcResponseWithError<Error>,\r\n\tresponse?: JsonRpcResponseWithResult<ResultType>,\r\n) => void;\r\n\r\nexport interface LegacySendProvider {\r\n\tsend<R = JsonRpcResult, P = unknown>(\r\n\t\tpayload: JsonRpcPayload<P>,\r\n\t\t// Used \"null\" value to match the legacy version\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\t\tcallback: (err: Error | null, response?: JsonRpcResponse<R>) => void,\r\n\t): void;\r\n}\r\n\r\nexport interface LegacySendAsyncProvider {\r\n\tsendAsync<R = JsonRpcResult, P = unknown>(\r\n\t\tpayload: JsonRpcPayload<P>,\r\n\t): Promise<JsonRpcResponse<R>>;\r\n}\r\n\r\nexport interface LegacyRequestProvider {\r\n\trequest<R = JsonRpcResult, P = unknown>(\r\n\t\tpayload: JsonRpcPayload<P>,\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\t\tcallback: (err: Error | null, response: JsonRpcResponse<R>) => void,\r\n\t): void;\r\n}\r\n\r\nexport interface SimpleProvider<API extends Web3APISpec> {\r\n\trequest<Method extends Web3APIMethod<API>, ResponseType = Web3APIReturnType<API, Method>>(\r\n\t\targs: Web3APIPayload<API, Method>,\r\n\t): Promise<JsonRpcResponseWithResult<ResponseType> | unknown>;\r\n}\r\n\r\nexport interface ProviderInfo {\r\n\tchainId: string;\r\n}\r\n\r\nexport type ProviderChainId = string;\r\n\r\nexport type ProviderAccounts = string[];\r\n\r\nexport type Eip1193EventName =\r\n\t| 'connect'\r\n\t| 'disconnect'\r\n\t| 'message'\r\n\t| 'chainChanged'\r\n\t| 'accountsChanged';\r\n\r\nexport interface EIP1193Provider<API extends Web3APISpec> extends SimpleProvider<API> {\r\n\ton(event: 'connect', listener: (info: ProviderInfo) => void): void;\r\n\ton(event: 'disconnect', listener: (error: ProviderRpcError) => void): void;\r\n\ton(event: 'message', listener: (message: ProviderMessage) => void): void;\r\n\ton(event: 'chainChanged', listener: (chainId: ProviderChainId) => void): void;\r\n\ton(event: 'accountsChanged', listener: (accounts: ProviderAccounts) => void): void;\r\n\r\n\tremoveListener(event: 'connect', listener: (info: ProviderInfo) => void): void;\r\n\tremoveListener(event: 'disconnect', listener: (error: ProviderRpcError) => void): void;\r\n\tremoveListener(event: 'message', listener: (message: ProviderMessage) => void): void;\r\n\tremoveListener(event: 'chainChanged', listener: (chainId: ProviderChainId) => void): void;\r\n\tremoveListener(event: 'accountsChanged', listener: (accounts: ProviderAccounts) => void): void;\r\n}\r\n\r\n// Provider interface compatible with EIP-1193\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\r\nexport abstract class Web3BaseProvider<API extends Web3APISpec = EthExecutionAPI>\r\n\timplements LegacySendProvider, LegacySendAsyncProvider, EIP1193Provider<API>\r\n{\r\n\tpublic static isWeb3Provider(provider: unknown) {\r\n\t\treturn (\r\n\t\t\tprovider instanceof Web3BaseProvider ||\r\n\t\t\tBoolean(provider && (provider as { [symbol]: boolean })[symbol])\r\n\t\t);\r\n\t}\r\n\r\n\t// To match an object \"instanceof\" does not work if\r\n\t// matcher class and object is using different package versions\r\n\t// to overcome this bottleneck used this approach.\r\n\t// The symbol value for one string will always remain same regardless of package versions\r\n\t// eslint-disable-next-line class-methods-use-this\r\n\tpublic get [symbol]() {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic abstract getStatus(): Web3ProviderStatus;\r\n\tpublic abstract supportsSubscriptions(): boolean;\r\n\r\n\t/**\r\n\t * @deprecated Please use `.request` instead.\r\n\t * @param payload - Request Payload\r\n\t * @param callback - Callback\r\n\t */\r\n\tpublic send<ResultType = JsonRpcResult, P = unknown>(\r\n\t\tpayload: JsonRpcPayload<P>,\r\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\r\n\t\tcallback: (err: Error | null, response?: JsonRpcResponse<ResultType>) => void,\r\n\t) {\r\n\t\tthis.request<Web3APIMethod<API>, ResultType>(\r\n\t\t\tpayload as Web3APIPayload<API, Web3APIMethod<API>>,\r\n\t\t)\r\n\t\t\t.then(response => {\r\n\t\t\t\t// eslint-disable-next-line no-null/no-null\r\n\t\t\t\tcallback(null, response);\r\n\t\t\t})\r\n\t\t\t.catch((err: Error | Web3Error) => {\r\n\t\t\t\tcallback(err);\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated Please use `.request` instead.\r\n\t * @param payload - Request Payload\r\n\t */\r\n\tpublic async sendAsync<R = JsonRpcResult, P = unknown>(payload: JsonRpcPayload<P>) {\r\n\t\treturn this.request(payload as Web3APIPayload<API, Web3APIMethod<API>>) as Promise<\r\n\t\t\tJsonRpcResponse<R>\r\n\t\t>;\r\n\t}\r\n\r\n\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#request\r\n\tpublic abstract request<\r\n\t\tMethod extends Web3APIMethod<API>,\r\n\t\tResultType = Web3APIReturnType<API, Method> | unknown,\r\n\t>(args: Web3APIPayload<API, Method>): Promise<JsonRpcResponseWithResult<ResultType>>;\r\n\r\n\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#events\r\n\r\n\tpublic abstract on(\r\n\t\ttype: 'disconnect',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\r\n\t): void;\r\n\tpublic abstract on<T = JsonRpcResult>(\r\n\t\ttype: 'message' | string,\r\n\t\tlistener:\r\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\r\n\t\t\t| Web3ProviderMessageEventCallback<T>,\r\n\t): void;\r\n\t// for old providers\r\n\tpublic abstract on<T = JsonRpcResult>(\r\n\t\ttype: 'data' | string,\r\n\t\tlistener:\r\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\r\n\t\t\t| Web3ProviderMessageEventCallback<T>,\r\n\t): void;\r\n\tpublic abstract on(\r\n\t\ttype: 'connect',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\r\n\t): void;\r\n\tpublic abstract on(\r\n\t\ttype: 'chainChanged',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<string>,\r\n\t): void;\r\n\tpublic abstract on(\r\n\t\ttype: 'accountsChanged',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\r\n\t): void;\r\n\tpublic abstract removeListener(\r\n\t\ttype: 'disconnect',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\r\n\t): void;\r\n\tpublic abstract removeListener<T = JsonRpcResult>(\r\n\t\ttype: 'message' | string,\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderMessage> | Web3ProviderEventCallback<T>,\r\n\t): void;\r\n\tpublic abstract removeListener(\r\n\t\ttype: 'connect',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\r\n\t): void;\r\n\tpublic abstract removeListener(\r\n\t\ttype: 'chainChanged',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<string>,\r\n\t): void;\r\n\tpublic abstract removeListener(\r\n\t\ttype: 'accountsChanged',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\r\n\t): void;\r\n\tpublic abstract once(\r\n\t\ttype: 'disconnect',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\r\n\t): void;\r\n\tpublic abstract once<T = JsonRpcResult>(\r\n\t\ttype: 'message' | string,\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderMessage> | Web3ProviderEventCallback<T>,\r\n\t): void;\r\n\tpublic abstract once(\r\n\t\ttype: 'connect',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\r\n\t): void;\r\n\tpublic abstract once(\r\n\t\ttype: 'chainChanged',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<string>,\r\n\t): void;\r\n\tpublic abstract once(\r\n\t\ttype: 'accountsChanged',\r\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\r\n\t): void;\r\n\tpublic abstract removeAllListeners?(type: string): void;\r\n\tpublic abstract connect(): void;\r\n\tpublic abstract disconnect(code?: number, data?: string): void;\r\n\tpublic abstract reset(): void;\r\n}\r\n\r\nexport type SupportedProviders<API extends Web3APISpec = Web3EthExecutionAPI> =\r\n\t| EIP1193Provider<API>\r\n\t| Web3BaseProvider<API>\r\n\t| LegacyRequestProvider\r\n\t| LegacySendProvider\r\n\t| LegacySendAsyncProvider\r\n\t| SimpleProvider<API>;\r\n\r\nexport type Web3BaseProviderConstructor = new <API extends Web3APISpec>(\r\n\turl: string,\r\n\tnet?: Socket,\r\n) => Web3BaseProvider<API>;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,MAAMA,MAAM,GAAGC,MAAM,CAACC,GAAG,CAAC,oBAAoB,CAAC;AA0F/C;AACA;AACA,OAAM,MAAgBC,gBAAgB;EAG9B,OAAOC,cAAcA,CAACC,QAAiB;IAC7C,OACCA,QAAQ,YAAYF,gBAAgB,IACpCG,OAAO,CAACD,QAAQ,IAAKA,QAAkC,CAACL,MAAM,CAAC,CAAC;EAElE;EAEA;EACA;EACA;EACA;EACA;EACA,KAAYA,MAAM,IAAC;IAClB,OAAO,IAAI;EACZ;EAKA;;;;;EAKOO,IAAIA,CACVC,OAA0B;EAC1B;EACAC,QAA6E;IAE7E,IAAI,CAACC,OAAO,CACXF,OAAkD,CAClD,CACCG,IAAI,CAACC,QAAQ,IAAG;MAChB;MACAH,QAAQ,CAAC,IAAI,EAAEG,QAAQ,CAAC;IACzB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAsB,IAAI;MACjCL,QAAQ,CAACK,GAAG,CAAC;IACd,CAAC,CAAC;EACJ;EAEA;;;;EAIaC,SAASA,CAAiCP,OAA0B;;MAChF,OAAO,IAAI,CAACE,OAAO,CAACF,OAAkD,CAErE;IACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}