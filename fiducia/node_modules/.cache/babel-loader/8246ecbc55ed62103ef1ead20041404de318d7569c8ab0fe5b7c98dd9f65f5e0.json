{"ast":null,"code":"/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_RETURN_FORMAT, ETH_DATA_FORMAT } from 'web3-types';\nimport { privateKeyToAddress } from 'web3-eth-accounts';\nimport { getId } from 'web3-net';\nimport { isNullish, isNumber, isHexStrict, isAddress } from 'web3-validator';\nimport { InvalidTransactionWithSender, InvalidTransactionWithReceiver, LocalWalletNotAvailableError, TransactionDataAndInputError, UnableToPopulateNonceError } from 'web3-errors';\nimport { bytesToHex, format } from 'web3-utils';\nimport { NUMBER_DATA_FORMAT } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getChainId, getTransactionCount } from '../rpc_method_wrappers.js';\nimport { detectTransactionType } from './detect_transaction_type.js';\nimport { transactionSchema } from '../schemas.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\nexport const getTransactionFromOrToAttr = (attr, web3Context, transaction, privateKey) => {\n  if (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n    if (typeof transaction[attr] === 'string' && isAddress(transaction[attr])) {\n      return transaction[attr];\n    }\n    if (!isHexStrict(transaction[attr]) && isNumber(transaction[attr])) {\n      if (web3Context.wallet) {\n        const account = web3Context.wallet.get(format({\n          format: 'uint'\n        }, transaction[attr], NUMBER_DATA_FORMAT));\n        if (!isNullish(account)) {\n          return account.address;\n        }\n        throw new LocalWalletNotAvailableError();\n      }\n      throw new LocalWalletNotAvailableError();\n    } else {\n      throw attr === 'from' ? new InvalidTransactionWithSender(transaction.from) :\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      new InvalidTransactionWithReceiver(transaction.to);\n    }\n  }\n  if (attr === 'from') {\n    if (!isNullish(privateKey)) return privateKeyToAddress(privateKey);\n    if (!isNullish(web3Context.defaultAccount)) return web3Context.defaultAccount;\n  }\n  return undefined;\n};\nexport const getTransactionNonce = function (web3Context, address) {\n  let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    if (isNullish(address)) {\n      // TODO if (web3.eth.accounts.wallet) use address from local wallet\n      throw new UnableToPopulateNonceError();\n    }\n    return getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);\n  });\n};\nexport const getTransactionType = (transaction, web3Context) => {\n  const inferredType = detectTransactionType(transaction, web3Context);\n  if (!isNullish(inferredType)) return inferredType;\n  if (!isNullish(web3Context.defaultTransactionType)) return format({\n    format: 'uint'\n  }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);\n  return undefined;\n};\n// Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\nexport function defaultTransactionBuilder(options) {\n  var _a, _b;\n  return __awaiter(this, void 0, void 0, function* () {\n    // let populatedTransaction = { ...options.transaction } as unknown as InternalTransaction;\n    let populatedTransaction = format(transactionSchema, options.transaction, DEFAULT_RETURN_FORMAT);\n    if (isNullish(populatedTransaction.from)) {\n      populatedTransaction.from = getTransactionFromOrToAttr('from', options.web3Context, undefined, options.privateKey);\n    }\n    // TODO: Debug why need to typecase getTransactionNonce\n    if (isNullish(populatedTransaction.nonce)) {\n      populatedTransaction.nonce = yield getTransactionNonce(options.web3Context, populatedTransaction.from, ETH_DATA_FORMAT);\n    }\n    if (isNullish(populatedTransaction.value)) {\n      populatedTransaction.value = '0x';\n    }\n    if (!isNullish(populatedTransaction.data)) {\n      if (!isNullish(populatedTransaction.input) && populatedTransaction.data !== populatedTransaction.input) throw new TransactionDataAndInputError({\n        data: bytesToHex(populatedTransaction.data),\n        input: bytesToHex(populatedTransaction.input)\n      });\n      if (!populatedTransaction.data.startsWith('0x')) populatedTransaction.data = `0x${populatedTransaction.data}`;\n      populatedTransaction.input = populatedTransaction.data;\n    } else if (!isNullish(populatedTransaction.input)) {\n      if (!populatedTransaction.input.startsWith('0x')) populatedTransaction.input = `0x${populatedTransaction.input}`;\n      populatedTransaction.data = populatedTransaction.input;\n    } else {\n      populatedTransaction.input = '0x';\n      populatedTransaction.data = '0x';\n    }\n    if (isNullish(populatedTransaction.common)) {\n      if (options.web3Context.defaultCommon) {\n        const common = options.web3Context.defaultCommon;\n        const chainId = common.customChain.chainId;\n        const networkId = common.customChain.networkId;\n        const name = common.customChain.name;\n        populatedTransaction.common = Object.assign(Object.assign({}, common), {\n          customChain: {\n            chainId,\n            networkId,\n            name\n          }\n        });\n      }\n      if (isNullish(populatedTransaction.chain)) {\n        populatedTransaction.chain = options.web3Context.defaultChain;\n      }\n      if (isNullish(populatedTransaction.hardfork)) {\n        populatedTransaction.hardfork = options.web3Context.defaultHardfork;\n      }\n    }\n    if (isNullish(populatedTransaction.chainId) && isNullish((_a = populatedTransaction.common) === null || _a === void 0 ? void 0 : _a.customChain.chainId)) {\n      populatedTransaction.chainId = yield getChainId(options.web3Context, ETH_DATA_FORMAT);\n    }\n    if (isNullish(populatedTransaction.networkId)) {\n      populatedTransaction.networkId = (_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0 ? _b : yield getId(options.web3Context, ETH_DATA_FORMAT);\n    }\n    if (isNullish(populatedTransaction.gasLimit) && !isNullish(populatedTransaction.gas)) {\n      populatedTransaction.gasLimit = populatedTransaction.gas;\n    }\n    populatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);\n    if (isNullish(populatedTransaction.accessList) && (populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')) {\n      populatedTransaction.accessList = [];\n    }\n    if (options.fillGasPrice) populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), yield getTransactionGasPricing(populatedTransaction, options.web3Context, ETH_DATA_FORMAT));\n    return populatedTransaction;\n  });\n}\nexport const transactionBuilder = options => __awaiter(void 0, void 0, void 0, function* () {\n  var _a;\n  return ((_a = options.web3Context.transactionBuilder) !== null && _a !== void 0 ? _a : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), {\n    transaction: options.transaction\n  }));\n});","map":{"version":3,"names":["DEFAULT_RETURN_FORMAT","ETH_DATA_FORMAT","privateKeyToAddress","getId","isNullish","isNumber","isHexStrict","isAddress","InvalidTransactionWithSender","InvalidTransactionWithReceiver","LocalWalletNotAvailableError","TransactionDataAndInputError","UnableToPopulateNonceError","bytesToHex","format","NUMBER_DATA_FORMAT","getChainId","getTransactionCount","detectTransactionType","transactionSchema","getTransactionGasPricing","getTransactionFromOrToAttr","attr","web3Context","transaction","privateKey","undefined","wallet","account","get","address","from","to","defaultAccount","getTransactionNonce","returnFormat","arguments","length","__awaiter","defaultBlock","getTransactionType","inferredType","defaultTransactionType","defaultTransactionBuilder","options","populatedTransaction","nonce","value","data","input","startsWith","common","defaultCommon","chainId","customChain","networkId","name","Object","assign","chain","defaultChain","hardfork","defaultHardfork","_a","_b","defaultNetworkId","gasLimit","gas","type","accessList","fillGasPrice","transactionBuilder"],"sources":["C:\\Users\\lakka\\OneDrive - Manipal Academy of Higher Education\\FIDUCIA\\voting-gui\\fiducia\\node_modules\\web3-eth\\src\\utils\\transaction_builder.ts"],"sourcesContent":["/*\r\nThis file is part of web3.js.\r\n\r\nweb3.js is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nweb3.js is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport {\r\n\tEthExecutionAPI,\r\n\tAddress,\r\n\tHexString,\r\n\tValidChains,\r\n\tHardfork,\r\n\tTransaction,\r\n\tTransactionWithFromLocalWalletIndex,\r\n\tTransactionWithToLocalWalletIndex,\r\n\tTransactionWithFromAndToLocalWalletIndex,\r\n\tCommon,\r\n\tWeb3NetAPI,\r\n\tNumbers,\r\n\tDataFormat,\r\n\tDEFAULT_RETURN_FORMAT,\r\n\tFormatType,\r\n\tETH_DATA_FORMAT,\r\n} from 'web3-types';\r\nimport { Web3Context } from 'web3-core';\r\nimport { privateKeyToAddress } from 'web3-eth-accounts';\r\nimport { getId } from 'web3-net';\r\nimport { isNullish, isNumber, isHexStrict, isAddress } from 'web3-validator';\r\nimport {\r\n\tInvalidTransactionWithSender,\r\n\tInvalidTransactionWithReceiver,\r\n\tLocalWalletNotAvailableError,\r\n\tTransactionDataAndInputError,\r\n\tUnableToPopulateNonceError,\r\n} from 'web3-errors';\r\nimport { bytesToHex, format } from 'web3-utils';\r\nimport { NUMBER_DATA_FORMAT } from '../constants.js';\r\n// eslint-disable-next-line import/no-cycle\r\nimport { getChainId, getTransactionCount } from '../rpc_method_wrappers.js';\r\nimport { detectTransactionType } from './detect_transaction_type.js';\r\nimport { transactionSchema } from '../schemas.js';\r\nimport { InternalTransaction } from '../types.js';\r\n// eslint-disable-next-line import/no-cycle\r\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\r\n\r\nexport const getTransactionFromOrToAttr = (\r\n\tattr: 'from' | 'to',\r\n\tweb3Context: Web3Context<EthExecutionAPI>,\r\n\ttransaction?:\r\n\t\t| Transaction\r\n\t\t| TransactionWithFromLocalWalletIndex\r\n\t\t| TransactionWithToLocalWalletIndex\r\n\t\t| TransactionWithFromAndToLocalWalletIndex,\r\n\tprivateKey?: HexString | Uint8Array,\r\n): Address | undefined => {\r\n\tif (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\r\n\t\tif (typeof transaction[attr] === 'string' && isAddress(transaction[attr] as string)) {\r\n\t\t\treturn transaction[attr] as Address;\r\n\t\t}\r\n\t\tif (!isHexStrict(transaction[attr] as string) && isNumber(transaction[attr] as Numbers)) {\r\n\t\t\tif (web3Context.wallet) {\r\n\t\t\t\tconst account = web3Context.wallet.get(\r\n\t\t\t\t\tformat({ format: 'uint' }, transaction[attr] as Numbers, NUMBER_DATA_FORMAT),\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (!isNullish(account)) {\r\n\t\t\t\t\treturn account.address;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow new LocalWalletNotAvailableError();\r\n\t\t\t}\r\n\t\t\tthrow new LocalWalletNotAvailableError();\r\n\t\t} else {\r\n\t\t\tthrow attr === 'from'\r\n\t\t\t\t? new InvalidTransactionWithSender(transaction.from)\r\n\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n\t\t\t\t  new InvalidTransactionWithReceiver(transaction.to);\r\n\t\t}\r\n\t}\r\n\tif (attr === 'from') {\r\n\t\tif (!isNullish(privateKey)) return privateKeyToAddress(privateKey);\r\n\t\tif (!isNullish(web3Context.defaultAccount)) return web3Context.defaultAccount;\r\n\t}\r\n\r\n\treturn undefined;\r\n};\r\n\r\nexport const getTransactionNonce = async <ReturnFormat extends DataFormat>(\r\n\tweb3Context: Web3Context<EthExecutionAPI>,\r\n\taddress?: Address,\r\n\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\r\n) => {\r\n\tif (isNullish(address)) {\r\n\t\t// TODO if (web3.eth.accounts.wallet) use address from local wallet\r\n\t\tthrow new UnableToPopulateNonceError();\r\n\t}\r\n\r\n\treturn getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);\r\n};\r\n\r\nexport const getTransactionType = (\r\n\ttransaction: FormatType<Transaction, typeof ETH_DATA_FORMAT>,\r\n\tweb3Context: Web3Context<EthExecutionAPI>,\r\n) => {\r\n\tconst inferredType = detectTransactionType(transaction, web3Context);\r\n\r\n\tif (!isNullish(inferredType)) return inferredType;\r\n\tif (!isNullish(web3Context.defaultTransactionType))\r\n\t\treturn format({ format: 'uint' }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);\r\n\r\n\treturn undefined;\r\n};\r\n\r\n// Keep in mind that the order the properties of populateTransaction get populated matters\r\n// as some of the properties are dependent on others\r\nexport async function defaultTransactionBuilder<ReturnType = Transaction>(options: {\r\n\ttransaction: Transaction;\r\n\tweb3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;\r\n\tprivateKey?: HexString | Uint8Array;\r\n\tfillGasPrice?: boolean;\r\n}): Promise<ReturnType> {\r\n\t// let populatedTransaction = { ...options.transaction } as unknown as InternalTransaction;\r\n\tlet populatedTransaction = format(\r\n\t\ttransactionSchema,\r\n\t\toptions.transaction,\r\n\t\tDEFAULT_RETURN_FORMAT,\r\n\t) as InternalTransaction;\r\n\r\n\tif (isNullish(populatedTransaction.from)) {\r\n\t\tpopulatedTransaction.from = getTransactionFromOrToAttr(\r\n\t\t\t'from',\r\n\t\t\toptions.web3Context,\r\n\t\t\tundefined,\r\n\t\t\toptions.privateKey,\r\n\t\t);\r\n\t}\r\n\r\n\t// TODO: Debug why need to typecase getTransactionNonce\r\n\tif (isNullish(populatedTransaction.nonce)) {\r\n\t\tpopulatedTransaction.nonce = await getTransactionNonce(\r\n\t\t\toptions.web3Context,\r\n\t\t\tpopulatedTransaction.from,\r\n\t\t\tETH_DATA_FORMAT,\r\n\t\t);\r\n\t}\r\n\r\n\tif (isNullish(populatedTransaction.value)) {\r\n\t\tpopulatedTransaction.value = '0x';\r\n\t}\r\n\r\n\tif (!isNullish(populatedTransaction.data)) {\r\n\t\tif (\r\n\t\t\t!isNullish(populatedTransaction.input) &&\r\n\t\t\tpopulatedTransaction.data !== populatedTransaction.input\r\n\t\t)\r\n\t\t\tthrow new TransactionDataAndInputError({\r\n\t\t\t\tdata: bytesToHex(populatedTransaction.data),\r\n\t\t\t\tinput: bytesToHex(populatedTransaction.input),\r\n\t\t\t});\r\n\r\n\t\tif (!populatedTransaction.data.startsWith('0x'))\r\n\t\t\tpopulatedTransaction.data = `0x${populatedTransaction.data}`;\r\n\r\n\t\tpopulatedTransaction.input = populatedTransaction.data;\r\n\t} else if (!isNullish(populatedTransaction.input)) {\r\n\t\tif (!populatedTransaction.input.startsWith('0x'))\r\n\t\t\tpopulatedTransaction.input = `0x${populatedTransaction.input}`;\r\n\r\n\t\tpopulatedTransaction.data = populatedTransaction.input;\r\n\t} else {\r\n\t\tpopulatedTransaction.input = '0x';\r\n\t\tpopulatedTransaction.data = '0x';\r\n\t}\r\n\r\n\tif (isNullish(populatedTransaction.common)) {\r\n\t\tif (options.web3Context.defaultCommon) {\r\n\t\t\tconst common = options.web3Context.defaultCommon as unknown as Common;\r\n\t\t\tconst chainId = common.customChain.chainId as string;\r\n\t\t\tconst networkId = common.customChain.networkId as string;\r\n\t\t\tconst name = common.customChain.name as string;\r\n\t\t\tpopulatedTransaction.common = {\r\n\t\t\t\t...common,\r\n\t\t\t\tcustomChain: { chainId, networkId, name },\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (isNullish(populatedTransaction.chain)) {\r\n\t\t\tpopulatedTransaction.chain = options.web3Context.defaultChain as ValidChains;\r\n\t\t}\r\n\t\tif (isNullish(populatedTransaction.hardfork)) {\r\n\t\t\tpopulatedTransaction.hardfork = options.web3Context.defaultHardfork as Hardfork;\r\n\t\t}\r\n\t}\r\n\r\n\tif (\r\n\t\tisNullish(populatedTransaction.chainId) &&\r\n\t\tisNullish(populatedTransaction.common?.customChain.chainId)\r\n\t) {\r\n\t\tpopulatedTransaction.chainId = await getChainId(options.web3Context, ETH_DATA_FORMAT);\r\n\t}\r\n\r\n\tif (isNullish(populatedTransaction.networkId)) {\r\n\t\tpopulatedTransaction.networkId =\r\n\t\t\t(options.web3Context.defaultNetworkId as string) ??\r\n\t\t\t(await getId(options.web3Context, ETH_DATA_FORMAT));\r\n\t}\r\n\r\n\tif (isNullish(populatedTransaction.gasLimit) && !isNullish(populatedTransaction.gas)) {\r\n\t\tpopulatedTransaction.gasLimit = populatedTransaction.gas;\r\n\t}\r\n\r\n\tpopulatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);\r\n\r\n\tif (\r\n\t\tisNullish(populatedTransaction.accessList) &&\r\n\t\t(populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')\r\n\t) {\r\n\t\tpopulatedTransaction.accessList = [];\r\n\t}\r\n\r\n\tif (options.fillGasPrice)\r\n\t\tpopulatedTransaction = {\r\n\t\t\t...populatedTransaction,\r\n\t\t\t...(await getTransactionGasPricing(\r\n\t\t\t\tpopulatedTransaction,\r\n\t\t\t\toptions.web3Context,\r\n\t\t\t\tETH_DATA_FORMAT,\r\n\t\t\t)),\r\n\t\t};\r\n\r\n\treturn populatedTransaction as ReturnType;\r\n}\r\n\r\nexport const transactionBuilder = async <ReturnType = Transaction>(\r\n\toptions: {\r\n\t\ttransaction: Transaction;\r\n\t\tweb3Context: Web3Context<EthExecutionAPI>;\r\n\t\tprivateKey?: HexString | Uint8Array;\r\n\t\tfillGasPrice?: boolean;\r\n\t},\r\n\t// eslint-disable-next-line @typescript-eslint/require-await\r\n) =>\r\n\t(options.web3Context.transactionBuilder ?? defaultTransactionBuilder)({\r\n\t\t...options,\r\n\t\ttransaction: options.transaction,\r\n\t}) as unknown as ReturnType;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}